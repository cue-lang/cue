# Code generated internal/ci/ci_tool.cue; DO NOT EDIT.

name: TryBot
"on":
  push:
    branches:
      - ci/test
      - master
      - release-branch.*
    tags-ignore:
      - v*
  workflow_dispatch: {}
  pull_request: {}
jobs:
  test:
    strategy:
      fail-fast: false
      matrix:
        go-version:
          - 1.22.x
          - 1.23.x
        runner:
          - ubuntu-22.04
          - macos-14
          - windows-2022
    runs-on: ${{ matrix.runner }}
    if: |-
      (contains(github.event.head_commit.message, '
      Dispatch-Trailer: {"type":"trybot"')) || ! (contains(github.event.head_commit.message, '
      Dispatch-Trailer: {"type":"'))
    defaults:
      run:
        shell: bash
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.sha }}
          fetch-depth: 0
      - name: Reset git directory modification times
        run: touch -t 202211302355 $(find * -type d)
      - name: Restore git file modification times
        uses: chetan/git-restore-mtime-action@075f9bc9d159805603419d50f794bd9f33252ebe
      - name: Try to extract Dispatch-Trailer
        id: DispatchTrailer
        run: |-
          x="$(git log -1 --pretty='%(trailers:key=Dispatch-Trailer,valueonly)')"
          if [[ "$x" == "" ]]
          then
             # Some steps rely on the presence or otherwise of the Dispatch-Trailer.
             # We know that we don't have a Dispatch-Trailer in this situation,
             # hence we use the JSON value null in order to represent that state.
             # This means that GitHub expressions can determine whether a Dispatch-Trailer
             # is present or not by checking whether the fromJSON() result of the
             # output from this step is the JSON value null or not.
             x=null
          fi
          echo "value<<EOD" >> $GITHUB_OUTPUT
          echo "$x" >> $GITHUB_OUTPUT
          echo "EOD" >> $GITHUB_OUTPUT
      - name: Check we don't have Dispatch-Trailer on a protected branch
        if: |-
          ((github.ref == 'refs/heads/master' || startsWith(github.ref, 'refs/heads/release-branch.')) && (! (contains(github.event.head_commit.message, '
          Dispatch-Trailer: {"type":"')))) && (contains(github.event.head_commit.message, '
          Dispatch-Trailer: {"type":"'))
        run: |-
          echo "github.event.head_commit.message contains Dispatch-Trailer but we are on a protected branch"
          false
      - name: Install Go
        uses: actions/setup-go@v5
        with:
          cache: false
          go-version: ${{ matrix.go-version }}
      - name: Set common go env vars
        run: |-
          go env -w GOTOOLCHAIN=local

          # Dump env for good measure
          go env
      - name: Get go mod cache directory
        id: go-mod-cache-dir
        run: echo "dir=$(go env GOMODCACHE)" >> ${GITHUB_OUTPUT}
      - name: Get go build/test cache directory
        id: go-cache-dir
        run: echo "dir=$(go env GOCACHE)" >> ${GITHUB_OUTPUT}
      - with:
          path: |-
            ${{ steps.go-mod-cache-dir.outputs.dir }}/cache/download
            ${{ steps.go-cache-dir.outputs.dir }}
          key: ${{ runner.os }}-${{ matrix.go-version }}-${{ github.run_id }}
          restore-keys: ${{ runner.os }}-${{ matrix.go-version }}
        if: |-
          (((github.ref == 'refs/heads/master' || startsWith(github.ref, 'refs/heads/release-branch.')) && (! (contains(github.event.head_commit.message, '
          Dispatch-Trailer: {"type":"')))) || (github.ref == 'refs/heads/ci/test'))
        uses: actions/cache@v4
      - with:
          path: |-
            ${{ steps.go-mod-cache-dir.outputs.dir }}/cache/download
            ${{ steps.go-cache-dir.outputs.dir }}
          key: ${{ runner.os }}-${{ matrix.go-version }}-${{ github.run_id }}
          restore-keys: ${{ runner.os }}-${{ matrix.go-version }}
        uses: actions/cache/restore@v4
        if: |-
          ! (((github.ref == 'refs/heads/master' || startsWith(github.ref, 'refs/heads/release-branch.')) && (! (contains(github.event.head_commit.message, '
          Dispatch-Trailer: {"type":"')))) || (github.ref == 'refs/heads/ci/test'))
      - if: |-
          github.repository == 'cue-lang/cue' && (((github.ref == 'refs/heads/master' || startsWith(github.ref, 'refs/heads/release-branch.')) && (! (contains(github.event.head_commit.message, '
          Dispatch-Trailer: {"type":"')))) || github.ref == 'refs/heads/ci/test')
        run: go clean -testcache
      - name: Early git and code sanity checks
        if: (matrix.go-version == '1.23.x' && matrix.runner == 'ubuntu-22.04')
        run: go run ./internal/ci/checks
      - name: Test
        if: |-
          ((github.ref == 'refs/heads/master' || startsWith(github.ref, 'refs/heads/release-branch.')) && (! (contains(github.event.head_commit.message, '
          Dispatch-Trailer: {"type":"')))) || !(matrix.go-version == '1.23.x' && matrix.runner == 'ubuntu-22.04')
        run: go test ./...
      - name: Test with -race
        env:
          GORACE: atexit_sleep_ms=10
        if: (matrix.go-version == '1.23.x' && matrix.runner == 'ubuntu-22.04')
        run: go test -race ./...
      - name: Test with -tags=cuewasm
        run: go test -tags cuewasm ./cmd/cue/cmd ./cue/interpreter/wasm
      - name: gcloud auth for end-to-end tests
        id: auth
        uses: google-github-actions/auth@v2
        if: |-
          github.repository == 'cue-lang/cue' && (((github.ref == 'refs/heads/master' || startsWith(github.ref, 'refs/heads/release-branch.')) && (! (contains(github.event.head_commit.message, '
          Dispatch-Trailer: {"type":"')))) || (github.ref == 'refs/heads/ci/test')) && (matrix.go-version == '1.23.x' && matrix.runner == 'ubuntu-22.04')
        with:
          credentials_json: ${{ secrets.E2E_GCLOUD_KEY }}
      - name: gcloud setup for end-to-end tests
        if: |-
          github.repository == 'cue-lang/cue' && (((github.ref == 'refs/heads/master' || startsWith(github.ref, 'refs/heads/release-branch.')) && (! (contains(github.event.head_commit.message, '
          Dispatch-Trailer: {"type":"')))) || (github.ref == 'refs/heads/ci/test')) && (matrix.go-version == '1.23.x' && matrix.runner == 'ubuntu-22.04')
        uses: google-github-actions/setup-gcloud@v2
      - name: End-to-end test
        env:
          CUE_TEST_LOGINS: ${{ secrets.E2E_CUE_LOGINS }}
        if: |-
          github.repository == 'cue-lang/cue' && (((github.ref == 'refs/heads/master' || startsWith(github.ref, 'refs/heads/release-branch.')) && (! (contains(github.event.head_commit.message, '
          Dispatch-Trailer: {"type":"')))) || (github.ref == 'refs/heads/ci/test')) && (matrix.go-version == '1.23.x' && matrix.runner == 'ubuntu-22.04')
        run: |-
          cd internal/_e2e
          go test -race
      - if: (matrix.go-version == '1.23.x' && matrix.runner == 'ubuntu-22.04')
        name: Go checks
        run: |-
          go vet ./...
          go mod tidy
          (cd internal/_e2e && go test -run=-)
      - if: (matrix.go-version == '1.23.x' && matrix.runner == 'ubuntu-22.04')
        name: Check all git tags are available
        run: |-
          cd $(mktemp -d)

          git ls-remote --tags https://github.com/cue-lang/cue >github.txt
          echo "GitHub tags:"
          sed 's/^/    /' github.txt

          git ls-remote --tags https://review.gerrithub.io/cue-lang/cue >gerrit.txt

          if ! diff -u github.txt gerrit.txt; then
          	echo "GitHub and Gerrit do not agree on the list of tags!"
          	echo "Did you forget about refs/attic branches? https://github.com/cue-lang/cue/wiki/Notes-for-project-maintainers"
          	exit 1
          fi
      - name: Generate
        env:
          CUE_LOGINS: ${{ secrets.NOTCUECKOO_CUE_LOGINS }}
        run: |-
          export CUE_CONFIG_DIR=$(mktemp -d)
          echo "$CUE_LOGINS" > $CUE_CONFIG_DIR/logins.json
          go generate ./...
        if: (matrix.go-version == '1.23.x' && matrix.runner == 'ubuntu-22.04')
      - name: Check that git is clean at the end of the job
        if: always()
        run: test -z "$(git status --porcelain)" || (git status; git diff; false)
