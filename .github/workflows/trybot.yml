# Code generated internal/ci/ci_tool.cue; DO NOT EDIT.

name: TryBot
"on":
  push:
    branches:
      - ci/test
      - master
      - release-branch.*
    tags-ignore:
      - v*
  pull_request: {}
  workflow_dispatch: {}
jobs:
  test:
    strategy:
      fail-fast: false
      matrix:
        go-version:
          - 1.20.x
          - 1.21.x
        runner:
          - ubuntu-22.04
          - macos-11
          - windows-2022
    runs-on: ${{ matrix.runner }}
    defaults:
      run:
        shell: bash
    if: |-
      (contains(github.event.head_commit.message, '
      Dispatch-Trailer: {"type":"trybot"')) || ! (contains(github.event.head_commit.message, '
      Dispatch-Trailer: {"type":"'))
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          ref: ${{ github.event.pull_request.head.sha }}
          fetch-depth: 0
      - name: Reset git directory modification times
        run: touch -t 202211302355 $(find * -type d)
      - name: Restore git file modification times
        uses: chetan/git-restore-mtime-action@075f9bc9d159805603419d50f794bd9f33252ebe
      - id: DispatchTrailer
        name: Try to extract Dispatch-Trailer
        run: |-
          x="$(git log -1 --pretty='%(trailers:key=Dispatch-Trailer,valueonly)')"
          if [[ "$x" == "" ]]
          then
             # Some steps rely on the presence or otherwise of the Dispatch-Trailer.
             # We know that we don't have a Dispatch-Trailer in this situation,
             # hence we use the JSON value null in order to represent that state.
             # This means that GitHub expressions can determine whether a Dispatch-Trailer
             # is present or not by checking whether the fromJSON() result of the
             # output from this step is the JSON value null or not.
             x=null
          fi
          echo "value<<EOD" >> $GITHUB_OUTPUT
          echo "$x" >> $GITHUB_OUTPUT
          echo "EOD" >> $GITHUB_OUTPUT
      - if: |-
          ((github.ref == 'refs/heads/master' || startsWith(github.ref, 'refs/heads/release-branch.')) && (! (contains(github.event.head_commit.message, '
          Dispatch-Trailer: {"type":"')))) && (contains(github.event.head_commit.message, '
          Dispatch-Trailer: {"type":"'))
        name: Check we don't have Dispatch-Trailer on a protected branch
        run: |-
          echo "github.event.head_commit.message contains Dispatch-Trailer"
          echo "github.event.head_commit.message value"
          cat <<EOD
          ${{ github.event.head_commit.message }}
          EOD
          echo "containsDispatchTrailer expression"
          cat <<EOD
          (contains(github.event.head_commit.message, '
          Dispatch-Trailer: {"type":"'))
          EOD
          false
      - name: Install Go
        uses: actions/setup-go@v4
        with:
          cache: false
          go-version: ${{ matrix.go-version }}
      - id: go-mod-cache-dir
        name: Get go mod cache directory
        run: echo "dir=$(go env GOMODCACHE)" >> ${GITHUB_OUTPUT}
      - id: go-cache-dir
        name: Get go build/test cache directory
        run: echo "dir=$(go env GOCACHE)" >> ${GITHUB_OUTPUT}
      - if: |-
          (((github.ref == 'refs/heads/master' || startsWith(github.ref, 'refs/heads/release-branch.')) && (! (contains(github.event.head_commit.message, '
          Dispatch-Trailer: {"type":"')))) || (github.ref == 'refs/heads/ci/test'))
        uses: actions/cache@v3
        with:
          path: |-
            ${{ steps.go-mod-cache-dir.outputs.dir }}/cache/download
            ${{ steps.go-cache-dir.outputs.dir }}
          key: ${{ runner.os }}-${{ matrix.go-version }}-${{ github.run_id }}
          restore-keys: ${{ runner.os }}-${{ matrix.go-version }}
      - if: |-
          ! (((github.ref == 'refs/heads/master' || startsWith(github.ref, 'refs/heads/release-branch.')) && (! (contains(github.event.head_commit.message, '
          Dispatch-Trailer: {"type":"')))) || (github.ref == 'refs/heads/ci/test'))
        uses: actions/cache/restore@v3
        with:
          path: |-
            ${{ steps.go-mod-cache-dir.outputs.dir }}/cache/download
            ${{ steps.go-cache-dir.outputs.dir }}
          key: ${{ runner.os }}-${{ matrix.go-version }}-${{ github.run_id }}
          restore-keys: ${{ runner.os }}-${{ matrix.go-version }}
      - if: |-
          github.repository == 'cue-lang/cue' && (((github.ref == 'refs/heads/master' || startsWith(github.ref, 'refs/heads/release-branch.')) && (! (contains(github.event.head_commit.message, '
          Dispatch-Trailer: {"type":"')))) || github.ref == 'refs/heads/ci/test')
        run: go clean -testcache
      - if: (matrix.go-version == '1.21.x' && matrix.runner == 'ubuntu-22.04')
        name: Early git and code sanity checks
        run: |-
          # Ensure that commit messages have a blank second line.
          # We know that a commit message must be longer than a single
          # line because each commit must be signed-off.
          if git log --format=%B -n 1 HEAD | sed -n '2{/^$/{q1}}'; then
          	echo "second line of commit message must be blank"
          	exit 1
          fi

          # All authors, including co-authors, must have a signed-off trailer by email.
          # Note that trailers are in the form "Name <email>", so grab the email with sed.
          # For now, we require the sorted lists of author and signer emails to match.
          # Note that this also fails if a commit isn't signed-off at all.
          #
          # In Gerrit we already enable a form of this via https://gerrit-review.googlesource.com/Documentation/project-configuration.html#require-signed-off-by,
          # but it does not support co-authors nor can it be used when testing GitHub PRs.
          commit_authors="$(
          	{
          		git log -1 --pretty='%ae'
          		git log -1 --pretty='%(trailers:key=Co-authored-by,valueonly)' | sed -ne 's/.* <\(.*\)>/\1/p'
          	} | sort -u
          )"
          commit_signers="$(
          	{
          		git log -1 --pretty='%(trailers:key=Signed-off-by,valueonly)' | sed -ne 's/.* <\(.*\)>/\1/p'
          	} | sort -u
          )"
          if [[ "${commit_authors}" != "${commit_signers}" ]]; then
          	echo "Error: commit author email addresses do not match signed-off-by trailers"
          	echo
          	echo "Authors:"
          	echo "${commit_authors}"
          	echo
          	echo "Signers:"
          	echo "${commit_signers}"
          	exit 1
          fi
      - if: |-
          ((github.ref == 'refs/heads/master' || startsWith(github.ref, 'refs/heads/release-branch.')) && (! (contains(github.event.head_commit.message, '
          Dispatch-Trailer: {"type":"')))) || (matrix.go-version == '1.21.x' && matrix.runner == 'ubuntu-22.04')
        run: echo CUE_LONG=true >> $GITHUB_ENV
      - if: (matrix.go-version == '1.21.x' && matrix.runner == 'ubuntu-22.04')
        name: Generate
        run: go generate ./...
      - if: |-
          ((github.ref == 'refs/heads/master' || startsWith(github.ref, 'refs/heads/release-branch.')) && (! (contains(github.event.head_commit.message, '
          Dispatch-Trailer: {"type":"')))) || !(matrix.go-version == '1.21.x' && matrix.runner == 'ubuntu-22.04')
        name: Test
        run: go test ./...
      - if: (matrix.go-version == '1.21.x' && matrix.runner == 'ubuntu-22.04')
        name: Test with -race
        run: go test -race ./...
        env:
          GORACE: atexit_sleep_ms=10
      - name: gcloud auth for end-to-end tests
        id: auth
        if: |-
          github.repository == 'cue-lang/cue' && ((github.ref == 'refs/heads/master' || startsWith(github.ref, 'refs/heads/release-branch.')) && (! (contains(github.event.head_commit.message, '
          Dispatch-Trailer: {"type":"')))) && (matrix.go-version == '1.21.x' && matrix.runner == 'ubuntu-22.04')
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.E2E_GCLOUD_KEY }}
      - if: |-
          github.repository == 'cue-lang/cue' && ((github.ref == 'refs/heads/master' || startsWith(github.ref, 'refs/heads/release-branch.')) && (! (contains(github.event.head_commit.message, '
          Dispatch-Trailer: {"type":"')))) && (matrix.go-version == '1.21.x' && matrix.runner == 'ubuntu-22.04')
        name: gcloud setup for end-to-end tests
        uses: google-github-actions/setup-gcloud@v1
      - if: |-
          github.repository == 'cue-lang/cue' && ((github.ref == 'refs/heads/master' || startsWith(github.ref, 'refs/heads/release-branch.')) && (! (contains(github.event.head_commit.message, '
          Dispatch-Trailer: {"type":"')))) && (matrix.go-version == '1.21.x' && matrix.runner == 'ubuntu-22.04')
        name: End-to-end test
        env:
          GITHUB_TOKEN: ${{ secrets.E2E_GITHUB_TOKEN }}
          CUE_LOGINS: ${{ secrets.E2E_CUE_LOGINS }}
        run: |-
          cd internal/e2e
          go test
      - if: (matrix.go-version == '1.21.x' && matrix.runner == 'ubuntu-22.04')
        name: Check
        run: |-
          for module in . internal/e2e; do
          	(
          		cd $module
          		go vet ./...
          		go mod tidy
          	)
          done
      - name: Check that git is clean at the end of the job
        run: test -z "$(git status --porcelain)" || (git status; git diff; false)
