# Code generated internal/ci/ci_tool.cue; DO NOT EDIT.

name: TryBot
"on":
  push:
    branches:
      - trybot/*/*
      - ci/test
      - master
      - release-branch.*
    tags-ignore:
      - v*
  pull_request: {}
jobs:
  test:
    strategy:
      fail-fast: false
      matrix:
        go-version:
          - 1.18.x
          - 1.19.x
        os:
          - ubuntu-20.04
          - macos-11
          - windows-2022
    runs-on: ${{ matrix.os }}
    defaults:
      run:
        shell: bash
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          ref: ${{ github.event.pull_request.head.sha }}
      - name: Install Go
        uses: actions/setup-go@v3
        with:
          go-version: ${{ matrix.go-version }}
      - id: go-mod-cache-dir
        name: Get go mod cache directory
        run: echo "dir=$(go env GOMODCACHE)" >> ${GITHUB_OUTPUT}
      - id: go-cache-dir
        name: Get go build/test cache directory
        run: echo "dir=$(go env GOCACHE)" >> ${GITHUB_OUTPUT}
      - uses: actions/cache@v3
        with:
          path: |-
            ${{ steps.go-mod-cache-dir.outputs.dir }}/cache/download
            ${{ steps.go-cache-dir.outputs.dir }}
          key: ${{ runner.os }}-${{ matrix.go-version }}-${{ github.run_id }}
          restore-keys: ${{ runner.os }}-${{ matrix.go-version }}
      - if: (matrix.go-version == '1.19.x' && matrix.os == 'ubuntu-20.04')
        name: Early git and code sanity checks
        run: |-
          # Ensure the recent commit messages have Signed-off-by headers.
          # TODO: Remove once this is enforced for admins too;
          # see https://bugs.chromium.org/p/gerrit/issues/detail?id=15229
          # TODO: Our --max-count here is just 1, because we've made mistakes very
          # recently. Increase it to 5 or 10 soon, to also cover CL chains.
          for commit in $(git rev-list --max-count=1 HEAD); do
          	if ! git rev-list --format=%B --max-count=1 $commit | grep -q '^Signed-off-by:'; then
          		echo -e "
          Recent commit is lacking Signed-off-by:
          "
          		git show --quiet $commit
          		exit 1
          	fi
          done
      - if: (github.ref == 'refs/heads/master' || startsWith(github.ref, 'refs/heads/release-branch.'))
        run: echo CUE_LONG=true >> $GITHUB_ENV
      - if: (matrix.go-version == '1.19.x' && matrix.os == 'ubuntu-20.04')
        name: Generate
        run: go generate ./...
      - if: (github.ref == 'refs/heads/master' || startsWith(github.ref, 'refs/heads/release-branch.')) || !(matrix.go-version == '1.19.x' && matrix.os == 'ubuntu-20.04')
        name: Test
        run: go test ./...
      - if: (matrix.go-version == '1.19.x' && matrix.os == 'ubuntu-20.04')
        name: Test with -race
        run: go test -race ./...
      - if: (matrix.go-version == '1.19.x' && matrix.os == 'ubuntu-20.04')
        name: Check
        run: go vet ./...
      - name: Check that git is clean at the end of the job
        run: test -z "$(git status --porcelain)" || (git status; git diff; false)
      - if: (github.ref == 'refs/heads/master' || startsWith(github.ref, 'refs/heads/release-branch.')) && (matrix.go-version == '1.19.x' && matrix.os == 'ubuntu-20.04')
        name: Pull this commit through the proxy on master
        run: |-
          v=$(git rev-parse HEAD)
          cd $(mktemp -d)
          go mod init test

          # Try up to five times if we get a 410 error, which either the proxy or sumdb
          # can return if they haven't retrieved the requested version yet.
          for i in {1..5}; do
          	# GitHub Actions defaults to "set -eo pipefail", so we use an if clause to
          	# avoid stopping too early. We also use a "failed" file as "go get" runs
          	# in a subshell via the pipe.
          	rm -f failed
          	if ! GOPROXY=https://proxy.golang.org go get cuelang.org/go/cmd/cue@$v; then
          		touch failed
          	fi |& tee output.txt

          	if [[ -f failed ]]; then
          		if grep -q '410 Gone' output.txt; then
          			echo "got a 410; retrying"
          			sleep 1s # do not be too impatient
          			continue
          		fi
          		exit 1 # some other failure; stop
          	else
          		exit 0 # success; stop
          	fi
          done

          echo "giving up after a number of retries"
          exit 1
      - run: find '${{ steps.go-mod-cache-dir.outputs.dir }}/cache/download' '${{ steps.go-cache-dir.outputs.dir }}' -type f -amin +7200 -delete -print
