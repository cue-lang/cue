{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "0ece4ed8_c9ac0049",
        "filename": "/COMMIT_MSG",
        "patchSetId": 8
      },
      "lineNbr": 23,
      "author": {
        "id": 1017720
      },
      "writtenOn": "2023-11-10T10:33:53Z",
      "side": 1,
      "message": "add an empty line after this, since \"fixes\" is not a git trailer. the format should also be like `Fixes #2679.` for consistency with other commits.",
      "revId": "063d2a59e495d4e8ec062a3e43684edaa77c81cc",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "9cf8fe15_b82370b5",
        "filename": "/COMMIT_MSG",
        "patchSetId": 8
      },
      "lineNbr": 23,
      "author": {
        "id": 1021466
      },
      "writtenOn": "2023-11-10T10:44:57Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "0ece4ed8_c9ac0049",
      "revId": "063d2a59e495d4e8ec062a3e43684edaa77c81cc",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "95107976_fe1f1aba",
        "filename": "cmd/cue/cmd/get_go.go",
        "patchSetId": 8
      },
      "lineNbr": 1402,
      "author": {
        "id": 1017720
      },
      "writtenOn": "2023-11-10T10:33:53Z",
      "side": 1,
      "message": "`doc.Text()` renders the entire godoc block as a single string, and then you split it again - better to loop over CommentGroup.List, and for each Comment, check if Text is `// +optional` after you\u0027ve cut `\u003d`.\n\nThis should end up as the same result, but not require the Text and Split dance.",
      "revId": "063d2a59e495d4e8ec062a3e43684edaa77c81cc",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "212be3bd_3b4d2089",
        "filename": "cmd/cue/cmd/get_go.go",
        "patchSetId": 8
      },
      "lineNbr": 1402,
      "author": {
        "id": 1021466
      },
      "writtenOn": "2023-11-10T10:44:57Z",
      "side": 1,
      "message": "Good observation, thanks. I am not sure how I missed the list of comments. The only caveat is that \"/*\" style comments will not match this. Not sure if it\u0027s worth worrying about.",
      "parentUuid": "95107976_fe1f1aba",
      "revId": "063d2a59e495d4e8ec062a3e43684edaa77c81cc",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e4947866_3b1a8fe7",
        "filename": "cmd/cue/cmd/get_go.go",
        "patchSetId": 8
      },
      "lineNbr": 1402,
      "author": {
        "id": 1021466
      },
      "writtenOn": "2023-11-10T10:49:32Z",
      "side": 1,
      "message": "Hmm, the other problem with using `doc.Lines` is that it preserves all of the syntax like `//`. I think it may be worth sticking with the original implementation to avoid stripping that and handling comment edge cases?",
      "parentUuid": "212be3bd_3b4d2089",
      "revId": "063d2a59e495d4e8ec062a3e43684edaa77c81cc",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "e6df2d6c_05fd4eeb",
        "filename": "cmd/cue/cmd/get_go.go",
        "patchSetId": 8
      },
      "lineNbr": 1402,
      "author": {
        "id": 1017720
      },
      "writtenOn": "2023-11-10T10:53:46Z",
      "side": 1,
      "message": "All upstream examples use `//`, and `/*` comments are rare and add more edge cases, so I\u0027m inclined to only support `//`.\n\nI do think you should stick to CommentGroup.Lines. I left a comment in the other thread, which I wrote as of patchset 10. There aren\u0027t any edge cases you need to worry about - you just literally need\n\n```\nfor _, comment :\u003d range doc {\n  before, _, _ :\u003d strings.Cut(comment.Text, \"\u003d\")\n  if before \u003d\u003d \"// +optional\" {\n```",
      "parentUuid": "212be3bd_3b4d2089",
      "revId": "063d2a59e495d4e8ec062a3e43684edaa77c81cc",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "93962cbf_030b4336",
        "filename": "cmd/cue/cmd/get_go.go",
        "patchSetId": 8
      },
      "lineNbr": 1404,
      "author": {
        "id": 1017720
      },
      "writtenOn": "2023-11-10T10:33:53Z",
      "side": 1,
      "message": "do we want to look for `+required` to directly `return false`, e.g. even when the type is a pointer? the upstream docs briefly mention that comment directive, and if we follow `+optional`, I think we should follow both. Otherwise it could be a bit confusing for the end user.",
      "revId": "063d2a59e495d4e8ec062a3e43684edaa77c81cc",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "bd6ce96f_e6ad318b",
        "filename": "cmd/cue/cmd/get_go.go",
        "patchSetId": 8
      },
      "lineNbr": 1404,
      "author": {
        "id": 1021466
      },
      "writtenOn": "2023-11-10T10:44:57Z",
      "side": 1,
      "message": "I don\u0027t think so. I am basing this off the original implementation which does not make any checks for a `+required` tag at all.\n\nhttps://github.com/kubernetes/kube-openapi/blob/2dd684a91f00351087fe2f4ed5408d4d2f3775ab/pkg/generators/openapi.go#L31",
      "parentUuid": "93962cbf_030b4336",
      "revId": "063d2a59e495d4e8ec062a3e43684edaa77c81cc",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "aa7b3a3f_724e3fe0",
        "filename": "cmd/cue/cmd/get_go.go",
        "patchSetId": 8
      },
      "lineNbr": 1404,
      "author": {
        "id": 1017720
      },
      "writtenOn": "2023-11-10T10:53:46Z",
      "side": 1,
      "message": "OK - can we add a note about it then, for future reference at least?\n\nFor example, I might write:\n\n```\n// Support the \"// +optional\" directives documented by the Kubernetes API conventions:\n// https://github.com/kubernetes/community/blob/HEAD/contributors/devel/sig-architecture/api-conventions.md#optional-vs-required\n//\n// Note that the docs also show \"// +required\", but the rules and code seem to ignore it.\n```\n\nAlso, now that you use `Comment.Text` directly, I think you need `before \u003d\u003d \"// +optional`.\n\nAnd another one: I thikn you should drop TrimSpace. I don\u0027t think you should be allowing `//      +optional\\n` or `// +optional                \\n` (explicit newlines for clarity).",
      "parentUuid": "bd6ce96f_e6ad318b",
      "revId": "063d2a59e495d4e8ec062a3e43684edaa77c81cc",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7aed816a_75b90b9b",
        "filename": "cmd/cue/cmd/get_go.go",
        "patchSetId": 8
      },
      "lineNbr": 1404,
      "author": {
        "id": 1021466
      },
      "writtenOn": "2023-11-10T10:57:16Z",
      "side": 1,
      "message": "The canonical implementation trims space also.\n\nhttps://github.com/kubernetes/gengo/blob/9cce18d56c01fab1d8ed72411ad6ef7005fc33a4/types/comments.go#L45\n\nI think stripping `//` and `/*`, checking if `doc !\u003d nil` and splitting by newline for multi-line comments is going to become quite ugly.",
      "parentUuid": "aa7b3a3f_724e3fe0",
      "revId": "063d2a59e495d4e8ec062a3e43684edaa77c81cc",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4c861835_d44be0e9",
        "filename": "cmd/cue/cmd/get_go.go",
        "patchSetId": 8
      },
      "lineNbr": 1404,
      "author": {
        "id": 1017720
      },
      "writtenOn": "2023-11-10T11:02:05Z",
      "side": 1,
      "message": "I wasn\u0027t able to find any mention of funky whitespace in their documentation or examples, and comment directives need to be very obvious and simple to parse, so I\u0027m inclined to keep it as simple as possible unless we find an actual example in practice that the simple logic doesn\u0027t support.\n\nI think not supporting `/* +optional */` nor `//                 +optional` is a feature, not a bug :) We only need to emulate the Kubernetes behavior that is documented and widely used - we don\u0027t need a one-to-one copy of the funky stuff their code actually does.",
      "parentUuid": "7aed816a_75b90b9b",
      "revId": "063d2a59e495d4e8ec062a3e43684edaa77c81cc",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5a75c233_df0136a5",
        "filename": "cmd/cue/cmd/get_go.go",
        "patchSetId": 8
      },
      "lineNbr": 1404,
      "author": {
        "id": 1021466
      },
      "writtenOn": "2023-11-10T11:13:07Z",
      "side": 1,
      "message": "I think generally I agree that people shouldn\u0027t be writing comment directives in unclear ways, but I am afraid of deviating from the actual behaviour of Kubernetes. \n\nThere are examples from GitHub code search which show both `//+optional` and `// +optional`. There may also be other instances of unconventional but valid directives. I believe handling this correctly makes the implementation a bit obtuse and would prefer to worry about performance or niceness at a later date if relevant. The current implementation should roughly match the behaviour of the upstream Kubernetes package and help avoid inconsistent code generation.",
      "parentUuid": "4c861835_d44be0e9",
      "revId": "063d2a59e495d4e8ec062a3e43684edaa77c81cc",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f5682233_9d37c179",
        "filename": "cmd/cue/cmd/get_go.go",
        "patchSetId": 8
      },
      "lineNbr": 1404,
      "author": {
        "id": 1017720
      },
      "writtenOn": "2023-11-10T11:16:42Z",
      "side": 1,
      "message": "`//+optional` is a good point if it actually shows up in some examples in the wild. Please add it as a test case so that we don\u0027t break it in the future.\n\nThen I\u0027m fine with keeping the logic as is. To be clear, performance wasn\u0027t my concern here - it was more about keeping the logic as straightforward as possible, and following the docs. Go\u0027s directives, for example, don\u0027t allow `//      go:build foo` or `/*go:build foo*/` and I think that helps keep everything nicely predictable.",
      "parentUuid": "5a75c233_df0136a5",
      "revId": "063d2a59e495d4e8ec062a3e43684edaa77c81cc",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a92d9ed9_3b52dcbb",
        "filename": "cmd/cue/cmd/testdata/script/get_go_types.txtar",
        "patchSetId": 8
      },
      "lineNbr": 125,
      "author": {
        "id": 1017720
      },
      "writtenOn": "2023-11-10T10:33:53Z",
      "side": 1,
      "message": "nit: replace `ShouldBeOptional` and `ShouldNotBeOptional` with `Optional` and `Required`, for the sake of avoiding very long names.",
      "revId": "063d2a59e495d4e8ec062a3e43684edaa77c81cc",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "bf07b335_18409477",
        "filename": "cmd/cue/cmd/testdata/script/get_go_types.txtar",
        "patchSetId": 8
      },
      "lineNbr": 125,
      "author": {
        "id": 1021466
      },
      "writtenOn": "2023-11-10T10:44:57Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "a92d9ed9_3b52dcbb",
      "revId": "063d2a59e495d4e8ec062a3e43684edaa77c81cc",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "682bd112_0e372ff0",
        "filename": "cmd/cue/cmd/testdata/script/get_go_types.txtar",
        "patchSetId": 8
      },
      "lineNbr": 125,
      "author": {
        "id": 1017720
      },
      "writtenOn": "2023-11-10T11:16:42Z",
      "side": 1,
      "message": "Hm, did you actually do this? I don\u0027t see it in the last patchset",
      "parentUuid": "bf07b335_18409477",
      "revId": "063d2a59e495d4e8ec062a3e43684edaa77c81cc",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    }
  ]
}