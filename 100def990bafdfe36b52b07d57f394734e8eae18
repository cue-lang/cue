{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "bc705322_6e045fb7",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1017720
      },
      "writtenOn": "2022-06-28T11:18:57Z",
      "side": 1,
      "message": "does github\u0027s syntax highlighting recognize either of the triple-backtick syntax names?",
      "revId": "100def990bafdfe36b52b07d57f394734e8eae18",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "9dc48ccc_4d8fc71d",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1017723
      },
      "writtenOn": "2022-06-28T15:32:35Z",
      "side": 1,
      "message": "It correctly highlight ebnf, but knows nothing about grammar (which is not actually a thing, so we could drop this info string TBH)",
      "parentUuid": "bc705322_6e045fb7",
      "revId": "100def990bafdfe36b52b07d57f394734e8eae18",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "116e9bc5_828d5403",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1017723
      },
      "writtenOn": "2022-06-28T15:32:35Z",
      "side": 1,
      "message": "Marking as a hold to ensure we get a review from @mpvl",
      "revId": "100def990bafdfe36b52b07d57f394734e8eae18",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "948be8be_527536ef",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1013536
      },
      "writtenOn": "2022-07-22T23:43:26Z",
      "side": 1,
      "message": "This is an incorrect fix. lowercase entries should remain lowercase.",
      "revId": "100def990bafdfe36b52b07d57f394734e8eae18",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "cb8abb45_dc6040af",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1013536
      },
      "writtenOn": "2022-07-23T00:01:51Z",
      "side": 1,
      "message": "One alternative would be to rewrite the grammar to have separate terminals for start, mid, and end interpolation. The interpolation can then be a production. But I think this probably will end up being quite clunky: you would have to either not match string quote types or have these three variants for each string type, thus blowing up the number of productions.",
      "revId": "100def990bafdfe36b52b07d57f394734e8eae18",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "8413886a_664fa8a5",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1017723
      },
      "writtenOn": "2022-07-27T15:45:03Z",
      "side": 1,
      "message": "\u003e I think the only practical solution here is to fix the checker.\n\nThat sounds like the only approach, because this 5 min change from my perspective was really only to flag how our spec does not follow the checker\u0027s \"rules\".\n\nWe can follow up with the author of the checker: r@golang.org ðŸ˜Š",
      "revId": "100def990bafdfe36b52b07d57f394734e8eae18",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6fa3c84c_41294896",
        "filename": "doc/ref/spec.md",
        "patchSetId": 3
      },
      "lineNbr": 291,
      "author": {
        "id": 1013536
      },
      "writtenOn": "2022-07-22T23:43:26Z",
      "side": 1,
      "message": "remove space before \u003d",
      "range": {
        "startLine": 291,
        "startChar": 13,
        "endLine": 291,
        "endChar": 14
      },
      "revId": "100def990bafdfe36b52b07d57f394734e8eae18",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d5028d55_237604e4",
        "filename": "doc/ref/spec.md",
        "patchSetId": 3
      },
      "lineNbr": 445,
      "author": {
        "id": 1013536
      },
      "writtenOn": "2022-07-22T23:43:26Z",
      "side": 1,
      "message": "See comments below. This really should be lowercase.\n\nI understand an EBNF wouldn\u0027t support this, as Go doesn\u0027t have such cases. But I see no other way here. I looked at Swift and they do the same: it allows lexical entries to refer to productions.\n\nI think the only practical solution here is to fix the checker.",
      "revId": "100def990bafdfe36b52b07d57f394734e8eae18",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8991f8b2_5bfe64e9",
        "filename": "doc/ref/spec.md",
        "patchSetId": 3
      },
      "lineNbr": 453,
      "author": {
        "id": 1013536
      },
      "writtenOn": "2022-07-22T23:43:26Z",
      "side": 1,
      "message": "Hmmm, this is tricky. These really are terminals interspersed with productions. Using uppercase is certainly not correct. But I can see why it doesn\u0027t like the lowercase.\n\nStill, if I had to chose, I would leave this lowercase.\n\nI guess the real problem is Interpolation. That should be lowercase too.",
      "revId": "100def990bafdfe36b52b07d57f394734e8eae18",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1758e844_630845b2",
        "filename": "doc/ref/spec.md",
        "patchSetId": 3
      },
      "lineNbr": 458,
      "author": {
        "id": 1017720
      },
      "writtenOn": "2022-06-28T11:18:57Z",
      "side": 1,
      "message": "is there a reason we want foo_bar for some EBNF names but FooBar for others?",
      "revId": "100def990bafdfe36b52b07d57f394734e8eae18",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8ec2d916_7152cb2d",
        "filename": "doc/ref/spec.md",
        "patchSetId": 3
      },
      "lineNbr": 458,
      "author": {
        "id": 1017723
      },
      "writtenOn": "2022-06-28T15:32:35Z",
      "side": 1,
      "message": "This is actually a convention according to https://pkg.go.dev/golang.org/x/exp/ebnf:\n\n\"Production names starting with an uppercase Unicode letter denote non-terminal productions (i.e., productions which allow white-space and comments between tokens); all other production names denote lexical productions.\"\n\nWill need @mpvl to opine here on the fact there is a big of \"upper-casing\" going on in order to accommodate this rule.",
      "parentUuid": "1758e844_630845b2",
      "revId": "100def990bafdfe36b52b07d57f394734e8eae18",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2507f3f4_cf607876",
        "filename": "doc/ref/spec.md",
        "patchSetId": 3
      },
      "lineNbr": 458,
      "author": {
        "id": 1013536
      },
      "writtenOn": "2022-07-22T16:19:46Z",
      "side": 1,
      "message": "Yes, the distinction between terminals and productions is quite an important one: the interpretation of the grammar is different between them. So the distinction should definitely be kept.",
      "parentUuid": "8ec2d916_7152cb2d",
      "revId": "100def990bafdfe36b52b07d57f394734e8eae18",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    }
  ],
  "submitRequirementResults": [
    {
      "submitRequirement": {
        "name": "Code-Review",
        "description": {
          "value": "At least one Code-Review+2 is required. Self review is not allowed, except for Marcel."
        },
        "applicabilityExpression": {},
        "submittabilityExpression": {
          "expressionString": "label:Code-Review\u003dMAX,user\u003dnon_uploader OR label:Code-Review\u003dMAX,user\u003dmpvl@gmail.com"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {},
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"label:Code-Review=MAX,user=non_uploader OR label:Code-Review=MAX,user=mpvl@gmail.com"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["label:Code-Review=MAX,user=non_uploader"],"failingAtoms":["label:Code-Review=MAX,user=mpvl@gmail.com"]}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "100def990bafdfe36b52b07d57f394734e8eae18",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Do-Not-Review",
        "description": {
          "value": "Changes that have DO NOT REVIEW in their commit message are not submittable."
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "message:\"^.*(D|d)(O|o) (N|n)(O|o)(T|t) (R|r)(E|e)(V|v)(I|i)(E|e)(W|w).*\""
          }
        },
        "submittabilityExpression": {
          "expressionString": "is:false"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": false
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"message:\"^.*(D|d)(O|o) (N|n)(O|o)(T|t) (R|r)(E|e)(V|v)(I|i)(E|e)(W|w).*\""},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["message:\"^.*(D|d)(O|o) (N|n)(O|o)(T|t) (R|r)(E|e)(V|v)(I|i)(E|e)(W|w).*\""]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:false"},"status":"NOT_EVALUATED","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":[]}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "100def990bafdfe36b52b07d57f394734e8eae18",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Do-Not-Submit",
        "description": {
          "value": "Changes that have DO NOT SUBMIT in their commit message are not submittable."
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "message:\"^.*(D|d)(O|o) (N|n)(O|o)(T|t) (S|s)(U|u)(B|b)(M|m)(I|i)(T|t).*\""
          }
        },
        "submittabilityExpression": {
          "expressionString": "is:false"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": false
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"message:\"^.*(D|d)(O|o) (N|n)(O|o)(T|t) (S|s)(U|u)(B|b)(M|m)(I|i)(T|t).*\""},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["message:\"^.*(D|d)(O|o) (N|n)(O|o)(T|t) (S|s)(U|u)(B|b)(M|m)(I|i)(T|t).*\""]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:false"},"status":"NOT_EVALUATED","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":[]}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "100def990bafdfe36b52b07d57f394734e8eae18",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "No-Holds",
        "description": {
          "value": "Changes with a Hold+1 vote are not submittable."
        },
        "applicabilityExpression": {},
        "submittabilityExpression": {
          "expressionString": "NOT label:Hold\u003d1"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": false
      },
      "applicabilityExpressionResult": {},
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"NOT label:Hold=1"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":["label:Hold=1"],"failingAtoms":[]}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "100def990bafdfe36b52b07d57f394734e8eae18",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "TryBot-Result",
        "description": {
          "value": "TryBot-Result+1 is required. Unity-Result is not, as intentional breakages can happen. Can be bypassed by Chief Cueckoo with Code-Review+2."
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "-branch:refs/meta/config"
          }
        },
        "submittabilityExpression": {
          "expressionString": "label:TryBot-Result\u003dMAX OR label:Code-Review\u003dMAX,user\u003dchief.cueckoo@gmail.com"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"-branch:refs/meta/config"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["branch:refs/meta/config"]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"label:TryBot-Result=MAX OR label:Code-Review=MAX,user=chief.cueckoo@gmail.com"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["label:TryBot-Result=MAX","label:Code-Review=MAX,user=chief.cueckoo@gmail.com"]}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "100def990bafdfe36b52b07d57f394734e8eae18",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    }
  ]
}