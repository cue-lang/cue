{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "32053678_120171c5",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1017720
      },
      "writtenOn": "2023-07-05T21:10:31Z",
      "side": 1,
      "message": "I need to review the algorithm tomorrow, with a fresh mind :)",
      "revId": "1222de7fcac153b659dcdb3cb1d2bf72bfcf283d",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e667b610_81fd18e8",
        "filename": "internal/core/adt/composite.go",
        "patchSetId": 2
      },
      "lineNbr": 200,
      "author": {
        "id": 1017720
      },
      "writtenOn": "2023-07-05T21:10:31Z",
      "side": 1,
      "message": "nit: perhaps nonRooted? that\u0027s how I would write it, but I\u0027m not sure I can argue notRooted is incorrect.",
      "revId": "1222de7fcac153b659dcdb3cb1d2bf72bfcf283d",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "74076e6a_a7e58461",
        "filename": "internal/core/dep/dep.go",
        "patchSetId": 2
      },
      "lineNbr": 31,
      "author": {
        "id": 1017720
      },
      "writtenOn": "2023-07-05T21:10:31Z",
      "side": 1,
      "message": "is this empty line meaning anything in particular?",
      "revId": "1222de7fcac153b659dcdb3cb1d2bf72bfcf283d",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "25da37bc_6af3dd15",
        "filename": "internal/core/dep/dep.go",
        "patchSetId": 2
      },
      "lineNbr": 324,
      "author": {
        "id": 1017720
      },
      "writtenOn": "2023-07-05T21:10:31Z",
      "side": 1,
      "message": "composite",
      "range": {
        "startLine": 324,
        "startChar": 25,
        "endLine": 324,
        "endChar": 33
      },
      "revId": "1222de7fcac153b659dcdb3cb1d2bf72bfcf283d",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "12e0a5ad_7eae43c6",
        "filename": "internal/core/dep/dep.go",
        "patchSetId": 2
      },
      "lineNbr": 326,
      "author": {
        "id": 1017720
      },
      "writtenOn": "2023-07-05T21:10:31Z",
      "side": 1,
      "message": "either \"the algorithm passes correct\" or \"the algorithm pass corrects\"",
      "range": {
        "startLine": 325,
        "startChar": 57,
        "endLine": 326,
        "endChar": 11
      },
      "revId": "1222de7fcac153b659dcdb3cb1d2bf72bfcf283d",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "05cfa60b_7fead8f4",
        "filename": "internal/core/dep/dep.go",
        "patchSetId": 2
      },
      "lineNbr": 394,
      "author": {
        "id": 1017720
      },
      "writtenOn": "2023-07-07T08:54:03Z",
      "side": 1,
      "message": "I think this func could do with a few more comments about what is happening for each type case, in particular the resolver and default ones. For example, why do resolvers which are non-rooted and have an empty path do something special? I can\u0027t really figure it out by just reading the code.",
      "revId": "1222de7fcac153b659dcdb3cb1d2bf72bfcf283d",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "fbb5e0ef_ecc0ba06",
        "filename": "internal/core/dep/dep.go",
        "patchSetId": 2
      },
      "lineNbr": 396,
      "author": {
        "id": 1017720
      },
      "writtenOn": "2023-07-05T21:10:31Z",
      "side": 1,
      "message": "a",
      "range": {
        "startLine": 396,
        "startChar": 59,
        "endLine": 396,
        "endChar": 61
      },
      "revId": "1222de7fcac153b659dcdb3cb1d2bf72bfcf283d",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "05612bdb_9caecfd5",
        "filename": "internal/core/dep/dep.go",
        "patchSetId": 2
      },
      "lineNbr": 400,
      "author": {
        "id": 1017720
      },
      "writtenOn": "2023-07-07T08:54:03Z",
      "side": 1,
      "message": "nit: I would write all of these type switches as `switch expr :\u003d expr.(type)`. I borrowed this trick from gri, and it helps reduce the number of names in scope. It\u0027s not like the interface value is useful in any way, once you have the concrete type - even in the default case, the \"concrete\" type will be the interface.\n\nyou also gain consistency - note how in the first case you use `expr`, but in the second you use `y`. with the change, you\u0027d use `expr` in both.\n\nthis applies to the other type switches in this change, as well as some of the existing type switches. I\u0027d probably do it for the ones being changed here, and gradually change the others. As long as you agree, of course :)",
      "revId": "1222de7fcac153b659dcdb3cb1d2bf72bfcf283d",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    }
  ]
}