{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "9e9d3618_6829bc59",
        "filename": "cue/format/format_test.go",
        "patchSetId": 1
      },
      "lineNbr": 60,
      "author": {
        "id": 1038145
      },
      "writtenOn": "2024-07-22T07:53:23Z",
      "side": 1,
      "message": "Personally, I\u0027d definitely wrap this - maybe adding into cuetest a MustTxTarFS(testing.TB, *txtar.Archive) function.\nMight be worth doing the same wrapping for txtar.Parse, though that definitely gets into the realm of scope creep for this CL.",
      "revId": "2523c791615a1ddad41fbc1ba047beab0f5909b5",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c4b5656d_dca56aca",
        "filename": "cue/format/format_test.go",
        "patchSetId": 1
      },
      "lineNbr": 60,
      "author": {
        "id": 1017720
      },
      "writtenOn": "2024-07-22T08:01:12Z",
      "side": 1,
      "message": "I briefly thought about this, but personally for one added line I wouldn\u0027t bother. The diff is likely to mean more lines added in the end. If anything, this could be a generic \"must\" test helper func that works with any call returning `(T, error)`, as this verbosity has nothing to do with txtar per se. We have added a few such funcs in the past, but nothing widespread, as there\u0027s no such pattern in Go (yet), and quicktest has been OK for now.\n\nThere\u0027s another reason to keep the `qt.Assert` separate and explicit - one can add comments depending on the context of each test or func: https://pkg.go.dev/github.com/go-quicktest/qt#Commentf\n\nPerhaps @rogpeppe@gmail.com has thoughts.",
      "parentUuid": "9e9d3618_6829bc59",
      "revId": "2523c791615a1ddad41fbc1ba047beab0f5909b5",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e840029f_a7b78424",
        "filename": "cue/format/format_test.go",
        "patchSetId": 1
      },
      "lineNbr": 60,
      "author": {
        "id": 1038145
      },
      "writtenOn": "2024-07-22T08:26:39Z",
      "side": 1,
      "message": "Yeah I see your point - looking at the code surrounding the callsites, a Must would stand out unless you convert, well, everything. Sigh - Go needs an error monad.\n\nAside: I assumed the Commentf stuff was going to be normal code comments in the style of https://github.com/matryer/is, which is cute, but I think is actively harmful to abstraction/refactoring. Currently, across the whole of CUE, there are 8 uses of Commentf, and several hundred of Assert so that feature doesn\u0027t seem especially critical, but that\u0027s not by itself reason to make using it harder.",
      "parentUuid": "c4b5656d_dca56aca",
      "revId": "2523c791615a1ddad41fbc1ba047beab0f5909b5",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "5925be93_d7efca65",
        "filename": "cue/format/format_test.go",
        "patchSetId": 1
      },
      "lineNbr": 60,
      "author": {
        "id": 1017720
      },
      "writtenOn": "2024-07-22T08:37:39Z",
      "side": 1,
      "message": "Error handling needs some thinking in Go, yes - there have been some proposals in the past but they were all controversial. The current approach works, but it is a bit repetitive and verbose. I still think more proposals are coming from upstream. For the time being, we\u0027re going with qt, and we\u0027re trying to not steer too far from \"standard\" Go code.",
      "parentUuid": "e840029f_a7b78424",
      "revId": "2523c791615a1ddad41fbc1ba047beab0f5909b5",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a6a42d77_ef19586a",
        "filename": "cue/format/format_test.go",
        "patchSetId": 1
      },
      "lineNbr": 60,
      "author": {
        "id": 1007275
      },
      "writtenOn": "2024-07-22T09:47:10Z",
      "side": 1,
      "message": "FWIW I think that keeping the error check separate is more consistent with the way that all the rest of the code works, so I think it\u0027s reasonable as we\u0027ve got it here.",
      "parentUuid": "e840029f_a7b78424",
      "revId": "2523c791615a1ddad41fbc1ba047beab0f5909b5",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "090da55c_43143735",
        "filename": "cue/format/format_test.go",
        "patchSetId": 1
      },
      "lineNbr": 60,
      "author": {
        "id": 1017720
      },
      "writtenOn": "2024-07-22T09:53:03Z",
      "side": 1,
      "message": "marking as done again, as I think we\u0027re in agreement now.",
      "parentUuid": "a6a42d77_ef19586a",
      "revId": "2523c791615a1ddad41fbc1ba047beab0f5909b5",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    }
  ],
  "submitRequirementResults": [
    {
      "submitRequirement": {
        "name": "Code-Review",
        "description": {
          "value": "At least one Code-Review+2 is required. Self review is not allowed, except for Marcel."
        },
        "applicabilityExpression": {},
        "submittabilityExpression": {
          "expressionString": "label:Code-Review\u003dMAX,user\u003dnon_uploader OR label:Code-Review\u003dMAX,user\u003dmpvl@gmail.com"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {},
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"label:Code-Review=MAX,user=non_uploader OR label:Code-Review=MAX,user=mpvl@gmail.com"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["label:Code-Review=MAX,user=non_uploader"],"failingAtoms":["label:Code-Review=MAX,user=mpvl@gmail.com"]}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "2523c791615a1ddad41fbc1ba047beab0f5909b5",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Do-Not-Review",
        "description": {
          "value": "Changes that have DO NOT REVIEW in their commit message are not submittable."
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "message:\"^.*(D|d)(O|o) (N|n)(O|o)(T|t) (R|r)(E|e)(V|v)(I|i)(E|e)(W|w).*\""
          }
        },
        "submittabilityExpression": {
          "expressionString": "is:false"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": false
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"message:\"^.*(D|d)(O|o) (N|n)(O|o)(T|t) (R|r)(E|e)(V|v)(I|i)(E|e)(W|w).*\""},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["message:\"^.*(D|d)(O|o) (N|n)(O|o)(T|t) (R|r)(E|e)(V|v)(I|i)(E|e)(W|w).*\""]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:false"},"status":"NOT_EVALUATED","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":[]}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "2523c791615a1ddad41fbc1ba047beab0f5909b5",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Do-Not-Submit",
        "description": {
          "value": "Changes that have DO NOT SUBMIT in their commit message are not submittable."
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "message:\"^.*(D|d)(O|o) (N|n)(O|o)(T|t) (S|s)(U|u)(B|b)(M|m)(I|i)(T|t).*\""
          }
        },
        "submittabilityExpression": {
          "expressionString": "is:false"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": false
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"message:\"^.*(D|d)(O|o) (N|n)(O|o)(T|t) (S|s)(U|u)(B|b)(M|m)(I|i)(T|t).*\""},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["message:\"^.*(D|d)(O|o) (N|n)(O|o)(T|t) (S|s)(U|u)(B|b)(M|m)(I|i)(T|t).*\""]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:false"},"status":"NOT_EVALUATED","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":[]}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "2523c791615a1ddad41fbc1ba047beab0f5909b5",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "No-Holds",
        "description": {
          "value": "Changes with a Hold+1 vote are not submittable."
        },
        "applicabilityExpression": {},
        "submittabilityExpression": {
          "expressionString": "NOT label:Hold\u003d1"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": false
      },
      "applicabilityExpressionResult": {},
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"NOT label:Hold=1"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["label:Hold=1"]}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "2523c791615a1ddad41fbc1ba047beab0f5909b5",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "TryBot-Result",
        "description": {
          "value": "TryBot-Result+1 is required. Unity-Result is not, as intentional breakages can happen. Can be bypassed by Chief Cueckoo with Code-Review+2."
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "-branch:refs/meta/config"
          }
        },
        "submittabilityExpression": {
          "expressionString": "label:TryBot-Result\u003dMAX OR label:Code-Review\u003dMAX,user\u003dchief.cueckoo@gmail.com"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"-branch:refs/meta/config"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["branch:refs/meta/config"]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"label:TryBot-Result=MAX OR label:Code-Review=MAX,user=chief.cueckoo@gmail.com"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["label:TryBot-Result=MAX"],"failingAtoms":["label:Code-Review=MAX,user=chief.cueckoo@gmail.com"]}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "2523c791615a1ddad41fbc1ba047beab0f5909b5",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    }
  ]
}