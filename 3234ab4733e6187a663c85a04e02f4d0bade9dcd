{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "eaf38e48_a548bd9d",
        "filename": "/COMMIT_MSG",
        "patchSetId": 3
      },
      "lineNbr": 18,
      "author": {
        "id": 1017720
      },
      "writtenOn": "2024-07-12T16:13:54Z",
      "side": 1,
      "message": "nit: in Go, we refer to funcs like `Foo` rather than `Foo()` or `Foo(param)`, and likewise, we refer to methods like `Type.Foo`.\n\nthis is just like how godoc links work, so it\u0027s helpful to be consistent: https://tip.golang.org/doc/comment#doclinks",
      "revId": "3234ab4733e6187a663c85a04e02f4d0bade9dcd",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "c54fd757_4e5f8518",
        "filename": "/COMMIT_MSG",
        "patchSetId": 3
      },
      "lineNbr": 18,
      "author": {
        "id": 1038145
      },
      "writtenOn": "2024-07-15T10:28:27Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "eaf38e48_a548bd9d",
      "revId": "3234ab4733e6187a663c85a04e02f4d0bade9dcd",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "84a9c337_97493e8d",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1017720
      },
      "writtenOn": "2024-07-12T16:13:54Z",
      "side": 1,
      "message": "SGTM except the new public API without an explanation.\n\nfor some context on my error check comments, the docs on https://pkg.go.dev/cuelang.org/go/cue@master#Context.CompileString say:\n\n\u003e The returned Value will represent an error, accessible through Err, if any error occurred.",
      "revId": "3234ab4733e6187a663c85a04e02f4d0bade9dcd",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6448fe72_973530c4",
        "filename": "cue/cuecontext/cuecontext.go",
        "patchSetId": 3
      },
      "lineNbr": 108,
      "author": {
        "id": 1017720
      },
      "writtenOn": "2024-07-12T16:13:54Z",
      "side": 1,
      "message": "Careful: this is new public API. Did you intend to expose new API to users?",
      "revId": "3234ab4733e6187a663c85a04e02f4d0bade9dcd",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e00744b1_fce1fa2e",
        "filename": "cue/cuecontext/cuecontext.go",
        "patchSetId": 3
      },
      "lineNbr": 108,
      "author": {
        "id": 1038145
      },
      "writtenOn": "2024-07-12T16:41:32Z",
      "side": 1,
      "message": "Yeah I did spot this would be public. And yet also not usable because cuedebug is in internal. Though Context.CUE_DEBUG is also public, uses the same code...\nVery open to suggestions here - it\u0027s really about porting the runtime/Runtime.SetDebugOptions functionality to cue.Context - there doesn\u0027t seem to be a good way to do this with cuedebug being internal. And the call site is in cuetdtest/M.Context so it\u0027s not like I can leave it private and elevate it via the export_test trick. ISTM the real problem is something that\u0027s internal (runtime.Runtime) being aliased to something that\u0027s not internal (cue.Context).",
      "parentUuid": "6448fe72_973530c4",
      "revId": "3234ab4733e6187a663c85a04e02f4d0bade9dcd",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9e2fcd72_ad75e42a",
        "filename": "cue/cuecontext/cuecontext.go",
        "patchSetId": 3
      },
      "lineNbr": 108,
      "author": {
        "id": 1017720
      },
      "writtenOn": "2024-07-12T16:48:30Z",
      "side": 1,
      "message": "Agreed that it\u0027s an awkward situation. But the new exposed API not being usable by end users due to cuedebug.Config being internal isn\u0027t really making this solution any better - if anything, it\u0027s worse that users would see a new API via pkg.go.dev, but they would never be able to use it in practice.\n\nCUE_DEBUG as a Go API is public and that\u0027s OK because it effectively matches the string API that cmd/cue has via env vars. It\u0027s not perfect, but it\u0027s useful and it works. We might want a Go API that takes a struct as well, but we would need to expose the config struct in the API first - or do it as a follow-up patch so that the API is usable once shipped in a release.\n\nPerhaps this is one to talk to Marcel about?",
      "parentUuid": "e00744b1_fce1fa2e",
      "revId": "3234ab4733e6187a663c85a04e02f4d0bade9dcd",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "d2fe4232_0c6bba65",
        "filename": "cue/cuecontext/cuecontext.go",
        "patchSetId": 3
      },
      "lineNbr": 108,
      "author": {
        "id": 1038145
      },
      "writtenOn": "2024-07-12T16:57:45Z",
      "side": 1,
      "message": "Yes, I agree that what I have here is worse. For the moment I can address the call site and avoid needing this new API, pending further discussion.",
      "parentUuid": "9e2fcd72_ad75e42a",
      "revId": "3234ab4733e6187a663c85a04e02f4d0bade9dcd",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0ae11854_573882a1",
        "filename": "cue/types_test.go",
        "patchSetId": 3
      },
      "lineNbr": 45,
      "author": {
        "id": 1017720
      },
      "writtenOn": "2024-07-12T16:13:54Z",
      "side": 1,
      "message": "lacks an error check now.",
      "revId": "3234ab4733e6187a663c85a04e02f4d0bade9dcd",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7d0f31e6_aceba4ff",
        "filename": "cue/types_test.go",
        "patchSetId": 3
      },
      "lineNbr": 45,
      "author": {
        "id": 1038145
      },
      "writtenOn": "2024-07-12T16:30:59Z",
      "side": 1,
      "message": "Yes and no. From looking through the code, and also verifying against tests that expect an error, my understanding is that parse fail would come out in the resulting cue.Value (which would be _|_ I think and value.Err() would produce the error). I wouldn\u0027t be enormously surprised if I\u0027m wrong, but I don\u0027t think we lose anything by this change - yes, CUE code that can\u0027t be parsed will now get further, but the error itself isn\u0027t lost; any subsequent use of the value would surely fail in the error case?",
      "parentUuid": "0ae11854_573882a1",
      "revId": "3234ab4733e6187a663c85a04e02f4d0bade9dcd",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f38ea679_e6459775",
        "filename": "cue/types_test.go",
        "patchSetId": 3
      },
      "lineNbr": 45,
      "author": {
        "id": 1017720
      },
      "writtenOn": "2024-07-12T16:34:33Z",
      "side": 1,
      "message": "maybe I misunderstand, but the earlier code used r.Compile and checked the error, which should be equivalent to checking Value.Err, no?\n\nyou\u0027re right that in most cases letting the next operation fail is probably not terrible, but the old code checked for a compile error upfront, so IMHO we should keep doing the same - and it\u0027s best practice to do so anyway, so that errors are surfaced quickly and in a straightforward way.",
      "parentUuid": "7d0f31e6_aceba4ff",
      "revId": "3234ab4733e6187a663c85a04e02f4d0bade9dcd",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "3379dbf2_07a86662",
        "filename": "cue/types_test.go",
        "patchSetId": 3
      },
      "lineNbr": 45,
      "author": {
        "id": 1038145
      },
      "writtenOn": "2024-07-15T10:28:27Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "f38ea679_e6459775",
      "revId": "3234ab4733e6187a663c85a04e02f4d0bade9dcd",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "307ea73f_7f243c82",
        "filename": "cue/types_test.go",
        "patchSetId": 3
      },
      "lineNbr": 139,
      "author": {
        "id": 1017720
      },
      "writtenOn": "2024-07-12T16:13:54Z",
      "side": 1,
      "message": "error check",
      "revId": "3234ab4733e6187a663c85a04e02f4d0bade9dcd",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b742a1fa_7138b2e2",
        "filename": "cue/types_test.go",
        "patchSetId": 3
      },
      "lineNbr": 139,
      "author": {
        "id": 1038145
      },
      "writtenOn": "2024-07-15T10:28:27Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "307ea73f_7f243c82",
      "revId": "3234ab4733e6187a663c85a04e02f4d0bade9dcd",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "836b6cb0_4ebfb8e4",
        "filename": "cue/types_test.go",
        "patchSetId": 3
      },
      "lineNbr": 1063,
      "author": {
        "id": 1017720
      },
      "writtenOn": "2024-07-12T16:13:54Z",
      "side": 1,
      "message": "this also lacks an error check now.",
      "revId": "3234ab4733e6187a663c85a04e02f4d0bade9dcd",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "98c4607e_d6bda11d",
        "filename": "cue/types_test.go",
        "patchSetId": 3
      },
      "lineNbr": 1063,
      "author": {
        "id": 1038145
      },
      "writtenOn": "2024-07-15T10:30:16Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "836b6cb0_4ebfb8e4",
      "revId": "3234ab4733e6187a663c85a04e02f4d0bade9dcd",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c2e00b22_e881aa42",
        "filename": "cue/types_test.go",
        "patchSetId": 3
      },
      "lineNbr": 1131,
      "author": {
        "id": 1017720
      },
      "writtenOn": "2024-07-12T16:13:54Z",
      "side": 1,
      "message": "error check",
      "revId": "3234ab4733e6187a663c85a04e02f4d0bade9dcd",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "7520c831_7c6a1e45",
        "filename": "cue/types_test.go",
        "patchSetId": 3
      },
      "lineNbr": 1131,
      "author": {
        "id": 1038145
      },
      "writtenOn": "2024-07-15T10:28:27Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "c2e00b22_e881aa42",
      "revId": "3234ab4733e6187a663c85a04e02f4d0bade9dcd",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d819a777_09d50330",
        "filename": "cue/types_test.go",
        "patchSetId": 3
      },
      "lineNbr": 1161,
      "author": {
        "id": 1017720
      },
      "writtenOn": "2024-07-12T16:13:54Z",
      "side": 1,
      "message": "error check",
      "revId": "3234ab4733e6187a663c85a04e02f4d0bade9dcd",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "7785792d_62be2292",
        "filename": "cue/types_test.go",
        "patchSetId": 3
      },
      "lineNbr": 1161,
      "author": {
        "id": 1038145
      },
      "writtenOn": "2024-07-15T10:30:16Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "d819a777_09d50330",
      "revId": "3234ab4733e6187a663c85a04e02f4d0bade9dcd",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "058d2042_6fd81e86",
        "filename": "cue/types_test.go",
        "patchSetId": 3
      },
      "lineNbr": 1669,
      "author": {
        "id": 1017720
      },
      "writtenOn": "2024-07-12T16:13:54Z",
      "side": 1,
      "message": "error check",
      "revId": "3234ab4733e6187a663c85a04e02f4d0bade9dcd",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "262eab55_9490902b",
        "filename": "cue/types_test.go",
        "patchSetId": 3
      },
      "lineNbr": 1669,
      "author": {
        "id": 1038145
      },
      "writtenOn": "2024-07-15T10:28:27Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "058d2042_6fd81e86",
      "revId": "3234ab4733e6187a663c85a04e02f4d0bade9dcd",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ea6ca335_4b93761f",
        "filename": "cue/types_test.go",
        "patchSetId": 3
      },
      "lineNbr": 3511,
      "author": {
        "id": 1017720
      },
      "writtenOn": "2024-07-12T16:13:54Z",
      "side": 1,
      "message": "error check",
      "revId": "3234ab4733e6187a663c85a04e02f4d0bade9dcd",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7cdaf5ea_bbabc484",
        "filename": "cue/types_test.go",
        "patchSetId": 3
      },
      "lineNbr": 3511,
      "author": {
        "id": 1038145
      },
      "writtenOn": "2024-07-15T10:28:27Z",
      "side": 1,
      "message": "No, this one can\u0027t. The first test case here expects an error. It seems that ctx.CompileString is not _quite_ the same as runtime.Compile when it comes to errors. If I use mustCompile here then the test fails. This is what I was trying to get at (and failing to find this example) on Friday.",
      "parentUuid": "ea6ca335_4b93761f",
      "revId": "3234ab4733e6187a663c85a04e02f4d0bade9dcd",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9df2c1cc_4b8dad40",
        "filename": "cue/types_test.go",
        "patchSetId": 3
      },
      "lineNbr": 3511,
      "author": {
        "id": 1017720
      },
      "writtenOn": "2024-07-18T08:29:22Z",
      "side": 1,
      "message": "Ah OK, I wasn\u0027t aware the two error checks weren\u0027t identical. SGTM, maybe leave a comment in as to why we continue even if there is an error.",
      "parentUuid": "7cdaf5ea_bbabc484",
      "revId": "3234ab4733e6187a663c85a04e02f4d0bade9dcd",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "686cf465_925ff745",
        "filename": "cue/types_test.go",
        "patchSetId": 3
      },
      "lineNbr": 3511,
      "author": {
        "id": 1038145
      },
      "writtenOn": "2024-07-18T08:47:49Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "9df2c1cc_4b8dad40",
      "revId": "3234ab4733e6187a663c85a04e02f4d0bade9dcd",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8ad0c1af_20c591f4",
        "filename": "internal/diff/diff_test.go",
        "patchSetId": 3
      },
      "lineNbr": 410,
      "author": {
        "id": 1017720
      },
      "writtenOn": "2024-07-12T16:13:54Z",
      "side": 1,
      "message": "error checks",
      "revId": "3234ab4733e6187a663c85a04e02f4d0bade9dcd",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5d8575fe_2ff3b714",
        "filename": "internal/diff/diff_test.go",
        "patchSetId": 3
      },
      "lineNbr": 410,
      "author": {
        "id": 1038145
      },
      "writtenOn": "2024-07-15T10:28:27Z",
      "side": 1,
      "message": "yeah again this one can\u0027t be. The last test case, \"all errors are equal\", relies on getting errors. I think runtime.Compile returns a non-nil error iff there is a parsing issue, and you get eval errors if you go via .Value(). But CompileString mixes them all together, so a blanket err \u003d\u003e fatal won\u0027t work.",
      "parentUuid": "8ad0c1af_20c591f4",
      "revId": "3234ab4733e6187a663c85a04e02f4d0bade9dcd",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "82b470ed_3b167c24",
        "filename": "internal/diff/diff_test.go",
        "patchSetId": 3
      },
      "lineNbr": 410,
      "author": {
        "id": 1017720
      },
      "writtenOn": "2024-07-18T08:29:22Z",
      "side": 1,
      "message": "ack, I\u0027d just leave a brief comment",
      "parentUuid": "5d8575fe_2ff3b714",
      "revId": "3234ab4733e6187a663c85a04e02f4d0bade9dcd",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "5c305f82_1dd35200",
        "filename": "internal/diff/diff_test.go",
        "patchSetId": 3
      },
      "lineNbr": 410,
      "author": {
        "id": 1038145
      },
      "writtenOn": "2024-07-18T08:47:49Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "82b470ed_3b167c24",
      "revId": "3234ab4733e6187a663c85a04e02f4d0bade9dcd",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "846256d7_0406060a",
        "filename": "internal/diff/diff_test.go",
        "patchSetId": 3
      },
      "lineNbr": 453,
      "author": {
        "id": 1017720
      },
      "writtenOn": "2024-07-12T16:13:54Z",
      "side": 1,
      "message": "these need error checks too",
      "revId": "3234ab4733e6187a663c85a04e02f4d0bade9dcd",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "43821a46_dba1128b",
        "filename": "internal/diff/diff_test.go",
        "patchSetId": 3
      },
      "lineNbr": 453,
      "author": {
        "id": 1038145
      },
      "writtenOn": "2024-07-15T10:28:27Z",
      "side": 1,
      "message": "No - it should match the other diff test.",
      "parentUuid": "846256d7_0406060a",
      "revId": "3234ab4733e6187a663c85a04e02f4d0bade9dcd",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "988ee236_1fe2c3e2",
        "filename": "internal/diff/diff_test.go",
        "patchSetId": 3
      },
      "lineNbr": 453,
      "author": {
        "id": 1017720
      },
      "writtenOn": "2024-07-18T08:29:22Z",
      "side": 1,
      "message": "same, I\u0027d just leave a brief comment.",
      "parentUuid": "43821a46_dba1128b",
      "revId": "3234ab4733e6187a663c85a04e02f4d0bade9dcd",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "97068c91_4769fd97",
        "filename": "internal/diff/diff_test.go",
        "patchSetId": 3
      },
      "lineNbr": 453,
      "author": {
        "id": 1038145
      },
      "writtenOn": "2024-07-18T08:47:49Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "988ee236_1fe2c3e2",
      "revId": "3234ab4733e6187a663c85a04e02f4d0bade9dcd",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    }
  ]
}