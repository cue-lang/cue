{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "a0c76349_ff31a17a",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 1017720
      },
      "writtenOn": "2025-02-18T16:08:15Z",
      "side": 1,
      "message": "the following testscript passes on cue@master, and fails with cue@master plus this commit cherry picked, reproducing the Unity failure.\n\n\n```\nenv CUE_EXPERIMENT\u003devalv3\n\nexec cue vet -c -d \u0027#Schema\u0027 actualSchema.cue data.json\n\n-- data.json --\n{\n\t\"trailingComma\": \"all\",\n\t\"tabWidth\": 4,\n\t\"semi\": false,\n\t\"singleQuote\": true,\n\t\"overrides\": [\n\t\t{\n\t\t\t\"files\": \"*.test.js\",\n\t\t\t\"options\": {\n\t\t\t\t\"semi\": true\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"files\": [\n\t\t\t\t\"*.html\",\n\t\t\t\t\"legacy/**/*.js\"\n\t\t\t],\n\t\t\t\"options\": {\n\t\t\t\t\"tabWidth\": 4\n\t\t\t}\n\t\t}\n\t]\n}\n-- actualSchema.cue --\npackage prettier\n\n#Schema: {\n\t@jsonschema(schema\u003d\"http://json-schema.org/draft-07/schema#\")\n\t@jsonschema(id\u003d\"https://json.schemastore.org/prettierrc.json\")\n\tmatchN(1, [matchN(2, [#optionsDefinition \u0026 {\n\t\t...\n\t}, #overridesDefinition \u0026 {\n\t\t...\n\t}]), string])\n\n\t#optionsDefinition: {\n\t\t// Include parentheses around a sole arrow function parameter.\n\t\t\"arrowParens\"?: matchN(1, [\"always\", \"avoid\"])\n\n\t\t// Put \u003e of opening tags on the last line instead of on a new\n\t\t// line.\n\t\t\"bracketSameLine\"?: bool\n\n\t\t// Print spaces between brackets.\n\t\t\"bracketSpacing\"?: bool\n\n\t\t// Print (to stderr) where a cursor at the given position would\n\t\t// move to after formatting.\n\t\t\"cursorOffset\"?: int\n\n\t\t// Control how Prettier formats quoted code embedded in the file.\n\t\t\"embeddedLanguageFormatting\"?: matchN(1, [\"auto\", \"off\"])\n\n\t\t// Which end of line characters to apply.\n\t\t\"endOfLine\"?: matchN(1, [\"lf\", \"crlf\", \"cr\", \"auto\"])\n\n\t\t// Use curious ternaries, with the question mark after the\n\t\t// condition.\n\t\t\"experimentalTernaries\"?: bool\n\n\t\t// Specify the input filepath. This will be used to do parser\n\t\t// inference.\n\t\t\"filepath\"?: string\n\n\t\t// How to handle whitespaces in HTML.\n\t\t\"htmlWhitespaceSensitivity\"?: matchN(1, [\"css\", \"strict\", \"ignore\"])\n\n\t\t// Insert @format pragma into file\u0027s first docblock comment.\n\t\t\"insertPragma\"?: bool\n\n\t\t// Use single quotes in JSX.\n\t\t\"jsxSingleQuote\"?: bool\n\n\t\t// Which parser to use.\n\t\t\"parser\"?: matchN(\u003e\u003d1, [\"flow\", \"babel\", \"babel-flow\", \"babel-ts\", \"typescript\", \"acorn\", \"espree\", \"meriyah\", \"css\", \"less\", \"scss\", \"json\", \"json5\", \"jsonc\", \"json-stringify\", \"graphql\", \"markdown\", \"mdx\", \"vue\", \"yaml\", \"glimmer\", \"html\", \"angular\", \"lwc\", string])\n\n\t\t// Add a plugin. Multiple plugins can be passed as separate\n\t\t// `--plugin`s.\n\t\t\"plugins\"?: [...string]\n\n\t\t// The line length where Prettier will try wrap.\n\t\t\"printWidth\"?: int\n\n\t\t// How to wrap prose.\n\t\t\"proseWrap\"?: matchN(1, [\"always\", \"never\", \"preserve\"])\n\n\t\t// Change when properties in objects are quoted.\n\t\t\"quoteProps\"?: matchN(1, [\"as-needed\", \"consistent\", \"preserve\"])\n\n\t\t// Format code ending at a given character offset (exclusive).\n\t\t// The range will extend forwards to the end of the selected\n\t\t// statement.\n\t\t\"rangeEnd\"?: int\n\n\t\t// Format code starting at a given character offset.\n\t\t// The range will extend backwards to the start of the first line\n\t\t// containing the selected statement.\n\t\t\"rangeStart\"?: int\n\n\t\t// Require either \u0027@prettier\u0027 or \u0027@format\u0027 to be present in the\n\t\t// file\u0027s first docblock comment\n\t\t// in order for it to be formatted.\n\t\t\"requirePragma\"?: bool\n\n\t\t// Print semicolons.\n\t\t\"semi\"?: bool\n\n\t\t// Enforce single attribute per line in HTML, Vue and JSX.\n\t\t\"singleAttributePerLine\"?: bool\n\n\t\t// Use single quotes instead of double quotes.\n\t\t\"singleQuote\"?: bool\n\n\t\t// Number of spaces per indentation level.\n\t\t\"tabWidth\"?: int\n\n\t\t// Print trailing commas wherever possible when multi-line.\n\t\t\"trailingComma\"?: matchN(1, [\"all\", \"es5\", \"none\"])\n\n\t\t// Indent with tabs instead of spaces.\n\t\t\"useTabs\"?: bool\n\n\t\t// Indent script and style tags in Vue files.\n\t\t\"vueIndentScriptAndStyle\"?: bool\n\t\t...\n\t}\n\n\t#overridesDefinition: {\n\t\t// Provide a list of patterns to override prettier configuration.\n\t\t\"overrides\"?: [...close({\n\t\t\t// Include these files in this override.\n\t\t\t\"files\"!: matchN(1, [string, [...string]])\n\n\t\t\t// Exclude these files from this override.\n\t\t\t\"excludeFiles\"?: matchN(1, [string, [...string]])\n\t\t\t\"options\"?: #optionsDefinition\n\t\t})]\n\t\t...\n\t}\n}\n```",
      "revId": "431e42656b6fcd2ed2f188d6f9049e9c7b3c4d2d",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    }
  ]
}