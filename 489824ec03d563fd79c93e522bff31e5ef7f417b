{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "0e662d94_5ce6c972",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1038145
      },
      "writtenOn": "2025-09-29T08:24:19Z",
      "side": 1,
      "message": "I think I\u0027d request someone with more experience than me gives the casting vote of this - personally I think adding `Count` is a bit of a red flag.",
      "revId": "489824ec03d563fd79c93e522bff31e5ef7f417b",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "379e038b_fbc33a13",
        "filename": "internal/core/compile/builtin.go",
        "patchSetId": 1
      },
      "lineNbr": 197,
      "author": {
        "id": 1038145
      },
      "writtenOn": "2025-09-29T08:24:19Z",
      "side": 1,
      "message": "As you\u0027re making general improvements here, using `make` with `len(list)` would likely be wise here too? Oh, also shouldn\u0027t `list` be renamed (`iter`?) given it\u0027s no longer a list. Took me a couple moments to figure out why ranges had changed from `_, c :\u003d`  to `c :\u003d` ... ah yes, it\u0027s not a list any more.",
      "revId": "489824ec03d563fd79c93e522bff31e5ef7f417b",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "869d2d31_109e26f6",
        "filename": "internal/core/compile/builtin.go",
        "patchSetId": 1
      },
      "lineNbr": 197,
      "author": {
        "id": 1017720
      },
      "writtenOn": "2025-09-29T08:41:08Z",
      "side": 1,
      "message": "re naming - you\u0027re right, done.\n\nre make with len - we can\u0027t do that with an iterator, because the iterator doesn\u0027t work out how many elements there are upfront. the previous logic did have a length upfront, but only because it did the expensive construction of a list first, which defeats the purpose of trying to avoid work.",
      "parentUuid": "379e038b_fbc33a13",
      "revId": "489824ec03d563fd79c93e522bff31e5ef7f417b",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "60b82bcf_0bb5bbd7",
        "filename": "internal/core/compile/builtin.go",
        "patchSetId": 1
      },
      "lineNbr": 197,
      "author": {
        "id": 1038145
      },
      "writtenOn": "2025-09-29T09:02:19Z",
      "side": 1,
      "message": "Yeah, really interesting tradeoff - sure, you save the alloc and construction cost of the Elems list, but you now have potentially more allocs going on in the append (though I know it\u0027s a x1.4 len or something).",
      "parentUuid": "869d2d31_109e26f6",
      "revId": "489824ec03d563fd79c93e522bff31e5ef7f417b",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "7af5bb99_78bcb8fc",
        "filename": "internal/core/compile/builtin.go",
        "patchSetId": 1
      },
      "lineNbr": 197,
      "author": {
        "id": 1017720
      },
      "writtenOn": "2025-09-29T09:48:03Z",
      "side": 1,
      "message": "ah yes. as we grow the list, we could alloc a bit more. but the runtime is pretty efficient with appends, so I wouldn\u0027t worry too much about it. we can always hope that the Elems iterator func gets inlined, at which point the compiler can realise when a slices.Collect could pre-allocate the right length for the new slice.",
      "parentUuid": "60b82bcf_0bb5bbd7",
      "revId": "489824ec03d563fd79c93e522bff31e5ef7f417b",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f1175d99_d69172f4",
        "filename": "internal/iterutil/iter.go",
        "patchSetId": 1
      },
      "lineNbr": 19,
      "author": {
        "id": 1038145
      },
      "writtenOn": "2025-09-29T08:24:19Z",
      "side": 1,
      "message": "I have to say I find this a bit alarming. `len` is O(1). Personally, I\u0027m not convinced the switch to iters is worth it given using `Count` is O(n), and especially seeing as we tend to be careful about memory allocations, so having to use `Count` in combination with `make` is a step backwards I think vs `len`.",
      "revId": "489824ec03d563fd79c93e522bff31e5ef7f417b",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "176e2045_8566d047",
        "filename": "internal/iterutil/iter.go",
        "patchSetId": 1
      },
      "lineNbr": 19,
      "author": {
        "id": 1017720
      },
      "writtenOn": "2025-09-29T08:41:08Z",
      "side": 1,
      "message": "You have to bear in mind that the previous `len` was used on the newly created Elems slice. So \"iterate to create a new slice and then use `len` on it\" is strictly more expensive than \"iterate to count the length\".\n\nFor use cases where we need both the length and the elements themselves, yes, I stick to the slice via `slices.Collect`. But if we only need the length, then Count is best.",
      "parentUuid": "f1175d99_d69172f4",
      "revId": "489824ec03d563fd79c93e522bff31e5ef7f417b",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "9c27f939_170971fd",
        "filename": "internal/iterutil/iter.go",
        "patchSetId": 1
      },
      "lineNbr": 19,
      "author": {
        "id": 1038145
      },
      "writtenOn": "2025-09-29T09:02:19Z",
      "side": 1,
      "message": "Yep, that penny did drop for me.",
      "parentUuid": "176e2045_8566d047",
      "revId": "489824ec03d563fd79c93e522bff31e5ef7f417b",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    }
  ]
}