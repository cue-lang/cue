{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "d33f61a6_053f1e6b",
        "filename": "/COMMIT_MSG",
        "patchSetId": 11
      },
      "lineNbr": 26,
      "author": {
        "id": 1013536
      },
      "writtenOn": "2024-05-13T12:34:48Z",
      "side": 1,
      "message": "Note that we can make a distinction between concrete, \"final\" (fully evaluated, with no references remaining), self sufficient (no references outside a node), and defaults resolved.",
      "revId": "5af21bbf6fdf7df8746c922a0d0fe15afe17fa60",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "84abacc4_8ac41d0f",
        "filename": "/COMMIT_MSG",
        "patchSetId": 11
      },
      "lineNbr": 26,
      "author": {
        "id": 1037843
      },
      "writtenOn": "2024-05-13T13:47:12Z",
      "side": 1,
      "message": "I tried to be more accurate + simplify the commit message, please let me know if there\u0027s still something important I\u0027m missing",
      "parentUuid": "d33f61a6_053f1e6b",
      "revId": "5af21bbf6fdf7df8746c922a0d0fe15afe17fa60",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c19687df_274cc7e9",
        "filename": "internal/core/adt/expr.go",
        "patchSetId": 11
      },
      "lineNbr": 1529,
      "author": {
        "id": 1013536
      },
      "writtenOn": "2024-05-13T12:34:48Z",
      "side": 1,
      "message": "So if I am getting this right,the point here is to take the default value if it exists, and otherwise leave the disjunction as is.\n\nThis means we would not want to support:\n```\na: *int | string\nyaml.Validate(\"\u0027foo\u0027\", a)\n```\nThis seems somewhat unexpected. Especially so because any nested default values will _not_ be picked by this approach.\n\nIs there any reason why the default is not handled in the `CallCtx.Value` method?",
      "revId": "5af21bbf6fdf7df8746c922a0d0fe15afe17fa60",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "1706404e_263cb4c5",
        "filename": "internal/core/adt/expr.go",
        "patchSetId": 11
      },
      "lineNbr": 1529,
      "author": {
        "id": 1037843
      },
      "writtenOn": "2024-05-13T13:47:12Z",
      "side": 1,
      "message": "That\u0027s a great point, I didn\u0027t think of that. I removed the default resolution and default value logic to `CallCtx.Value`.\n\nI\u0027ll just point out that there was a TODO there saying not to do this, I\u0027m not sure why:\n```\n\t// TODO: remove default\n\t// v, _ \u003d v.Default()\n```",
      "parentUuid": "c19687df_274cc7e9",
      "revId": "5af21bbf6fdf7df8746c922a0d0fe15afe17fa60",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "cf1e2ddc_3ddae126",
        "filename": "internal/pkg/context.go",
        "patchSetId": 11
      },
      "lineNbr": 54,
      "author": {
        "id": 1013536
      },
      "writtenOn": "2024-05-13T12:34:48Z",
      "side": 1,
      "message": "It would be good to see if `net.ToIP4(1 | 2)` holds up to this approach. Maybe add a test in that directory. I think it will.",
      "revId": "5af21bbf6fdf7df8746c922a0d0fe15afe17fa60",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "cf16b657_4fb9cc6d",
        "filename": "internal/pkg/context.go",
        "patchSetId": 11
      },
      "lineNbr": 54,
      "author": {
        "id": 1037843
      },
      "writtenOn": "2024-05-13T13:47:12Z",
      "side": 1,
      "message": "I\u0027m not 100% sure I follow, can you please elaborate? (since `CallCtxt.Schema` is only in use in `encoding/yaml` and `encoding/json`)",
      "parentUuid": "cf1e2ddc_3ddae126",
      "revId": "5af21bbf6fdf7df8746c922a0d0fe15afe17fa60",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "12de63da_1f971929",
        "filename": "internal/pkg/context.go",
        "patchSetId": 11
      },
      "lineNbr": 54,
      "author": {
        "id": 1013536
      },
      "writtenOn": "2024-05-13T14:45:56Z",
      "side": 1,
      "message": "Even though the code of many builtins has not changed, the code path leading up to their call has. Some of them rely on the caller to already have checked that the value is concrete. Value should now catch that, but it is not entirely clear in all cases that the error messages are still okay. Some of the builtins in the net package are a good candidate of that.\n\nI think all is fine, but some of these are poorly tested for error messages, so just to make sure.",
      "parentUuid": "cf16b657_4fb9cc6d",
      "revId": "5af21bbf6fdf7df8746c922a0d0fe15afe17fa60",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "bd7e389b_19d22aea",
        "filename": "pkg/encoding/yaml/testdata/validate.txtar",
        "patchSetId": 11
      },
      "lineNbr": 8,
      "author": {
        "id": 1017720
      },
      "writtenOn": "2024-05-13T14:03:47Z",
      "side": 1,
      "message": "Marcel suggested something earlier on a call - there are two ways to close a value, the `close` builtin and definitions getting automatically closed when referenced. The two methods work fairly differently internally, so we should have test cases for both, to check that they both eventually work the same for builtin calls.",
      "revId": "5af21bbf6fdf7df8746c922a0d0fe15afe17fa60",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    }
  ]
}