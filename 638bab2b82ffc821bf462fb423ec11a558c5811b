{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "007c4c2c_0ce4c69c",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1017720
      },
      "writtenOn": "2024-05-03T10:40:24Z",
      "side": 1,
      "message": "SGTM, just some thoughts about the names and API.",
      "revId": "638bab2b82ffc821bf462fb423ec11a558c5811b",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f0853e45_f225a03a",
        "filename": "cue/cuecontext/cuecontext.go",
        "patchSetId": 2
      },
      "lineNbr": 57,
      "author": {
        "id": 1017720
      },
      "writtenOn": "2024-05-03T10:40:24Z",
      "side": 1,
      "message": "perhaps document that this is the default. Or perhaps even rename it Default?",
      "revId": "638bab2b82ffc821bf462fb423ec11a558c5811b",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "fb862da4_64ce8c8f",
        "filename": "cue/cuecontext/cuecontext.go",
        "patchSetId": 2
      },
      "lineNbr": 57,
      "author": {
        "id": 1013536
      },
      "writtenOn": "2024-05-07T09:22:45Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "f0853e45_f225a03a",
      "revId": "638bab2b82ffc821bf462fb423ec11a558c5811b",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9d1d89cd_676e788c",
        "filename": "cue/cuecontext/cuecontext.go",
        "patchSetId": 2
      },
      "lineNbr": 66,
      "author": {
        "id": 1017720
      },
      "writtenOn": "2024-05-03T10:40:24Z",
      "side": 1,
      "message": "how about briefly summarizing these versions in terms of time and features? over time we will forget what V2 meant, so having some frame of reference will help.\n\nfor example, making up some of the details as I don\u0027t know them by heart:\n\n\u003e V2 is the latest stable version of the evaluator.\n\u003e It was introduced in 2022(?) and is being maintained until 2024.\n\u003e\n\u003e V3 is the current experimental version of the evaluator.\n\u003e It was introduced in 2024 and brought a new disjunction algorithm\n\u003e as well as many performance improvements like structure sharing.",
      "revId": "638bab2b82ffc821bf462fb423ec11a558c5811b",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "02598b92_11eedcab",
        "filename": "cue/cuecontext/cuecontext.go",
        "patchSetId": 2
      },
      "lineNbr": 66,
      "author": {
        "id": 1013536
      },
      "writtenOn": "2024-05-07T09:22:45Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "9d1d89cd_676e788c",
      "revId": "638bab2b82ffc821bf462fb423ec11a558c5811b",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d99eda40_21f85d86",
        "filename": "cue/cuecontext/cuecontext.go",
        "patchSetId": 2
      },
      "lineNbr": 68,
      "author": {
        "id": 1017720
      },
      "writtenOn": "2024-05-03T10:40:24Z",
      "side": 1,
      "message": "did you consider prefixing these with Evaluator, e.g. EvaluatorV2, EvaluatorV3? This would be more consistent with e.g. CUE_EXPERIMENT\u003devalv3, and `cuecontext.EvaluatorV3` is more explicit and intuitive than `cuecontext.V3`.\n\nor if you prefer shorter prefixes, just Eval, like EvalV3.",
      "revId": "638bab2b82ffc821bf462fb423ec11a558c5811b",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "acfaab20_31b0fec4",
        "filename": "cue/cuecontext/cuecontext.go",
        "patchSetId": 2
      },
      "lineNbr": 68,
      "author": {
        "id": 1013536
      },
      "writtenOn": "2024-05-07T09:22:45Z",
      "side": 1,
      "message": "Done as discussed.",
      "parentUuid": "d99eda40_21f85d86",
      "revId": "638bab2b82ffc821bf462fb423ec11a558c5811b",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0054ba13_9bc14409",
        "filename": "cue/cuecontext/cuecontext.go",
        "patchSetId": 2
      },
      "lineNbr": 80,
      "author": {
        "id": 1017720
      },
      "writtenOn": "2024-05-03T10:40:24Z",
      "side": 1,
      "message": "thinking about naming for a second - I like that CUE_DEBUG is called exactly like the env var, but `cuecontext.CUE_DEBUG` is an odd name. it repeats \"cue\", and PASCAL_CASE in Go APIs is extremely rare.\n\nhow about `cuecontext.DebugFlags`, and leave the mention of CUE_DEBUG as part of the godoc?\n\nI use the name \"flags\" above rather than \"options\" on purpose - the way CUE_DEBUG is parsed is very close to how Go flags work, and we call the strings \"debug flags\" elsewhere too, e.g. the package envflag.",
      "revId": "638bab2b82ffc821bf462fb423ec11a558c5811b",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "df7c46f8_bed3b10a",
        "filename": "cue/cuecontext/cuecontext.go",
        "patchSetId": 2
      },
      "lineNbr": 80,
      "author": {
        "id": 1013536
      },
      "writtenOn": "2024-05-07T09:22:45Z",
      "side": 1,
      "message": "Acknowledged",
      "parentUuid": "0054ba13_9bc14409",
      "revId": "638bab2b82ffc821bf462fb423ec11a558c5811b",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "836ed91c_9b4e8400",
        "filename": "internal/envflag/flag.go",
        "patchSetId": 2
      },
      "lineNbr": 28,
      "author": {
        "id": 1017720
      },
      "writtenOn": "2024-05-03T10:40:24Z",
      "side": 1,
      "message": "I think the godoc from Init should be moved to Parse, replacing \"environment variable\" with \"string\", and then Init can just be:\n\n\u003e Init uses Parse with the contents of the given environment variable as input.",
      "revId": "638bab2b82ffc821bf462fb423ec11a558c5811b",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "5975467c_e9e29314",
        "filename": "internal/envflag/flag.go",
        "patchSetId": 2
      },
      "lineNbr": 28,
      "author": {
        "id": 1013536
      },
      "writtenOn": "2024-05-07T10:20:04Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "836ed91c_9b4e8400",
      "revId": "638bab2b82ffc821bf462fb423ec11a558c5811b",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a15764e4_6a4a4eef",
        "filename": "internal/envflag/flag.go",
        "patchSetId": 2
      },
      "lineNbr": 29,
      "author": {
        "id": 1017720
      },
      "writtenOn": "2024-05-03T10:40:24Z",
      "side": 1,
      "message": "it doesn\u0027t make sense for Parse to take envVar anymore; it\u0027s still used in an error message, but you could instead have Init wrap the error with envVar, like:\n\n    cannot parse CUE_DEBUG: unknown flag foobar\n\nrather than the current\n\n    unknown CUE_DEBUG foobar\n    \nthe cuecontext API can then also add its own wrapping, like:\n\n    cuecontext.DebugFlags: unknown flag foobar",
      "range": {
        "startLine": 29,
        "startChar": 28,
        "endLine": 29,
        "endChar": 34
      },
      "revId": "638bab2b82ffc821bf462fb423ec11a558c5811b",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5e1bda80_509b86a1",
        "filename": "internal/envflag/flag.go",
        "patchSetId": 2
      },
      "lineNbr": 29,
      "author": {
        "id": 1013536
      },
      "writtenOn": "2024-05-07T10:20:04Z",
      "side": 1,
      "message": "Note that cuecontext.New() does not create an error. Right now the error is ignored. We could choose to either panic or ignore the errors.\n\nFor now, I\u0027ve changed the code to ignore missing features for now. Some alternatives:\n- make it panic unconditionally\n- add an argument to indicate whether to be strict or not\n- in the future add another option with a struct that has this failure behavior: this has the additional benefit that errors will be caught at compile time, not runtime.",
      "parentUuid": "a15764e4_6a4a4eef",
      "range": {
        "startLine": 29,
        "startChar": 28,
        "endLine": 29,
        "endChar": 34
      },
      "revId": "638bab2b82ffc821bf462fb423ec11a558c5811b",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d92f0143_ed619c0a",
        "filename": "internal/envflag/flag.go",
        "patchSetId": 2
      },
      "lineNbr": 29,
      "author": {
        "id": 1017720
      },
      "writtenOn": "2024-05-07T10:35:42Z",
      "side": 1,
      "message": "Personally I would lean towards panicking on any error, to be safe. Few users should be setting CUE_DEBUG flags as part of the Go API, and those who do are likely to use static ones. It would be better to fail loudly when there\u0027s any mistake rather than silently continue.\n\n\u003e For now, I\u0027ve changed the code to ignore missing features for now.\n\nNot sure if you realise, but I think you did the opposite - you panic _only_ on missing feature errors, but ignore any other errors.\n\nbut in any case, I\u0027d personally panic on any error, and then there\u0027s no need for any new error API either.",
      "parentUuid": "5e1bda80_509b86a1",
      "range": {
        "startLine": 29,
        "startChar": 28,
        "endLine": 29,
        "endChar": 34
      },
      "revId": "638bab2b82ffc821bf462fb423ec11a558c5811b",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2ffeab1a_f19e9202",
        "filename": "internal/envflag/flag.go",
        "patchSetId": 2
      },
      "lineNbr": 29,
      "author": {
        "id": 1017720
      },
      "writtenOn": "2024-05-07T10:37:00Z",
      "side": 1,
      "message": "To be clear, I\u0027m fine with leaving TODOs to do something better in the future, e.g. have cuecontext.New return an error, or have it remember its error so that the first error-returning call like Context.BuildExpr would simply return that constructor error as bottom.",
      "parentUuid": "d92f0143_ed619c0a",
      "range": {
        "startLine": 29,
        "startChar": 28,
        "endLine": 29,
        "endChar": 34
      },
      "revId": "638bab2b82ffc821bf462fb423ec11a558c5811b",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "d8353c6d_b0506c13",
        "filename": "internal/envflag/flag.go",
        "patchSetId": 2
      },
      "lineNbr": 29,
      "author": {
        "id": 1013536
      },
      "writtenOn": "2024-05-07T11:09:00Z",
      "side": 1,
      "message": "\u003e Not sure if you realise, but I think you did the opposite - you panic only on missing feature errors, but ignore any other errors.\n\nI verified it in a test, this does what I intended: panic on invalid, but pass for unknown.\n\nEither way, I\u0027ve changed it to always panic.",
      "parentUuid": "2ffeab1a_f19e9202",
      "range": {
        "startLine": 29,
        "startChar": 28,
        "endLine": 29,
        "endChar": 34
      },
      "revId": "638bab2b82ffc821bf462fb423ec11a558c5811b",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    }
  ]
}