{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "7c321b96_a8e8d5f1",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1007275
      },
      "writtenOn": "2024-01-31T17:06:00Z",
      "side": 1,
      "message": "LGTM with a couple of minor suggestions, thanks.",
      "revId": "855f5b153714dcb82443071d9d7b2870699646e4",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f4d81dac_88de737d",
        "filename": "cmd/cue/cmd/login.go",
        "patchSetId": 2
      },
      "lineNbr": 91,
      "author": {
        "id": 1007275
      },
      "writtenOn": "2024-01-31T17:06:00Z",
      "side": 1,
      "message": "It\u0027s possibly not clear to the user that the token in question is the one passed in the --token flag. How about \"badly formed token provided to --token: %v\" ?",
      "revId": "855f5b153714dcb82443071d9d7b2870699646e4",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "45ad5cb0_c8593304",
        "filename": "cmd/cue/cmd/login.go",
        "patchSetId": 2
      },
      "lineNbr": 91,
      "author": {
        "id": 1017720
      },
      "writtenOn": "2024-01-31T21:44:57Z",
      "side": 1,
      "message": "Done a slight variation of yours.",
      "parentUuid": "f4d81dac_88de737d",
      "revId": "855f5b153714dcb82443071d9d7b2870699646e4",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f0e5e3a4_3e6f6807",
        "filename": "cmd/cue/cmd/login.go",
        "patchSetId": 2
      },
      "lineNbr": 131,
      "author": {
        "id": 1007275
      },
      "writtenOn": "2024-01-31T17:06:00Z",
      "side": 1,
      "message": "```suggestion\n\t\t\"login auth token in JSON format (see https://xxx for details of the format)\")\n```\nOr document the format fully in the help text.",
      "revId": "855f5b153714dcb82443071d9d7b2870699646e4",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "63537fa3_5adca79e",
        "filename": "cmd/cue/cmd/login.go",
        "patchSetId": 2
      },
      "lineNbr": 131,
      "author": {
        "id": 1017720
      },
      "writtenOn": "2024-01-31T21:44:57Z",
      "side": 1,
      "message": "This is basically https://pkg.go.dev/golang.org/x/oauth2#Token. It\u0027s not from an RFC as far as I can tell; the OAuth RFC only defines the types used in endpoint responses, like https://datatracker.ietf.org/doc/html/rfc6749#section-4.2.2, but we cannot use that because the expiry is a relative duration (in seconds) so it\u0027s useless at rest.\n\nThe main purpose for this flag would be that, once a user can generate a token on the web UI, they can copy-paste it into this flag argument to use it. We could also consider something like `cue login --print` to print the token to stdout rather than storing it in logins.json, for example.\n\nPersonally I don\u0027t think we need to document the format. I document it\u0027s OAuth2 and JSON because it\u0027s helpful to understand what it\u0027s meant for, but the user shouldn\u0027t be constructing or using the JSON themselves, so it\u0027s as good as a base64 opaque string to them. I only avoided base64 encoding because we\u0027d end up with even longer tokens, and debugging would get harder :)",
      "parentUuid": "f0e5e3a4_3e6f6807",
      "revId": "855f5b153714dcb82443071d9d7b2870699646e4",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "63173253_296cb8ba",
        "filename": "cmd/cue/cmd/login.go",
        "patchSetId": 2
      },
      "lineNbr": 131,
      "author": {
        "id": 1017720
      },
      "writtenOn": "2024-01-31T21:47:47Z",
      "side": 1,
      "message": "That said, once we have a web page to generate these tokens, like https://registry.cue.works/settings/tokens, we can link it from here as one example where one can obtain such a token. For now I\u0027m doint it by extracting the token from logins.json.",
      "parentUuid": "63537fa3_5adca79e",
      "revId": "855f5b153714dcb82443071d9d7b2870699646e4",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d7393a27_d2e8cc08",
        "filename": "cmd/cue/cmd/login.go",
        "patchSetId": 2
      },
      "lineNbr": 131,
      "author": {
        "id": 1007275
      },
      "writtenOn": "2024-02-02T12:26:14Z",
      "side": 1,
      "message": "The issue I have is that it says that it needs a JSON token but doesn\u0027t say anything about what format that token might be, so the flag is basically unusable for users in practice unless they read the Go code. I guess that\u0027s OK because it\u0027s just for our tests, but maybe we should hide the flag or something?\n\nAnother way of documenting it might be \"as stored in the logins.json file\".\n\nIn fact, I\u0027m not entirely convinced that this flag is worth it over just creating the `logins.json` file directly and skipping the `cue login` invocation, because essentially all that `cue login` is doing when passed the `--token` flag is writing it directly to that file AFAICS, with not much other logic. It certainly doesn\u0027t seem worth having it as a user-visible flag.",
      "parentUuid": "63173253_296cb8ba",
      "revId": "855f5b153714dcb82443071d9d7b2870699646e4",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "c8999485_afb22600",
        "filename": "cmd/cue/cmd/login.go",
        "patchSetId": 2
      },
      "lineNbr": 131,
      "author": {
        "id": 1017720
      },
      "writtenOn": "2024-02-02T12:30:02Z",
      "side": 1,
      "message": "I can\u0027t say whether or not `cue login --token` as it is implemented right now is right or not, but I disagree in principle that we should not expose something like this. Once we have the ability to generate user tokens in the web UI, we _will need_ a way for a person to set up that token in their logins.json file. Having them manually create or edit the file is definitely not good.\n\nI don\u0027t want to spend more time on this now, though, so I\u0027m just going to abandon and move ahead with setting up an entire logins.json in the e2e tests. Just flagging that I do think we will need a flag like this sooner than later. My thinking here was to get ahead of that since the e2e tests have almost the same use case, but I don\u0027t want to block the e2e work until we reach an agreement here.",
      "parentUuid": "d7393a27_d2e8cc08",
      "revId": "855f5b153714dcb82443071d9d7b2870699646e4",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    }
  ]
}