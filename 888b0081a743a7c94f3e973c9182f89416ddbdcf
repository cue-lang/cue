{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "5f5b7511_745c6bc0",
        "filename": "encoding/jsonschema/structbuilder.go",
        "patchSetId": 6
      },
      "lineNbr": 30,
      "author": {
        "id": 1017720
      },
      "writtenOn": "2024-12-16T11:27:49Z",
      "side": 1,
      "message": "this godoc I find slightly confusing; refIdents is documented as \"refer to entries at the top level of the struct\", but then this is \"references to the struct root\". So they are both for pointing to the root struct? assuming I\u0027m misunderstanding, perhaps reword a bit to be clearer.",
      "revId": "888b0081a743a7c94f3e973c9182f89416ddbdcf",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "d3e4a157_31ca6bde",
        "filename": "encoding/jsonschema/structbuilder.go",
        "patchSetId": 6
      },
      "lineNbr": 30,
      "author": {
        "id": 1007275
      },
      "writtenOn": "2024-12-16T12:55:55Z",
      "side": 1,
      "message": "there\u0027s a difference between an entry at the top level of the struct, and a reference to the struct root itself. Maybe just adding \"itself\" might help enough htere.",
      "parentUuid": "5f5b7511_745c6bc0",
      "revId": "888b0081a743a7c94f3e973c9182f89416ddbdcf",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d362dc86_25577e76",
        "filename": "encoding/jsonschema/structbuilder.go",
        "patchSetId": 6
      },
      "lineNbr": 42,
      "author": {
        "id": 1017720
      },
      "writtenOn": "2024-12-16T11:27:49Z",
      "side": 1,
      "message": "nit: add \"and\" for readability\n```suggestion\n\t// value holds the value associated with the node, if any, and not including the\n```",
      "range": {
        "startLine": 42,
        "startChar": 60,
        "endLine": 42,
        "endChar": 63
      },
      "revId": "888b0081a743a7c94f3e973c9182f89416ddbdcf",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "0d9bd01d_a83d5eca",
        "filename": "encoding/jsonschema/structbuilder.go",
        "patchSetId": 6
      },
      "lineNbr": 42,
      "author": {
        "id": 1007275
      },
      "writtenOn": "2024-12-16T12:55:55Z",
      "side": 1,
      "message": "Not keen on the \"and\" grammatically, but adjusted a bit differently.",
      "parentUuid": "d362dc86_25577e76",
      "range": {
        "startLine": 42,
        "startChar": 60,
        "endLine": 42,
        "endChar": 63
      },
      "revId": "888b0081a743a7c94f3e973c9182f89416ddbdcf",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "542da440_dc682192",
        "filename": "encoding/jsonschema/structbuilder.go",
        "patchSetId": 6
      },
      "lineNbr": 49,
      "author": {
        "id": 1017720
      },
      "writtenOn": "2024-12-16T11:27:49Z",
      "side": 1,
      "message": "clarify \"directly present\"? as in, just the fields for this struct, but no nested fields.",
      "range": {
        "startLine": 49,
        "startChar": 30,
        "endLine": 49,
        "endChar": 37
      },
      "revId": "888b0081a743a7c94f3e973c9182f89416ddbdcf",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "1ab35775_86cea168",
        "filename": "encoding/jsonschema/structbuilder.go",
        "patchSetId": 6
      },
      "lineNbr": 49,
      "author": {
        "id": 1007275
      },
      "writtenOn": "2024-12-16T12:55:55Z",
      "side": 1,
      "message": "It does hold nested fields by virtues of the recursive `structBuilderNode` type, but not as entries directly in this map. I\u0027ve adjusted the comment to try to make it clearer.",
      "parentUuid": "542da440_dc682192",
      "range": {
        "startLine": 49,
        "startChar": 30,
        "endLine": 49,
        "endChar": 37
      },
      "revId": "888b0081a743a7c94f3e973c9182f89416ddbdcf",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e48b3cac_77e62336",
        "filename": "encoding/jsonschema/structbuilder.go",
        "patchSetId": 6
      },
      "lineNbr": 91,
      "author": {
        "id": 1017720
      },
      "writtenOn": "2024-12-16T11:27:49Z",
      "side": 1,
      "message": "surely this is \"must be expressed as an identifier\", given the `!ok` logic?",
      "range": {
        "startLine": 91,
        "startChar": 53,
        "endLine": 91,
        "endChar": 59
      },
      "revId": "888b0081a743a7c94f3e973c9182f89416ddbdcf",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "95626cae_3b27fe31",
        "filename": "encoding/jsonschema/structbuilder.go",
        "patchSetId": 6
      },
      "lineNbr": 91,
      "author": {
        "id": 1007275
      },
      "writtenOn": "2024-12-16T12:55:55Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "e48b3cac_77e62336",
      "range": {
        "startLine": 91,
        "startChar": 53,
        "endLine": 91,
        "endChar": 59
      },
      "revId": "888b0081a743a7c94f3e973c9182f89416ddbdcf",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "fa16b1db_aae90d25",
        "filename": "encoding/jsonschema/structbuilder.go",
        "patchSetId": 6
      },
      "lineNbr": 102,
      "author": {
        "id": 1017720
      },
      "writtenOn": "2024-12-16T11:27:49Z",
      "side": 1,
      "message": "this boolean is always true, no? I would simplify the code, or add a note explaining when we expect to use \"false\" here in the near future.",
      "range": {
        "startLine": 102,
        "startChar": 49,
        "endLine": 102,
        "endChar": 56
      },
      "revId": "888b0081a743a7c94f3e973c9182f89416ddbdcf",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "7602d613_a7d636ae",
        "filename": "encoding/jsonschema/structbuilder.go",
        "patchSetId": 6
      },
      "lineNbr": 102,
      "author": {
        "id": 1007275
      },
      "writtenOn": "2024-12-16T12:55:55Z",
      "side": 1,
      "message": "Good catch. In a previous iteration this was also invoked by `getRef`. All the `isPresent` logic is now redundant - I\u0027ve removed it.",
      "parentUuid": "fa16b1db_aae90d25",
      "range": {
        "startLine": 102,
        "startChar": 49,
        "endLine": 102,
        "endChar": 56
      },
      "revId": "888b0081a743a7c94f3e973c9182f89416ddbdcf",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "cb8dce93_c5ac7f5a",
        "filename": "encoding/jsonschema/structbuilder.go",
        "patchSetId": 6
      },
      "lineNbr": 239,
      "author": {
        "id": 1017720
      },
      "writtenOn": "2024-12-16T11:27:49Z",
      "side": 1,
      "message": "replace with https://pkg.go.dev/slices#ContainsFunc ?",
      "revId": "888b0081a743a7c94f3e973c9182f89416ddbdcf",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "8fda4c8c_8c6d9b39",
        "filename": "encoding/jsonschema/structbuilder.go",
        "patchSetId": 6
      },
      "lineNbr": 239,
      "author": {
        "id": 1007275
      },
      "writtenOn": "2024-12-16T12:55:55Z",
      "side": 1,
      "message": "entries isn\u0027t a slice so that wouldn\u0027t have been appropriate, but as it happens this function is redundant now and I\u0027ve removed it ðŸ˜Š",
      "parentUuid": "cb8dce93_c5ac7f5a",
      "revId": "888b0081a743a7c94f3e973c9182f89416ddbdcf",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1a717c97_7e20b84d",
        "filename": "encoding/jsonschema/structbuilder.go",
        "patchSetId": 6
      },
      "lineNbr": 299,
      "author": {
        "id": 1017720
      },
      "writtenOn": "2024-12-16T11:27:49Z",
      "side": 1,
      "message": "is this necessary? don\u0027t the two Compare calls below suffice? I don\u0027t imagine the performance of such a shortcut is measurable.",
      "revId": "888b0081a743a7c94f3e973c9182f89416ddbdcf",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "485a6d31_7ed4a3a3",
        "filename": "encoding/jsonschema/structbuilder.go",
        "patchSetId": 6
      },
      "lineNbr": 299,
      "author": {
        "id": 1007275
      },
      "writtenOn": "2024-12-16T12:55:55Z",
      "side": 1,
      "message": "I\u0027d prefer to avoid the allocation that String allocation, and why not, given that it\u0027s trivial to do?",
      "parentUuid": "1a717c97_7e20b84d",
      "revId": "888b0081a743a7c94f3e973c9182f89416ddbdcf",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "409e891c_73d36865",
        "filename": "encoding/jsonschema/structbuilder.go",
        "patchSetId": 6
      },
      "lineNbr": 302,
      "author": {
        "id": 1017720
      },
      "writtenOn": "2024-12-16T11:27:49Z",
      "side": 1,
      "message": "nit: I would always write this like\n\n\n```\nif c :\u003d cmp.Compare(s1.Type(), s2.Type()); c !\u003d 0 {\n    return c\n}\n```\n\nit\u0027s less repetitive, and you also compare just once rather than twice.",
      "revId": "888b0081a743a7c94f3e973c9182f89416ddbdcf",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "35abb0fc_e1e64a6f",
        "filename": "encoding/jsonschema/structbuilder.go",
        "patchSetId": 6
      },
      "lineNbr": 302,
      "author": {
        "id": 1007275
      },
      "writtenOn": "2024-12-16T12:55:55Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "409e891c_73d36865",
      "revId": "888b0081a743a7c94f3e973c9182f89416ddbdcf",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4ac47174_9379c31f",
        "filename": "encoding/jsonschema/util.go",
        "patchSetId": 6
      },
      "lineNbr": 29,
      "author": {
        "id": 1017720
      },
      "writtenOn": "2024-12-16T11:27:49Z",
      "side": 1,
      "message": "hm, do we know why the original code forbids that, when we find it useful here? perhaps leave a TODO behind because it\u0027s unfortunate to copy paste.\n\nor alternatively you could have a special case for ast.Ident with underscore prefix, and for all other cases fall back to `cue.Label` to reuse as much code as possible.",
      "revId": "888b0081a743a7c94f3e973c9182f89416ddbdcf",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b194534b_87bfe98b",
        "filename": "encoding/jsonschema/util.go",
        "patchSetId": 6
      },
      "lineNbr": 29,
      "author": {
        "id": 1007275
      },
      "writtenOn": "2024-12-16T12:55:55Z",
      "side": 1,
      "message": "Good idea. I\u0027ve done the latter and added a comment explaining why we need to do this here.",
      "parentUuid": "4ac47174_9379c31f",
      "revId": "888b0081a743a7c94f3e973c9182f89416ddbdcf",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1faec887_e5d72576",
        "filename": "encoding/jsonschema/util.go",
        "patchSetId": 6
      },
      "lineNbr": 127,
      "author": {
        "id": 1017720
      },
      "writtenOn": "2024-12-16T11:27:49Z",
      "side": 1,
      "message": "neat. I\u0027ve implemented almost exactly the same stuff in the YAML decoder, but with less code because I only deal with regular fields. We should consider unifying all this stuff in one place, even if it\u0027s not public API - perhaps leave a TODO?",
      "revId": "888b0081a743a7c94f3e973c9182f89416ddbdcf",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "39d947d6_b55b8b9c",
        "filename": "encoding/jsonschema/util.go",
        "patchSetId": 6
      },
      "lineNbr": 148,
      "author": {
        "id": 1017720
      },
      "writtenOn": "2024-12-16T11:27:49Z",
      "side": 1,
      "message": "this strikes me as a bit of missing public API, like `func (Selector) Label() (Label, error)`.",
      "revId": "888b0081a743a7c94f3e973c9182f89416ddbdcf",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "20076322_6976831b",
        "filename": "encoding/jsonschema/util.go",
        "patchSetId": 6
      },
      "lineNbr": 148,
      "author": {
        "id": 1007275
      },
      "writtenOn": "2024-12-16T12:55:55Z",
      "side": 1,
      "message": "yeah, that would be nice. added a TODO.",
      "parentUuid": "39d947d6_b55b8b9c",
      "revId": "888b0081a743a7c94f3e973c9182f89416ddbdcf",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    }
  ]
}