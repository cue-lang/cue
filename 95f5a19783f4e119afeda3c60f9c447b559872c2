{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "62f5b9f1_94163415",
        "filename": "mod/modconfig/modconfig.go",
        "patchSetId": 1
      },
      "lineNbr": 215,
      "author": {
        "id": 1017720
      },
      "writtenOn": "2024-03-21T12:51:28Z",
      "side": 1,
      "message": "this `t.logins` read is racy now, since it doesn\u0027t hold the mutex but `updateLogin` may change the pointer in the field value",
      "revId": "95f5a19783f4e119afeda3c60f9c447b559872c2",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "da4ea8bb_aafda1af",
        "filename": "mod/modconfig/modconfig.go",
        "patchSetId": 1
      },
      "lineNbr": 215,
      "author": {
        "id": 1037639
      },
      "writtenOn": "2024-03-21T13:37:17Z",
      "side": 1,
      "message": "Don\u0027t think so. If `t.logins` is nil, it is never written again since `updateLogin` is possible iff `t.logins` is not nil.",
      "parentUuid": "62f5b9f1_94163415",
      "revId": "95f5a19783f4e119afeda3c60f9c447b559872c2",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b2220129_2c8de07a",
        "filename": "mod/modconfig/modconfig.go",
        "patchSetId": 1
      },
      "lineNbr": 215,
      "author": {
        "id": 1017720
      },
      "writtenOn": "2024-03-21T14:12:24Z",
      "side": 1,
      "message": "But you do this nil check even when t.logins isn\u0027t nil. If logins.json as a file exists, and you get two concurrent calls into this func, then one might be doing the field nil check while the other holds the mutex and modifies the field. Hence, a race.",
      "parentUuid": "da4ea8bb_aafda1af",
      "revId": "95f5a19783f4e119afeda3c60f9c447b559872c2",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "70c34d17_268e2827",
        "filename": "mod/modconfig/modconfig.go",
        "patchSetId": 1
      },
      "lineNbr": 215,
      "author": {
        "id": 1037639
      },
      "writtenOn": "2024-03-21T16:23:08Z",
      "side": 1,
      "message": "Ah right. Ok will fix!",
      "parentUuid": "b2220129_2c8de07a",
      "revId": "95f5a19783f4e119afeda3c60f9c447b559872c2",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "5e36b67f_836a516a",
        "filename": "mod/modconfig/modconfig.go",
        "patchSetId": 1
      },
      "lineNbr": 215,
      "author": {
        "id": 1037639
      },
      "writtenOn": "2024-03-22T12:17:46Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "70c34d17_268e2827",
      "revId": "95f5a19783f4e119afeda3c60f9c447b559872c2",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e12f5d49_da39e515",
        "filename": "mod/modconfig/modconfig.go",
        "patchSetId": 1
      },
      "lineNbr": 279,
      "author": {
        "id": 1017720
      },
      "writtenOn": "2024-03-21T12:51:28Z",
      "side": 1,
      "message": "FYI we already have code for this, grep for `lockedfile` in the cue repo - it\u0027s borrwed from the main Go repo, as cmd/go also needs file locking at the FS level.",
      "revId": "95f5a19783f4e119afeda3c60f9c447b559872c2",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a1f4d25d_b81ad3c2",
        "filename": "mod/modconfig/modconfig.go",
        "patchSetId": 1
      },
      "lineNbr": 279,
      "author": {
        "id": 1037639
      },
      "writtenOn": "2024-03-21T13:37:17Z",
      "side": 1,
      "message": "I can\u0027t say I like the implementation in `lockedfile`. If the process panics or is killed, the lock file will remain forever. Is there any reason we went with a custom solution instead of using a dedicated package that relies on `flock`, like e.g. https://github.com/dolthub/fslock ?",
      "parentUuid": "e12f5d49_da39e515",
      "revId": "95f5a19783f4e119afeda3c60f9c447b559872c2",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "aa77bf9d_aa1e40e5",
        "filename": "mod/modconfig/modconfig.go",
        "patchSetId": 1
      },
      "lineNbr": 279,
      "author": {
        "id": 1017720
      },
      "writtenOn": "2024-03-21T14:12:24Z",
      "side": 1,
      "message": "it\u0027s borrowed from cmd/go, and they have done extensive testing on many platforms and millions of users for years, so for that reason alone it\u0027s good enough for us :) you don\u0027t have to use it in this CL, just a thought for a follow-up.\n\nNote that that fslock library doesn\u0027t seem to be maintained nor have many users, nor does it allow reporting issues, so that particular one definitely doesn\u0027t seem like a good option to me.",
      "parentUuid": "a1f4d25d_b81ad3c2",
      "revId": "95f5a19783f4e119afeda3c60f9c447b559872c2",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6b8458b5_33899931",
        "filename": "mod/modconfig/modconfig.go",
        "patchSetId": 1
      },
      "lineNbr": 279,
      "author": {
        "id": 1037639
      },
      "writtenOn": "2024-03-21T16:23:08Z",
      "side": 1,
      "message": "Yeah, create a file and hope for the best is a very popular locking strategy, case in point - cmd/go. Works 99.99% of the time. That doesn\u0027t make it right though. I\u0027ve had my share of dealing with stuck lock files in the past. On the other hand, `flock` API is fairly stable, so I can imagine that the fslock library is not updated because it\u0027s bug-free and entirely new OSes are a fairly rare occurrence. So if it were up to me, I\u0027d go for that 0.01% just to not have to worry about it going forward. Anyway, indeed there\u0027s a TODO in there already so it can be addressed in a follow-up CL.",
      "parentUuid": "aa77bf9d_aa1e40e5",
      "revId": "95f5a19783f4e119afeda3c60f9c447b559872c2",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "ab0ff51f_9b66d1d7",
        "filename": "mod/modconfig/modconfig.go",
        "patchSetId": 1
      },
      "lineNbr": 279,
      "author": {
        "id": 1037639
      },
      "writtenOn": "2024-03-22T12:17:46Z",
      "side": 1,
      "message": "Will address in a follow-up CL.",
      "parentUuid": "6b8458b5_33899931",
      "revId": "95f5a19783f4e119afeda3c60f9c447b559872c2",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    }
  ]
}