{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "2188950e_1f7798ab",
        "filename": "internal/registrytest/registry.go",
        "patchSetId": 4
      },
      "lineNbr": 187,
      "author": {
        "id": 1037639
      },
      "writtenOn": "2024-04-05T08:57:17Z",
      "side": 1,
      "message": "Isn\u0027t 403 leaky security-wise? Shouldn\u0027t the registry be returning a 404 instead to avoid exposing module presence/absence information (which would make most of this CL unnecessary I think)?",
      "revId": "9947f8115249c7d65328db34fcaa9a5272cfd8a1",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "78c23998_80190fcf",
        "filename": "internal/registrytest/registry.go",
        "patchSetId": 4
      },
      "lineNbr": 187,
      "author": {
        "id": 1007275
      },
      "writtenOn": "2024-04-05T11:37:50Z",
      "side": 1,
      "message": "It is technically leaky, but 403 is still a legitimate error code for servers to return (also \"DENIED\" is one of the explicitly listed OCI error codes, which corresponds closely to a 403 error AFAICS), so I think we need to deal with it.\n\nHere\u0027s an example of where the Docker registry implementation appears to return a 403 error in response to inadequate authorization: https://github.com/distribution/distribution/blob/8d12329a8f2d4d0371eea2df2091f867d370dcb9/registry/handlers/manifests.go#L394\nIt could be argued that it\u0027s wrong to do so, but the fact remains that the possibility is there.\n\nFor the record, ISTM that another legitimate approach to avoid exposing module presence/absence might be to _always_ return 403 and never 404.",
      "parentUuid": "2188950e_1f7798ab",
      "revId": "9947f8115249c7d65328db34fcaa9a5272cfd8a1",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "4ec1f61c_53c3bc86",
        "filename": "internal/registrytest/registry.go",
        "patchSetId": 4
      },
      "lineNbr": 187,
      "author": {
        "id": 1037639
      },
      "writtenOn": "2024-04-05T11:55:27Z",
      "side": 1,
      "message": "SGTM. If the registry consistently returns a 403 or a 404 then there\u0027s no leakage possible.",
      "parentUuid": "78c23998_80190fcf",
      "revId": "9947f8115249c7d65328db34fcaa9a5272cfd8a1",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "400c084a_4b6a8a21",
        "filename": "internal/registrytest/registry.go",
        "patchSetId": 4
      },
      "lineNbr": 187,
      "author": {
        "id": 1017723
      },
      "writtenOn": "2024-04-05T12:35:56Z",
      "side": 1,
      "message": "Just observing, but given we are talking about code in the CUE repo here it\u0027s impossible for us to leak. We can inappropriately reclassify an error, but that\u0027s about it.",
      "parentUuid": "4ec1f61c_53c3bc86",
      "revId": "9947f8115249c7d65328db34fcaa9a5272cfd8a1",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b2cd80b6_3cdbf0cf",
        "filename": "internal/registrytest/registry.go",
        "patchSetId": 4
      },
      "lineNbr": 187,
      "author": {
        "id": 1007275
      },
      "writtenOn": "2024-04-05T13:18:32Z",
      "side": 1,
      "message": "This particular code is in registrytest and is intended to simulate a third party registry server. So to my mind the question is about whether our client code _should_ be dealing with 403 responses, and if so how (hence my reply).",
      "parentUuid": "400c084a_4b6a8a21",
      "revId": "9947f8115249c7d65328db34fcaa9a5272cfd8a1",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "35e80dd7_1b8d259e",
        "filename": "mod/modregistry/client.go",
        "patchSetId": 4
      },
      "lineNbr": 192,
      "author": {
        "id": 1037639
      },
      "writtenOn": "2024-04-05T08:57:17Z",
      "side": 1,
      "message": "Does `%v` also wrap errors? If not, suggest using `%w`\n\n```suggestion\n\t\treturn nil, fmt.Errorf(\"module %v: %w\", m, _err)\n```",
      "revId": "9947f8115249c7d65328db34fcaa9a5272cfd8a1",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "3ed8ba8a_2287c811",
        "filename": "mod/modregistry/client.go",
        "patchSetId": 4
      },
      "lineNbr": 192,
      "author": {
        "id": 1007275
      },
      "writtenOn": "2024-04-05T11:37:50Z",
      "side": 1,
      "message": "I\u0027m usually in favour of hiding error causes, but I think there\u0027s a reasonable case for exposing it here, so done. I\u0027ve also changed an existing place that was using the same pattern and added a TODO about whether we should be using a less specific not-found check there too.",
      "parentUuid": "35e80dd7_1b8d259e",
      "revId": "9947f8115249c7d65328db34fcaa9a5272cfd8a1",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    }
  ]
}