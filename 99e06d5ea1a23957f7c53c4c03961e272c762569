{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "622188dd_1c0b6a90",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 16
      },
      "lineNbr": 0,
      "author": {
        "id": 1007275
      },
      "writtenOn": "2025-08-06T10:51:10Z",
      "side": 1,
      "message": "WIP review; just looked at the doc comment so far.",
      "revId": "99e06d5ea1a23957f7c53c4c03961e272c762569",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "810d717c_43c64a1a",
        "filename": "internal/lsp/definitions/definitions.go",
        "patchSetId": 16
      },
      "lineNbr": 46,
      "author": {
        "id": 1007275
      },
      "writtenOn": "2025-08-06T10:51:10Z",
      "side": 1,
      "message": "Maybe better phrased in the third person, as we\u0027re talking about the\ncode here rather than the author/maintainer?\n\ne.g. \nFor example, it does not test field names\n\nIt does not compute the names of...",
      "revId": "99e06d5ea1a23957f7c53c4c03961e272c762569",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "8d4d8424_e80b0fd0",
        "filename": "internal/lsp/definitions/definitions.go",
        "patchSetId": 16
      },
      "lineNbr": 46,
      "author": {
        "id": 1038145
      },
      "writtenOn": "2025-08-06T15:41:17Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "810d717c_43c64a1a",
      "revId": "99e06d5ea1a23957f7c53c4c03961e272c762569",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "26d499fd_5aa0f491",
        "filename": "internal/lsp/definitions/definitions.go",
        "patchSetId": 16
      },
      "lineNbr": 52,
      "author": {
        "id": 1007275
      },
      "writtenOn": "2025-08-06T10:51:10Z",
      "side": 1,
      "message": "I think I\u0027m a bit confused between the notion of \"path\" and that of \"expression\". Here, ISTM that \"expression\" could be used instead of \"path\", but it seems like you\u0027re wanting to think about paths in a separate way from general expressions. Maybe worth teasing apart that distinction a little?\n\nSpecifically, you talk about paths like the above, but you also talk about a path within a scope, and those two things feel somewhat different to me.\n\n\"path reference\" ?\n\"reference\" ?\n\"path expression\" ?",
      "revId": "99e06d5ea1a23957f7c53c4c03961e272c762569",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "5dd65f94_6e5c4f38",
        "filename": "internal/lsp/definitions/definitions.go",
        "patchSetId": 16
      },
      "lineNbr": 52,
      "author": {
        "id": 1038145
      },
      "writtenOn": "2025-08-06T15:41:17Z",
      "side": 1,
      "message": "I actually don\u0027t mention expressions at all. In this text, I do only want to talk about expressions which are paths. I\u0027ve made some changes to explain exactly what I mean by path, which should help. Although in this text and its examples, I only have paths with idents as their first element, this evaluator does cope fine with other expressions as the first element - e.g. function pattern, things like `(a \u0026 b).c` etc.",
      "parentUuid": "26d499fd_5aa0f491",
      "revId": "99e06d5ea1a23957f7c53c4c03961e272c762569",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "261c01d6_705f7f80",
        "filename": "internal/lsp/definitions/definitions.go",
        "patchSetId": 16
      },
      "lineNbr": 76,
      "author": {
        "id": 1007275
      },
      "writtenOn": "2025-08-06T10:51:10Z",
      "side": 1,
      "message": "FWIW I find this definition of \"scope\" a bit confusing when juxtaposed with the usual definition of lexical scopes. It\u0027s perhaps more akin to a struct or object value than a regular scope?",
      "revId": "99e06d5ea1a23957f7c53c4c03961e272c762569",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7725983f_3c8be715",
        "filename": "internal/lsp/definitions/definitions.go",
        "patchSetId": 16
      },
      "lineNbr": 76,
      "author": {
        "id": 1038145
      },
      "writtenOn": "2025-08-06T15:41:17Z",
      "side": 1,
      "message": "I think, in this context, \"dynamic scope\" is the way to go. To me at least, a \"lexical scope\" is just a subset of the more general world of scope types.",
      "parentUuid": "261c01d6_705f7f80",
      "revId": "99e06d5ea1a23957f7c53c4c03961e272c762569",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "c9870561_ff932fb0",
        "filename": "internal/lsp/definitions/definitions.go",
        "patchSetId": 16
      },
      "lineNbr": 76,
      "author": {
        "id": 1038145
      },
      "writtenOn": "2025-08-11T10:50:00Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "7725983f_3c8be715",
      "revId": "99e06d5ea1a23957f7c53c4c03961e272c762569",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "fb643252_a6bc9623",
        "filename": "internal/lsp/definitions/definitions.go",
        "patchSetId": 16
      },
      "lineNbr": 81,
      "author": {
        "id": 1007275
      },
      "writtenOn": "2025-08-06T10:51:10Z",
      "side": 1,
      "message": "```suggestion\n// When a scope is evaluated, each of these nodes is unpacked. An\n```\n\n?",
      "revId": "99e06d5ea1a23957f7c53c4c03961e272c762569",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "1d63bbe8_df8f4a6a",
        "filename": "internal/lsp/definitions/definitions.go",
        "patchSetId": 16
      },
      "lineNbr": 81,
      "author": {
        "id": 1038145
      },
      "writtenOn": "2025-08-06T15:41:17Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "fb643252_a6bc9623",
      "revId": "99e06d5ea1a23957f7c53c4c03961e272c762569",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ee9eff29_a22cbb5c",
        "filename": "internal/lsp/definitions/definitions.go",
        "patchSetId": 16
      },
      "lineNbr": 84,
      "author": {
        "id": 1007275
      },
      "writtenOn": "2025-08-06T10:51:10Z",
      "side": 1,
      "message": "```suggestion\n// encountered, it ensures that within the current scope, a binding\n```\n\nand similarly in other places.",
      "revId": "99e06d5ea1a23957f7c53c4c03961e272c762569",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "822da0c0_9d93d05f",
        "filename": "internal/lsp/definitions/definitions.go",
        "patchSetId": 16
      },
      "lineNbr": 84,
      "author": {
        "id": 1038145
      },
      "writtenOn": "2025-08-06T15:41:17Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "ee9eff29_a22cbb5c",
      "revId": "99e06d5ea1a23957f7c53c4c03961e272c762569",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4ef22aa6_7ba05014",
        "filename": "internal/lsp/definitions/definitions.go",
        "patchSetId": 16
      },
      "lineNbr": 85,
      "author": {
        "id": 1007275
      },
      "writtenOn": "2025-08-06T10:51:10Z",
      "side": 1,
      "message": "```suggestion\n// exists for the field\u0027s name, and add the field\u0027s value to the binding\u0027s\n```",
      "revId": "99e06d5ea1a23957f7c53c4c03961e272c762569",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "24dbb13b_8355415c",
        "filename": "internal/lsp/definitions/definitions.go",
        "patchSetId": 16
      },
      "lineNbr": 85,
      "author": {
        "id": 1038145
      },
      "writtenOn": "2025-08-06T15:41:17Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "4ef22aa6_7ba05014",
      "revId": "99e06d5ea1a23957f7c53c4c03961e272c762569",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4ab8d4fa_51656fc7",
        "filename": "internal/lsp/definitions/definitions.go",
        "patchSetId": 16
      },
      "lineNbr": 89,
      "author": {
        "id": 1007275
      },
      "writtenOn": "2025-08-06T10:51:10Z",
      "side": 1,
      "message": "I\u0027m not sure exactly what \"this\" refers to here. Is it \"path\", in which case maybe be explicit?\n\n\n\n```suggestion\n// If the scope contains a path, the path will correspond either to the\n```\n\nAlso, for me, a path is a multi-component thing, but I _think_ that here a \"path\" is just empty or a single entry. Perhaps then:\n\n```suggestion\n// If the scope contains an entry, the entry will correspond either to the\n```\n\n?\n\nOr maybe \"key\" is better than \"entry\"?",
      "revId": "99e06d5ea1a23957f7c53c4c03961e272c762569",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "d6a93ce5_d358a332",
        "filename": "internal/lsp/definitions/definitions.go",
        "patchSetId": 16
      },
      "lineNbr": 89,
      "author": {
        "id": 1038145
      },
      "writtenOn": "2025-08-06T15:41:17Z",
      "side": 1,
      "message": "I\u0027ll make it clearer. In general, I treat path as one or more elements. The first element of a path can be (almost?) any expr. Which, thinking about it, helps me understand your queries about expr vs path.",
      "parentUuid": "4ab8d4fa_51656fc7",
      "revId": "99e06d5ea1a23957f7c53c4c03961e272c762569",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7c6c0ac5_37aa589f",
        "filename": "internal/lsp/definitions/definitions.go",
        "patchSetId": 16
      },
      "lineNbr": 101,
      "author": {
        "id": 1007275
      },
      "writtenOn": "2025-08-06T10:51:10Z",
      "side": 1,
      "message": "```suggestion\n// guaranteed that the binding contains its complete set of nodes before\n```",
      "revId": "99e06d5ea1a23957f7c53c4c03961e272c762569",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "946fdc8b_67fcd4a0",
        "filename": "internal/lsp/definitions/definitions.go",
        "patchSetId": 16
      },
      "lineNbr": 101,
      "author": {
        "id": 1038145
      },
      "writtenOn": "2025-08-06T15:41:17Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "7c6c0ac5_37aa589f",
      "revId": "99e06d5ea1a23957f7c53c4c03961e272c762569",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8eed55be_fc611814",
        "filename": "internal/lsp/definitions/definitions.go",
        "patchSetId": 16
      },
      "lineNbr": 116,
      "author": {
        "id": 1007275
      },
      "writtenOn": "2025-08-06T10:51:10Z",
      "side": 1,
      "message": "path or expression? I\u0027m not entirely sure what a path is anymore 😉",
      "revId": "99e06d5ea1a23957f7c53c4c03961e272c762569",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "531b34d0_d2fa8f6c",
        "filename": "internal/lsp/definitions/definitions.go",
        "patchSetId": 16
      },
      "lineNbr": 116,
      "author": {
        "id": 1038145
      },
      "writtenOn": "2025-08-06T15:41:17Z",
      "side": 1,
      "message": "path. y.a is a path. It is also an expression, but I never talk about expressions here.",
      "parentUuid": "8eed55be_fc611814",
      "revId": "99e06d5ea1a23957f7c53c4c03961e272c762569",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9320b54e_b7b7d8ad",
        "filename": "internal/lsp/definitions/definitions.go",
        "patchSetId": 16
      },
      "lineNbr": 118,
      "author": {
        "id": 1007275
      },
      "writtenOn": "2025-08-06T10:51:10Z",
      "side": 1,
      "message": "Again, maybe \"expression\" rather than \"path\" ?",
      "revId": "99e06d5ea1a23957f7c53c4c03961e272c762569",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "4380251f_84bad0e0",
        "filename": "internal/lsp/definitions/definitions.go",
        "patchSetId": 16
      },
      "lineNbr": 118,
      "author": {
        "id": 1038145
      },
      "writtenOn": "2025-08-06T15:41:17Z",
      "side": 1,
      "message": "Why? I never talk about expressions. If I do, then I then have to start saying \"oh it doesn\u0027t evaluate expressions in general, like 1+2\". I think it\u0027s much cleaner to stick only to talking about paths, even though the first element of a path does not have to be an ident, and can be other types of expression, some of which this evaluator interprets.",
      "parentUuid": "9320b54e_b7b7d8ad",
      "revId": "99e06d5ea1a23957f7c53c4c03961e272c762569",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "503cb6cd_bd6f592c",
        "filename": "internal/lsp/definitions/definitions.go",
        "patchSetId": 16
      },
      "lineNbr": 119,
      "author": {
        "id": 1007275
      },
      "writtenOn": "2025-08-06T10:51:10Z",
      "side": 1,
      "message": "Not innermost? Ah, no, because we\u0027re not talking about lexical scopes here. I found that a bit confusing and added some thoughts about the term \"scope\" above.",
      "revId": "99e06d5ea1a23957f7c53c4c03961e272c762569",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "afe513b1_47fe3b4f",
        "filename": "internal/lsp/definitions/definitions.go",
        "patchSetId": 16
      },
      "lineNbr": 119,
      "author": {
        "id": 1038145
      },
      "writtenOn": "2025-08-06T15:41:17Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "503cb6cd_bd6f592c",
      "revId": "99e06d5ea1a23957f7c53c4c03961e272c762569",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "94c8f4f4_6942bcb1",
        "filename": "internal/lsp/definitions/definitions.go",
        "patchSetId": 16
      },
      "lineNbr": 198,
      "author": {
        "id": 1007275
      },
      "writtenOn": "2025-08-06T10:51:10Z",
      "side": 1,
      "message": "This introduction of the idea of \"navigible scope\" gives me pause and makes me think once more that the notion of \"scope\" used elsewhere here could be clarified or renamed, because I think that it does in general correspond to \"navigible scope\" AIUI, but I\u0027m not _totally_ sure of that.\n\nPerhaps the \"navigible scope/binding\" concept could do with introducing up front at the start?",
      "revId": "99e06d5ea1a23957f7c53c4c03961e272c762569",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5108052e_029416b4",
        "filename": "internal/lsp/definitions/definitions.go",
        "patchSetId": 16
      },
      "lineNbr": 198,
      "author": {
        "id": 1038145
      },
      "writtenOn": "2025-08-06T15:41:17Z",
      "side": 1,
      "message": "I think I\u0027ve made this better?",
      "parentUuid": "94c8f4f4_6942bcb1",
      "revId": "99e06d5ea1a23957f7c53c4c03961e272c762569",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "ce572a9a_7715a3e7",
        "filename": "internal/lsp/definitions/definitions.go",
        "patchSetId": 16
      },
      "lineNbr": 198,
      "author": {
        "id": 1038145
      },
      "writtenOn": "2025-08-11T10:50:00Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "5108052e_029416b4",
      "revId": "99e06d5ea1a23957f7c53c4c03961e272c762569",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "39afd984_329119dc",
        "filename": "internal/lsp/definitions/definitions.go",
        "patchSetId": 16
      },
      "lineNbr": 211,
      "author": {
        "id": 1007275
      },
      "writtenOn": "2025-08-06T10:51:10Z",
      "side": 1,
      "message": "What does a rangeset \"moving\" mean?",
      "revId": "99e06d5ea1a23957f7c53c4c03961e272c762569",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "5ca91752_eae08128",
        "filename": "internal/lsp/definitions/definitions.go",
        "patchSetId": 16
      },
      "lineNbr": 211,
      "author": {
        "id": 1038145
      },
      "writtenOn": "2025-08-06T15:41:17Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "39afd984_329119dc",
      "revId": "99e06d5ea1a23957f7c53c4c03961e272c762569",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "46c2c4e6_899739d5",
        "filename": "internal/lsp/definitions/definitions.go",
        "patchSetId": 16
      },
      "lineNbr": 280,
      "author": {
        "id": 1007275
      },
      "writtenOn": "2025-08-06T15:44:07Z",
      "side": 1,
      "message": "Always having a slice (24 bytes) for each byte in the file seems somewhat extravagant. What percentage of a file is usually used for go-to-definition? I suspect a map might be more appropriate.",
      "revId": "99e06d5ea1a23957f7c53c4c03961e272c762569",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "925fa490_d7b5236e",
        "filename": "internal/lsp/definitions/definitions.go",
        "patchSetId": 16
      },
      "lineNbr": 280,
      "author": {
        "id": 1038145
      },
      "writtenOn": "2025-08-07T12:29:52Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "46c2c4e6_899739d5",
      "revId": "99e06d5ea1a23957f7c53c4c03961e272c762569",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3b78d624_a2f1ad6d",
        "filename": "internal/lsp/definitions/definitions.go",
        "patchSetId": 16
      },
      "lineNbr": 288,
      "author": {
        "id": 1007275
      },
      "writtenOn": "2025-08-06T10:51:10Z",
      "side": 1,
      "message": "It would perhaps be nice to describe briefly what the arguments mean.",
      "revId": "99e06d5ea1a23957f7c53c4c03961e272c762569",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "79dcb9b1_5fa05bb3",
        "filename": "internal/lsp/definitions/definitions.go",
        "patchSetId": 16
      },
      "lineNbr": 288,
      "author": {
        "id": 1038145
      },
      "writtenOn": "2025-08-11T10:50:00Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "3b78d624_a2f1ad6d",
      "revId": "99e06d5ea1a23957f7c53c4c03961e272c762569",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "be933cff_e8a9dd73",
        "filename": "internal/lsp/definitions/definitions.go",
        "patchSetId": 16
      },
      "lineNbr": 325,
      "author": {
        "id": 1007275
      },
      "writtenOn": "2025-08-06T15:44:07Z",
      "side": 1,
      "message": "Trivial allocation reduction:\n\n```suggestion\n\tkeys :\u003d make([]ast.Node, len(targets))\n\tfor i, scope :\u003d range targets {\n\t\tkeys[i] \u003d scope.key\n\t}\n```",
      "range": {
        "startLine": 321,
        "startChar": 0,
        "endLine": 325,
        "endChar": 0
      },
      "revId": "99e06d5ea1a23957f7c53c4c03961e272c762569",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "c83f0e53_68f77037",
        "filename": "internal/lsp/definitions/definitions.go",
        "patchSetId": 16
      },
      "lineNbr": 325,
      "author": {
        "id": 1038145
      },
      "writtenOn": "2025-08-07T12:29:52Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "be933cff_e8a9dd73",
      "range": {
        "startLine": 321,
        "startChar": 0,
        "endLine": 325,
        "endChar": 0
      },
      "revId": "99e06d5ea1a23957f7c53c4c03961e272c762569",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b92e30c9_0cfe3652",
        "filename": "internal/lsp/definitions/definitions.go",
        "patchSetId": 16
      },
      "lineNbr": 335,
      "author": {
        "id": 1007275
      },
      "writtenOn": "2025-08-06T15:44:07Z",
      "side": 1,
      "message": "```suggestion\n// FileDefinitions provides methods to resolve file offsets within a\n```",
      "revId": "99e06d5ea1a23957f7c53c4c03961e272c762569",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "bd02bce6_db877cbe",
        "filename": "internal/lsp/definitions/definitions.go",
        "patchSetId": 16
      },
      "lineNbr": 335,
      "author": {
        "id": 1038145
      },
      "writtenOn": "2025-08-07T12:29:52Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "b92e30c9_0cfe3652",
      "revId": "99e06d5ea1a23957f7c53c4c03961e272c762569",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e5f723c6_d756b55c",
        "filename": "internal/lsp/definitions/definitions.go",
        "patchSetId": 16
      },
      "lineNbr": 336,
      "author": {
        "id": 1007275
      },
      "writtenOn": "2025-08-06T15:44:07Z",
      "side": 1,
      "message": "```suggestion\n// certain file to their definitions.\n```",
      "revId": "99e06d5ea1a23957f7c53c4c03961e272c762569",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "9c2e1915_0fa5d6cd",
        "filename": "internal/lsp/definitions/definitions.go",
        "patchSetId": 16
      },
      "lineNbr": 336,
      "author": {
        "id": 1038145
      },
      "writtenOn": "2025-08-07T12:29:52Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "e5f723c6_d756b55c",
      "revId": "99e06d5ea1a23957f7c53c4c03961e272c762569",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e69e0cd9_379dc4ed",
        "filename": "internal/lsp/definitions/definitions.go",
        "patchSetId": 16
      },
      "lineNbr": 339,
      "author": {
        "id": 1007275
      },
      "writtenOn": "2025-08-06T15:44:07Z",
      "side": 1,
      "message": "Maybe document that this is indexed by file offset.",
      "revId": "99e06d5ea1a23957f7c53c4c03961e272c762569",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "5fb8104b_7f6365c1",
        "filename": "internal/lsp/definitions/definitions.go",
        "patchSetId": 16
      },
      "lineNbr": 339,
      "author": {
        "id": 1038145
      },
      "writtenOn": "2025-08-07T12:29:52Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "e69e0cd9_379dc4ed",
      "revId": "99e06d5ea1a23957f7c53c4c03961e272c762569",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "431830b7_5a225075",
        "filename": "internal/lsp/definitions/definitions.go",
        "patchSetId": 16
      },
      "lineNbr": 347,
      "author": {
        "id": 1007275
      },
      "writtenOn": "2025-08-06T15:44:07Z",
      "side": 1,
      "message": "Maybe make it clear that the file offset is in bytes?",
      "revId": "99e06d5ea1a23957f7c53c4c03961e272c762569",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "c25ee6e3_8c3e564a",
        "filename": "internal/lsp/definitions/definitions.go",
        "patchSetId": 16
      },
      "lineNbr": 347,
      "author": {
        "id": 1038145
      },
      "writtenOn": "2025-08-07T12:29:52Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "431830b7_5a225075",
      "revId": "99e06d5ea1a23957f7c53c4c03961e272c762569",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "cfcc34dd_3b9568d8",
        "filename": "internal/lsp/definitions/definitions.go",
        "patchSetId": 16
      },
      "lineNbr": 380,
      "author": {
        "id": 1007275
      },
      "writtenOn": "2025-08-06T15:44:07Z",
      "side": 1,
      "message": "debugging remnant?",
      "revId": "99e06d5ea1a23957f7c53c4c03961e272c762569",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6dd6e5ca_e2cd6a4a",
        "filename": "internal/lsp/definitions/definitions.go",
        "patchSetId": 16
      },
      "lineNbr": 380,
      "author": {
        "id": 1038145
      },
      "writtenOn": "2025-08-07T12:29:52Z",
      "side": 1,
      "message": "Yes. I am very happy to remove. But this is also the most sensible place to call dump, and I\u0027m not sure that that\u0027s obvious, which is why I left this here. Your call.",
      "parentUuid": "cfcc34dd_3b9568d8",
      "revId": "99e06d5ea1a23957f7c53c4c03961e272c762569",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "c30dec91_bcdc187a",
        "filename": "internal/lsp/definitions/definitions.go",
        "patchSetId": 16
      },
      "lineNbr": 380,
      "author": {
        "id": 1038145
      },
      "writtenOn": "2025-08-11T14:47:32Z",
      "side": 1,
      "message": "Acknowledged",
      "parentUuid": "6dd6e5ca_e2cd6a4a",
      "revId": "99e06d5ea1a23957f7c53c4c03961e272c762569",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f724cec8_d2b6a120",
        "filename": "internal/lsp/definitions/definitions.go",
        "patchSetId": 16
      },
      "lineNbr": 396,
      "author": {
        "id": 1007275
      },
      "writtenOn": "2025-08-06T10:51:10Z",
      "side": 1,
      "message": "Perhaps clarify what this is when the scope is embedded? (presumably nil, but I\u0027m not entirely sure).",
      "revId": "99e06d5ea1a23957f7c53c4c03961e272c762569",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "6e0762bb_6fc85c96",
        "filename": "internal/lsp/definitions/definitions.go",
        "patchSetId": 16
      },
      "lineNbr": 396,
      "author": {
        "id": 1038145
      },
      "writtenOn": "2025-08-06T15:41:17Z",
      "side": 1,
      "message": "Hmm, if we have a scope built for `a: b` (or `a: {b}`) then the key will be the ident `a`. When the scope is evaluated, the ident `b` will be encountered, it\u0027ll be resolved to another scope, and that scope will be stored in the `resolvesTo` field.\n\nThere are cases where there is no key though. For example, `x: {a: 3}.a`. Here, when the outer scope is evaluated, we will once again attempt to resolve `{a: 3}.a` (it\u0027s an \"embedded\" path). The first element of this path is a structlit, and we\u0027ll create a fresh scope for it which itself has no key.\n\nI\u0027ll improve this comment.",
      "parentUuid": "f724cec8_d2b6a120",
      "revId": "99e06d5ea1a23957f7c53c4c03961e272c762569",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c3440dae_d3e1acf7",
        "filename": "internal/lsp/definitions/definitions.go",
        "patchSetId": 16
      },
      "lineNbr": 438,
      "author": {
        "id": 1007275
      },
      "writtenOn": "2025-08-06T10:51:10Z",
      "side": 1,
      "message": "perhaps a little more readable with a helper:\n\n```\n    printf :\u003d func(f string, a ...any) {\n        fmt.Printf(\"%*s%s\\n\", depth*3, \"\", fmt.Sprintf(f, a...))\n    }\n```",
      "revId": "99e06d5ea1a23957f7c53c4c03961e272c762569",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "e9e07358_6903f20a",
        "filename": "internal/lsp/definitions/definitions.go",
        "patchSetId": 16
      },
      "lineNbr": 438,
      "author": {
        "id": 1038145
      },
      "writtenOn": "2025-08-06T15:41:17Z",
      "side": 1,
      "message": "Yes, that\u0027s a lot nicer!",
      "parentUuid": "c3440dae_d3e1acf7",
      "revId": "99e06d5ea1a23957f7c53c4c03961e272c762569",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "fa464a85_41e76091",
        "filename": "internal/lsp/definitions/definitions.go",
        "patchSetId": 16
      },
      "lineNbr": 510,
      "author": {
        "id": 1007275
      },
      "writtenOn": "2025-08-06T15:44:07Z",
      "side": 1,
      "message": "```suggestion\n// eval evaluates the lexicalScope lazily. Evaluation is not\n```",
      "revId": "99e06d5ea1a23957f7c53c4c03961e272c762569",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "8264b00c_4fa2f175",
        "filename": "internal/lsp/definitions/definitions.go",
        "patchSetId": 16
      },
      "lineNbr": 510,
      "author": {
        "id": 1038145
      },
      "writtenOn": "2025-08-07T12:29:52Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "fa464a85_41e76091",
      "revId": "99e06d5ea1a23957f7c53c4c03961e272c762569",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6e20e14f_5bcbd58b",
        "filename": "internal/lsp/definitions/definitions.go",
        "patchSetId": 16
      },
      "lineNbr": 511,
      "author": {
        "id": 1007275
      },
      "writtenOn": "2025-08-06T15:44:07Z",
      "side": 1,
      "message": "called before? called after?",
      "revId": "99e06d5ea1a23957f7c53c4c03961e272c762569",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "a167642b_bf1b1119",
        "filename": "internal/lsp/definitions/definitions.go",
        "patchSetId": 16
      },
      "lineNbr": 511,
      "author": {
        "id": 1038145
      },
      "writtenOn": "2025-08-07T12:29:52Z",
      "side": 1,
      "message": "Just testing. Done.",
      "parentUuid": "6e20e14f_5bcbd58b",
      "revId": "99e06d5ea1a23957f7c53c4c03961e272c762569",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9f35104f_7edb7686",
        "filename": "internal/lsp/definitions/definitions.go",
        "patchSetId": 16
      },
      "lineNbr": 548,
      "author": {
        "id": 1007275
      },
      "writtenOn": "2025-08-06T15:44:07Z",
      "side": 1,
      "message": "I don\u0027t _think_ there\u0027s any need to invoke Canonical here.",
      "revId": "99e06d5ea1a23957f7c53c4c03961e272c762569",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "6a38efab_11c518cc",
        "filename": "internal/lsp/definitions/definitions.go",
        "patchSetId": 16
      },
      "lineNbr": 548,
      "author": {
        "id": 1038145
      },
      "writtenOn": "2025-08-07T15:37:54Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "9f35104f_7edb7686",
      "revId": "99e06d5ea1a23957f7c53c4c03961e272c762569",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "84c1eecb_88b111b2",
        "filename": "internal/lsp/definitions/definitions.go",
        "patchSetId": 16
      },
      "lineNbr": 564,
      "author": {
        "id": 1007275
      },
      "writtenOn": "2025-08-06T15:44:07Z",
      "side": 1,
      "message": "Using an invalid identifier for the label seems... questionable, but maybe it\u0027s fine.",
      "revId": "99e06d5ea1a23957f7c53c4c03961e272c762569",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "a53fef75_d37b8818",
        "filename": "internal/lsp/definitions/definitions.go",
        "patchSetId": 16
      },
      "lineNbr": 564,
      "author": {
        "id": 1038145
      },
      "writtenOn": "2025-08-07T15:37:54Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "84c1eecb_88b111b2",
      "revId": "99e06d5ea1a23957f7c53c4c03961e272c762569",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b1e2372d_c089897d",
        "filename": "internal/lsp/definitions/definitions.go",
        "patchSetId": 16
      },
      "lineNbr": 565,
      "author": {
        "id": 1007275
      },
      "writtenOn": "2025-08-06T15:44:07Z",
      "side": 1,
      "message": "or just omit.",
      "revId": "99e06d5ea1a23957f7c53c4c03961e272c762569",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "41b2487e_f4d4b40c",
        "filename": "internal/lsp/definitions/definitions.go",
        "patchSetId": 16
      },
      "lineNbr": 565,
      "author": {
        "id": 1038145
      },
      "writtenOn": "2025-08-07T12:29:52Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "b1e2372d_c089897d",
      "revId": "99e06d5ea1a23957f7c53c4c03961e272c762569",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c8e6cb4b_ae23ed71",
        "filename": "internal/lsp/definitions/definitions.go",
        "patchSetId": 16
      },
      "lineNbr": 604,
      "author": {
        "id": 1007275
      },
      "writtenOn": "2025-08-06T15:44:07Z",
      "side": 1,
      "message": "What about the function (n.Fun) itself?",
      "revId": "99e06d5ea1a23957f7c53c4c03961e272c762569",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "eb011272_0dc9f768",
        "filename": "internal/lsp/definitions/definitions.go",
        "patchSetId": 16
      },
      "lineNbr": 604,
      "author": {
        "id": 1038145
      },
      "writtenOn": "2025-08-07T15:37:54Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "c8e6cb4b_ae23ed71",
      "revId": "99e06d5ea1a23957f7c53c4c03961e272c762569",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "07fb79b2_d1fa6804",
        "filename": "internal/lsp/definitions/definitions.go",
        "patchSetId": 16
      },
      "lineNbr": 763,
      "author": {
        "id": 1007275
      },
      "writtenOn": "2025-08-06T15:44:07Z",
      "side": 1,
      "message": "I might be missing something here, but ISTM this could probably use some special handling for when the argument is a string literal. For example, when a field isn\u0027t a valid identifier, it\u0027s not possible to write a reference to it as a selector: it must be an index expression.\n\nFor example:\n\n```\n   x: \"a b\": z: 5\n   y: x[\"a b\"].z\n```\nthe `.z` reference should probably end up at the `z: 5` field, but I suspect it won\u0027t.\n\nFeel free to add a TODO or a comment explaining why this does actually work as above.",
      "revId": "99e06d5ea1a23957f7c53c4c03961e272c762569",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "1a9c4ca2_1b999aea",
        "filename": "internal/lsp/definitions/definitions.go",
        "patchSetId": 16
      },
      "lineNbr": 763,
      "author": {
        "id": 1038145
      },
      "writtenOn": "2025-08-07T15:52:50Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "07fb79b2_d1fa6804",
      "revId": "99e06d5ea1a23957f7c53c4c03961e272c762569",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a5a074ef_175c6c8d",
        "filename": "internal/lsp/rangeset/rangeset.go",
        "patchSetId": 16
      },
      "lineNbr": 85,
      "author": {
        "id": 1007275
      },
      "writtenOn": "2025-08-06T15:44:07Z",
      "side": 1,
      "message": "Maybe add a perf TODO to avoid the allocation if the slice isn\u0027t growing in length?\nI think it wouldn\u0027t be hard to reuse the existing slice.\n\nIn fact, how about just doing it? something like this perhaps?\n\n```\n    rs.ranges \u003d rs.ranges[:i]\n    rs.ranges \u003d slices.Grow(rs.ranges, 1+len(suffix))\n    rs.ranges \u003d rs.ranges[:len(prefix)+1+len(suffix))\n    copy(rs.ranges[i+1:], suffix)\n    rs.ranges[i] \u003d newRange\n```\n\nI think this could potentially be a significant improvement for the (perhaps most common?) case that non-overlapping increasing ranges are added sequentially in order, in which case it\u0027ll be equivalent to append I think.",
      "revId": "99e06d5ea1a23957f7c53c4c03961e272c762569",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5eba3077_37f7d4a6",
        "filename": "internal/lsp/rangeset/rangeset.go",
        "patchSetId": 16
      },
      "lineNbr": 85,
      "author": {
        "id": 1038145
      },
      "writtenOn": "2025-08-06T16:03:47Z",
      "side": 1,
      "message": "Completely agree. BTW, this is where this code came from https://g.co/gemini/share/154f705da179\nPretty sure collectively we\u0027ve spent more time on this than if I\u0027d just written it manually from scratch.",
      "parentUuid": "a5a074ef_175c6c8d",
      "revId": "99e06d5ea1a23957f7c53c4c03961e272c762569",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "5f84ca40_ac5cb8de",
        "filename": "internal/lsp/rangeset/rangeset.go",
        "patchSetId": 16
      },
      "lineNbr": 85,
      "author": {
        "id": 1038145
      },
      "writtenOn": "2025-08-07T11:12:12Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "5eba3077_37f7d4a6",
      "revId": "99e06d5ea1a23957f7c53c4c03961e272c762569",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    }
  ]
}