{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "a3b15d83_d6da603a",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1007275
      },
      "writtenOn": "2024-10-10T16:58:18Z",
      "side": 1,
      "message": "Sorry for the delay in review here. Thanks to much for your contribution.\n\nI really like the direction of this CL, but it doesn\u0027t _quite_ hit the spot.\n\nAs an example of where it doesn\u0027t quite work as it should/could:\n\n```\n{\n    \"$schema\": \"https://json-schema.org/draft/2019-09/schema\",\n    \"$defs\": {\n        \"foo\": {\n            \"anyOf\": [\n                {\n                \t\"type\": \"object\"\n                },\n                {\n                \t\"type\": \"string\"\n                }\n            ]\n        }\n    },\n    \"$ref\": \"#/$defs/foo\"\n}\n```\n\nThis results in the following JSON Schema:\n\n```\n@jsonschema(schema\u003d\"https://json-schema.org/draft/2019-09/schema\")\n#foo\n#foo: matchN(\u003e\u003d1, [{\n\t...\n}, string])\n```\n\nbut that\u0027s not quite right because arguments to functions are not closed even though the function argument appears within a closed schema, so the ellipsis is redundant.\n\nFor example, the following schema validates OK:\n\n```\n#x: matchN(1, [{}])\n#x \u0026 {a: 0}\n```\n\nbut... this is a whole can of worms, because playing with this made me realise that the existing logic gets closedness wrong in places. For example the current logic gets this schema wrong:\n\n```\n{\n    \"$schema\": \"https://json-schema.org/draft/2019-09/schema\",\n    \"$defs\": {\n        \"foo\": {\n            \"anyOf\": [\n                {\n                \t\"type\": \"object\",\n                \t\"additionalProperties\": false\n                },\n                {\n                \t\"type\": \"string\"\n                }\n            ]\n        }\n    },\n    \"$ref\": \"#/$defs/foo\"\n}\n```\n\nIt produces the same result as before, even though the struct _should_ be closed!\n\nSo to fix all of this, I think we should fix the existing logic so it works correctly in the above case, also addressing the \"TODO: may need to explicitly close\" comment in decode.go, and only then address the unnecessary ellipses issue, which is more of a appearance thing than anything else.\n\nIn general, I think the caller of `decoder.schema` or `decoder.schemaState` probably needs to make it known whether the resulting schema will be used in a definition context or not.\n\nAn alternative possibility might be to include ellipses anyway when generating but implement a second pass (via `astutil.Apply`) which processes the entire AST to remove unnecessary ellipses. That might be easier and result in simpler code and better results. It could also be done as a final step _outside_ of `encoding/jsonschema` and invoked by `cmd/cue`, which I _think_ could address your \"It is not trivial to determine whether the decoded schema is referenced as a definition\" caveat too. If we do that, then the \"right\" default approach would be to assume that we _are_ decoding into a definition, removing the need for the `DecodeAsDefinition` configuration option. Perhaps the redundant-ellipsis-removal function could go into the `astutil` package, although maybe it\u0027s not generally useful enough for that.\n\nWDYT?",
      "revId": "9ee4cf960107ad83353d0f574262dae59f5dccfd",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "99eeb9e4_b4c2ee73",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1037721
      },
      "writtenOn": "2024-10-12T03:39:29Z",
      "side": 1,
      "message": "\u003e arguments to functions are not closed even though the function argument appears within a closed schema\n\nThank you for this information.\n\n\u003e playing with this made me realise that the existing logic gets closedness wrong in places\n\nWhile implementing this PR, I also realized that the current logic does not handle closeness properly. I originally planned to submit a follow-up PR to address this issue later.\n\n\u003e implement a second pass (via astutil.Apply) which processes the entire AST to remove unnecessary ellipses.\n\nI really like this idea, and I will take a closer look at it to see if it can solve the closeness issue as a whole, and then update the PR or submit new PRs later.",
      "parentUuid": "a3b15d83_d6da603a",
      "revId": "9ee4cf960107ad83353d0f574262dae59f5dccfd",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "c63f264f_a73da65f",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1037721
      },
      "writtenOn": "2024-10-22T07:14:40Z",
      "side": 1,
      "message": "I have submitted another WIP CL(https://review.gerrithub.io/c/cue-lang/cue/+/1202854) using a second pass approach. It uses a sentinel attribute to mark closed struct in the first pass and updates the AST to close the structs and remove redundant ellipses in the second pass.\n\nWe still need to invoke the second pass inside `encoding/jsonschema`; otherwise, the output of `encoding/jsonschema` will contain the sentinel attributes and not handle closeness at all. If we want to delay the second pass until the `--path` is parsed, we also need a config option to control it.\n\n\u003e If we do that, then the \"right\" default approach would be to assume that we are decoding into a definition, removing the need for the `DecodeAsDefinition` configuration option.\n\nTo manage closeness accurately, the second pass must determine if the schema will be used in a definition context. If we assume decoding into a definition by default, using `cue import` without the `-l` flag cannot correctly close structs.\n\nAs an alternative approach, we can explicitly close the top-level value in the second pass. Doing so allows us to use the output in all contexts, ensuring it accurately handles closeness according to the input JSON schema. And we can avoid new configuration options. The disadvantage is that we may have a redundant close() at the top-level structure, for example, when decoding into a definition. What do you think about it?",
      "parentUuid": "99eeb9e4_b4c2ee73",
      "revId": "9ee4cf960107ad83353d0f574262dae59f5dccfd",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "32c4cd21_b2dde596",
        "filename": "cmd/cue/cmd/common.go",
        "patchSetId": 1
      },
      "lineNbr": 521,
      "author": {
        "id": 1037721
      },
      "writtenOn": "2024-10-03T17:30:13Z",
      "side": 1,
      "message": "It is not trivial to determine whether the decoded schema is referenced as a definition because CUE allows expressions passed in --path flags. The approach used here is not accurate if paths contain any expressions.",
      "range": {
        "startLine": 518,
        "startChar": 0,
        "endLine": 521,
        "endChar": 2
      },
      "revId": "9ee4cf960107ad83353d0f574262dae59f5dccfd",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e73b78b3_2137c7d6",
        "filename": "cmd/cue/cmd/common.go",
        "patchSetId": 1
      },
      "lineNbr": 521,
      "author": {
        "id": 1007275
      },
      "writtenOn": "2024-10-10T16:58:18Z",
      "side": 1,
      "message": "How about including your remark above as a comment in the source?",
      "parentUuid": "32c4cd21_b2dde596",
      "range": {
        "startLine": 518,
        "startChar": 0,
        "endLine": 521,
        "endChar": 2
      },
      "revId": "9ee4cf960107ad83353d0f574262dae59f5dccfd",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "389978d6_3480ed2c",
        "filename": "internal/encoding/encoding.go",
        "patchSetId": 1
      },
      "lineNbr": 153,
      "author": {
        "id": 1007275
      },
      "writtenOn": "2024-10-10T16:58:18Z",
      "side": 1,
      "message": "```suggestion\n\t// DecodeAsDefinition specifies whether the decoded JSON Schema\n\t// will be placed into a definition (i.e. whether the result\n\t// will be recursively closed or not).\n\tDecodeAsDefinition bool\n```\n\n?",
      "revId": "9ee4cf960107ad83353d0f574262dae59f5dccfd",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    }
  ],
  "submitRequirementResults": [
    {
      "submitRequirement": {
        "name": "Code-Review",
        "description": {
          "value": "At least one Code-Review+2 is required. Self review is not allowed, except for Marcel."
        },
        "applicabilityExpression": {},
        "submittabilityExpression": {
          "expressionString": "label:Code-Review\u003dMAX,user\u003dnon_uploader OR label:Code-Review\u003dMAX,user\u003dmpvl@gmail.com"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {},
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"label:Code-Review=MAX,user=non_uploader OR label:Code-Review=MAX,user=mpvl@gmail.com"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["label:Code-Review=MAX,user=non_uploader","label:Code-Review=MAX,user=mpvl@gmail.com"]}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "9ee4cf960107ad83353d0f574262dae59f5dccfd",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Do-Not-Review",
        "description": {
          "value": "Changes that have DO NOT REVIEW in their commit message are not submittable."
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "message:\"^.*(D|d)(O|o) (N|n)(O|o)(T|t) (R|r)(E|e)(V|v)(I|i)(E|e)(W|w).*\""
          }
        },
        "submittabilityExpression": {
          "expressionString": "is:false"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": false
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"message:\"^.*(D|d)(O|o) (N|n)(O|o)(T|t) (R|r)(E|e)(V|v)(I|i)(E|e)(W|w).*\""},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["message:\"^.*(D|d)(O|o) (N|n)(O|o)(T|t) (R|r)(E|e)(V|v)(I|i)(E|e)(W|w).*\""]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:false"},"status":"NOT_EVALUATED","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":[]}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "9ee4cf960107ad83353d0f574262dae59f5dccfd",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Do-Not-Submit",
        "description": {
          "value": "Changes that have DO NOT SUBMIT in their commit message are not submittable."
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "message:\"^.*(D|d)(O|o) (N|n)(O|o)(T|t) (S|s)(U|u)(B|b)(M|m)(I|i)(T|t).*\""
          }
        },
        "submittabilityExpression": {
          "expressionString": "is:false"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": false
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"message:\"^.*(D|d)(O|o) (N|n)(O|o)(T|t) (S|s)(U|u)(B|b)(M|m)(I|i)(T|t).*\""},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["message:\"^.*(D|d)(O|o) (N|n)(O|o)(T|t) (S|s)(U|u)(B|b)(M|m)(I|i)(T|t).*\""]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:false"},"status":"NOT_EVALUATED","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":[]}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "9ee4cf960107ad83353d0f574262dae59f5dccfd",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "No-Holds",
        "description": {
          "value": "Changes with a Hold+1 vote are not submittable."
        },
        "applicabilityExpression": {},
        "submittabilityExpression": {
          "expressionString": "NOT label:Hold\u003d1"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": false
      },
      "applicabilityExpressionResult": {},
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"NOT label:Hold=1"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["label:Hold=1"]}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "9ee4cf960107ad83353d0f574262dae59f5dccfd",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "TryBot-Result",
        "description": {
          "value": "TryBot-Result+1 is required. Unity-Result is not, as intentional breakages can happen. Can be bypassed by Chief Cueckoo with Code-Review+2."
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "-branch:refs/meta/config"
          }
        },
        "submittabilityExpression": {
          "expressionString": "label:TryBot-Result\u003dMAX OR label:Code-Review\u003dMAX,user\u003dchief.cueckoo@gmail.com"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"-branch:refs/meta/config"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["branch:refs/meta/config"]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"label:TryBot-Result=MAX OR label:Code-Review=MAX,user=chief.cueckoo@gmail.com"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["label:TryBot-Result=MAX","label:Code-Review=MAX,user=chief.cueckoo@gmail.com"]}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "9ee4cf960107ad83353d0f574262dae59f5dccfd",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    }
  ]
}