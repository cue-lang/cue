{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "99d7a87e_809caccb",
        "filename": "/COMMIT_MSG",
        "patchSetId": 10
      },
      "lineNbr": 7,
      "author": {
        "id": 1038145
      },
      "writtenOn": "2025-03-17T12:12:57Z",
      "side": 1,
      "message": "\"a\" flat dynamic closedness?",
      "revId": "a159c2e30179964fe09d4227a7ba40bd595b07ae",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "6cc78a76_091f4fd4",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 10
      },
      "lineNbr": 0,
      "author": {
        "id": 1038145
      },
      "writtenOn": "2025-03-17T12:12:57Z",
      "side": 1,
      "message": "So far, I\u0027ve looked through everything *apart* from typocheck.",
      "revId": "a159c2e30179964fe09d4227a7ba40bd595b07ae",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "60f1dd86_e9b9fd96",
        "filename": "internal/core/adt/conjunct.go",
        "patchSetId": 10
      },
      "lineNbr": 295,
      "author": {
        "id": 1038145
      },
      "writtenOn": "2025-03-17T12:12:57Z",
      "side": 1,
      "message": "I think you don\u0027t need both this line and line 270.",
      "revId": "a159c2e30179964fe09d4227a7ba40bd595b07ae",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "3a624812_6100e2b9",
        "filename": "internal/core/adt/conjunct.go",
        "patchSetId": 10
      },
      "lineNbr": 295,
      "author": {
        "id": 1013536
      },
      "writtenOn": "2025-03-18T11:46:47Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "60f1dd86_e9b9fd96",
      "revId": "a159c2e30179964fe09d4227a7ba40bd595b07ae",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "06e83c2d_8848e224",
        "filename": "internal/core/adt/disjunct2.go",
        "patchSetId": 10
      },
      "lineNbr": 859,
      "author": {
        "id": 1038145
      },
      "writtenOn": "2025-03-17T12:12:57Z",
      "side": 1,
      "message": "I do find these two functions confusing in their implementation. It\u0027s not clear to me (a) when would I use one of these functions but not the other? (this really stems from the fact it\u0027s never been clear to me what difference you imply when you talk of a disjunct vs a disjunction). (b) why testing BaseValue for a *Disjunction is right in one, but *Vertex is right in the other.",
      "revId": "a159c2e30179964fe09d4227a7ba40bd595b07ae",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d125de34_e2a85952",
        "filename": "internal/core/adt/disjunct2.go",
        "patchSetId": 10
      },
      "lineNbr": 859,
      "author": {
        "id": 1013536
      },
      "writtenOn": "2025-03-18T11:46:47Z",
      "side": 1,
      "message": "given `foo: x|y`, `foo` has a disjunction value, whereas `x` and `y` are disjuncts of this disjunction.\n\nAdded documentation.",
      "parentUuid": "06e83c2d_8848e224",
      "revId": "a159c2e30179964fe09d4227a7ba40bd595b07ae",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "46366377_909bde84",
        "filename": "internal/core/adt/disjunct2.go",
        "patchSetId": 10
      },
      "lineNbr": 859,
      "author": {
        "id": 1038145
      },
      "writtenOn": "2025-03-18T12:04:36Z",
      "side": 1,
      "message": "Thank you - that makes sense. I guess I always think of `x` and `y` as _branches_ of the disjunction.",
      "parentUuid": "d125de34_e2a85952",
      "revId": "a159c2e30179964fe09d4227a7ba40bd595b07ae",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7b76e793_276ea3d8",
        "filename": "internal/core/adt/eval.go",
        "patchSetId": 10
      },
      "lineNbr": 1169,
      "author": {
        "id": 1038145
      },
      "writtenOn": "2025-03-17T12:12:57Z",
      "side": 1,
      "message": "I think you\u0027ve used the field name hasEllipsis before, which I find much more descriptive. Why is it more useful to name it isTotal here?",
      "revId": "a159c2e30179964fe09d4227a7ba40bd595b07ae",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "f0a27aa1_40b4c69f",
        "filename": "internal/core/adt/eval.go",
        "patchSetId": 10
      },
      "lineNbr": 1169,
      "author": {
        "id": 1013536
      },
      "writtenOn": "2025-03-18T11:46:47Z",
      "side": 1,
      "message": "Actually, there as an isTotal in closeContext before, which used to combine various aspects, including ellipsis, but also patterns that cover all fields.\n\nIn fact, isTotal is no longer used at all, it seems. Replacing it with HasEllipsis results in more diffs with V2. Not using it at all results in strictly less diffs with V2, so just removed it.",
      "parentUuid": "7b76e793_276ea3d8",
      "revId": "a159c2e30179964fe09d4227a7ba40bd595b07ae",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a5808781_f1bb0ee9",
        "filename": "internal/core/adt/expr.go",
        "patchSetId": 10
      },
      "lineNbr": 1001,
      "author": {
        "id": 1038145
      },
      "writtenOn": "2025-03-17T12:12:57Z",
      "side": 1,
      "message": "was it deliberate to keep these newly-commented-out lines?",
      "revId": "a159c2e30179964fe09d4227a7ba40bd595b07ae",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "94e3a4b5_add6c507",
        "filename": "internal/core/adt/expr.go",
        "patchSetId": 10
      },
      "lineNbr": 1001,
      "author": {
        "id": 1013536
      },
      "writtenOn": "2025-03-18T11:46:47Z",
      "side": 1,
      "message": "Either way, but as it is not really used at the moment, it seemed safer to disable. Less moving parts. Added a TODO.",
      "parentUuid": "a5808781_f1bb0ee9",
      "revId": "a159c2e30179964fe09d4227a7ba40bd595b07ae",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "402da2f3_9a0d7a2d",
        "filename": "internal/core/adt/typocheck.go",
        "patchSetId": 10
      },
      "lineNbr": 76,
      "author": {
        "id": 1038145
      },
      "writtenOn": "2025-03-17T15:12:52Z",
      "side": 1,
      "message": "I think in general, this documentation would benefit from worked examples. I find it quite hard to follow and I think worked examples would help.\n\nE.g.\n\n\u003e When a node is unified with a definition all (sub)nodes...\n\n_which_ subnodes? Subnodes of the struct, or the definition, or the result of the unification?\n\n\u003e Once a node finished processing, it is checked that all (sub)nodes adhere to this schema by checking that is sufficient tagged evidence.\n\nI think either some words are missing there, or maybe it could be reworded?",
      "revId": "a159c2e30179964fe09d4227a7ba40bd595b07ae",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c492f482_a0d26d71",
        "filename": "internal/core/adt/typocheck.go",
        "patchSetId": 10
      },
      "lineNbr": 76,
      "author": {
        "id": 1013536
      },
      "writtenOn": "2025-03-18T11:46:47Z",
      "side": 1,
      "message": "Reworded and added some examples.",
      "parentUuid": "402da2f3_9a0d7a2d",
      "revId": "a159c2e30179964fe09d4227a7ba40bd595b07ae",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "e6c06045_80630807",
        "filename": "internal/core/adt/typocheck.go",
        "patchSetId": 10
      },
      "lineNbr": 76,
      "author": {
        "id": 1038145
      },
      "writtenOn": "2025-03-18T12:04:36Z",
      "side": 1,
      "message": "Very helpful, thank you.",
      "parentUuid": "c492f482_a0d26d71",
      "revId": "a159c2e30179964fe09d4227a7ba40bd595b07ae",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4499af8b_0337e9b9",
        "filename": "internal/core/adt/typocheck.go",
        "patchSetId": 10
      },
      "lineNbr": 168,
      "author": {
        "id": 1038145
      },
      "writtenOn": "2025-03-17T15:12:52Z",
      "side": 1,
      "message": "Given this is talking about replacements, I wonder if this method would be better named as `addReplacement`?",
      "revId": "a159c2e30179964fe09d4227a7ba40bd595b07ae",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "a4603061_14f86f1e",
        "filename": "internal/core/adt/typocheck.go",
        "patchSetId": 10
      },
      "lineNbr": 168,
      "author": {
        "id": 1013536
      },
      "writtenOn": "2025-03-18T11:46:47Z",
      "side": 1,
      "message": "Done.",
      "parentUuid": "4499af8b_0337e9b9",
      "revId": "a159c2e30179964fe09d4227a7ba40bd595b07ae",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f868f7eb_d99efc5d",
        "filename": "internal/core/adt/typocheck.go",
        "patchSetId": 10
      },
      "lineNbr": 175,
      "author": {
        "id": 1038145
      },
      "writtenOn": "2025-03-17T15:12:52Z",
      "side": 1,
      "message": "I think I\u0027m surprised this isn\u0027t idempotent. Do we have a proof that this will never be called multiple times with the same arguments? By testing against the contents of `n.conjunctInfo`, you could make it idempotent if needed.",
      "revId": "a159c2e30179964fe09d4227a7ba40bd595b07ae",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "68247932_d39597ec",
        "filename": "internal/core/adt/typocheck.go",
        "patchSetId": 10
      },
      "lineNbr": 175,
      "author": {
        "id": 1013536
      },
      "writtenOn": "2025-03-18T11:46:47Z",
      "side": 1,
      "message": "Why would you say it is not idempotent?",
      "parentUuid": "f868f7eb_d99efc5d",
      "revId": "a159c2e30179964fe09d4227a7ba40bd595b07ae",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "e15b6c5e_8cc4ff68",
        "filename": "internal/core/adt/typocheck.go",
        "patchSetId": 10
      },
      "lineNbr": 175,
      "author": {
        "id": 1038145
      },
      "writtenOn": "2025-03-18T12:04:36Z",
      "side": 1,
      "message": "Erm, because I\u0027m an idiot and didn\u0027t read your idempotent code correctly. Sorry!",
      "parentUuid": "68247932_d39597ec",
      "revId": "a159c2e30179964fe09d4227a7ba40bd595b07ae",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "11737522_91fae0fb",
        "filename": "internal/core/adt/typocheck.go",
        "patchSetId": 10
      },
      "lineNbr": 227,
      "author": {
        "id": 1038145
      },
      "writtenOn": "2025-03-17T15:12:52Z",
      "side": 1,
      "message": "it surprises me that if this is an embedding that _isn\u0027t_ closed then we _don\u0027t_ ignore it. I would have expected this to be `ignore \u003d true` here. What am I missing?",
      "revId": "a159c2e30179964fe09d4227a7ba40bd595b07ae",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "da441a5b_06e1c2ac",
        "filename": "internal/core/adt/typocheck.go",
        "patchSetId": 10
      },
      "lineNbr": 227,
      "author": {
        "id": 1013536
      },
      "writtenOn": "2025-03-18T11:46:47Z",
      "side": 1,
      "message": "Yes, if it isn\u0027t closed, ignore will be true.\nIf it _is_ closed, ignore will be false.",
      "parentUuid": "11737522_91fae0fb",
      "revId": "a159c2e30179964fe09d4227a7ba40bd595b07ae",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "57c9dd33_b3740929",
        "filename": "internal/core/adt/typocheck.go",
        "patchSetId": 10
      },
      "lineNbr": 227,
      "author": {
        "id": 1038145
      },
      "writtenOn": "2025-03-18T12:04:36Z",
      "side": 1,
      "message": "I suspect I\u0027m just being dumb, but I\u0027m definitely still confused by this. I would have thought if it\u0027s an embedding, we always skip checking. Let\u0027s discuss elsewhere.",
      "parentUuid": "da441a5b_06e1c2ac",
      "revId": "a159c2e30179964fe09d4227a7ba40bd595b07ae",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "35c5bfb8_93e3eada",
        "filename": "internal/core/adt/typocheck.go",
        "patchSetId": 10
      },
      "lineNbr": 306,
      "author": {
        "id": 1038145
      },
      "writtenOn": "2025-03-17T15:12:52Z",
      "side": 1,
      "message": "(typo) s$",
      "revId": "a159c2e30179964fe09d4227a7ba40bd595b07ae",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "58da1d64_8c008099",
        "filename": "internal/core/adt/typocheck.go",
        "patchSetId": 10
      },
      "lineNbr": 306,
      "author": {
        "id": 1013536
      },
      "writtenOn": "2025-03-18T11:46:47Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "35c5bfb8_93e3eada",
      "revId": "a159c2e30179964fe09d4227a7ba40bd595b07ae",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1db6038b_ec269f1a",
        "filename": "internal/core/adt/typocheck.go",
        "patchSetId": 10
      },
      "lineNbr": 328,
      "author": {
        "id": 1038145
      },
      "writtenOn": "2025-03-17T15:12:52Z",
      "side": 1,
      "message": "reference?",
      "revId": "a159c2e30179964fe09d4227a7ba40bd595b07ae",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b4a91e39_7325f520",
        "filename": "internal/core/adt/typocheck.go",
        "patchSetId": 10
      },
      "lineNbr": 328,
      "author": {
        "id": 1013536
      },
      "writtenOn": "2025-03-18T11:46:47Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "1db6038b_ec269f1a",
      "revId": "a159c2e30179964fe09d4227a7ba40bd595b07ae",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ac289b04_4c581129",
        "filename": "internal/core/adt/typocheck.go",
        "patchSetId": 10
      },
      "lineNbr": 345,
      "author": {
        "id": 1038145
      },
      "writtenOn": "2025-03-17T15:12:52Z",
      "side": 1,
      "message": "I\u0027ve seen this pair of lines at least 3 times now. I would definitely introduce a `*nodeContext.getNextDefId` method.",
      "revId": "a159c2e30179964fe09d4227a7ba40bd595b07ae",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "5da9e260_a1f3f0b2",
        "filename": "internal/core/adt/typocheck.go",
        "patchSetId": 10
      },
      "lineNbr": 345,
      "author": {
        "id": 1013536
      },
      "writtenOn": "2025-03-18T11:46:47Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "ac289b04_4c581129",
      "revId": "a159c2e30179964fe09d4227a7ba40bd595b07ae",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "35847bd0_b0409ae0",
        "filename": "internal/core/adt/typocheck.go",
        "patchSetId": 10
      },
      "lineNbr": 438,
      "author": {
        "id": 1038145
      },
      "writtenOn": "2025-03-17T15:12:52Z",
      "side": 1,
      "message": "I don\u0027t understand this block?",
      "revId": "a159c2e30179964fe09d4227a7ba40bd595b07ae",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "f0437f98_79a165ef",
        "filename": "internal/core/adt/typocheck.go",
        "patchSetId": 10
      },
      "lineNbr": 438,
      "author": {
        "id": 1013536
      },
      "writtenOn": "2025-03-18T11:46:47Z",
      "side": 1,
      "message": "Ah,left over from debugging.",
      "parentUuid": "35847bd0_b0409ae0",
      "revId": "a159c2e30179964fe09d4227a7ba40bd595b07ae",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "fdb421ce_e85f9ed1",
        "filename": "internal/core/adt/typocheck.go",
        "patchSetId": 10
      },
      "lineNbr": 463,
      "author": {
        "id": 1038145
      },
      "writtenOn": "2025-03-17T15:12:52Z",
      "side": 1,
      "message": "I don\u0027t understand this \"next\" - I\u0027m not seeing any field called `next`.",
      "range": {
        "startLine": 463,
        "startChar": 13,
        "endLine": 463,
        "endChar": 17
      },
      "revId": "a159c2e30179964fe09d4227a7ba40bd595b07ae",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "9028a1b8_5da5ae1b",
        "filename": "internal/core/adt/typocheck.go",
        "patchSetId": 10
      },
      "lineNbr": 463,
      "author": {
        "id": 1013536
      },
      "writtenOn": "2025-03-18T11:46:47Z",
      "side": 1,
      "message": "Ah, I changed this to a relative value called size later. Updated comments.",
      "parentUuid": "fdb421ce_e85f9ed1",
      "range": {
        "startLine": 463,
        "startChar": 13,
        "endLine": 463,
        "endChar": 17
      },
      "revId": "a159c2e30179964fe09d4227a7ba40bd595b07ae",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ee7e0308_e5875ed9",
        "filename": "internal/core/adt/typocheck.go",
        "patchSetId": 10
      },
      "lineNbr": 466,
      "author": {
        "id": 1038145
      },
      "writtenOn": "2025-03-17T15:12:52Z",
      "side": 1,
      "message": "You could add methods `reqSets.current() (head reqSet, nonHead []reqSet)` and `reqSets.next() reqSets` which might usefully abstract out the logic which appears in a few places for navigating over this flattened structure.",
      "revId": "a159c2e30179964fe09d4227a7ba40bd595b07ae",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f166869e_5ca3bfb3",
        "filename": "internal/core/adt/typocheck.go",
        "patchSetId": 10
      },
      "lineNbr": 466,
      "author": {
        "id": 1013536
      },
      "writtenOn": "2025-03-18T11:46:47Z",
      "side": 1,
      "message": "Hmmm, not sure if that is worth it. That will be slower (returns two slices, instead of just incrementing a counter, and not all that much clearer: I don\u0027t think this abstraction applies everywhere, and then you basically end up with multiple implementations or different approaches.",
      "parentUuid": "ee7e0308_e5875ed9",
      "revId": "a159c2e30179964fe09d4227a7ba40bd595b07ae",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "2d1c7c47_e3caef65",
        "filename": "internal/core/adt/typocheck.go",
        "patchSetId": 10
      },
      "lineNbr": 466,
      "author": {
        "id": 1038145
      },
      "writtenOn": "2025-03-18T12:04:36Z",
      "side": 1,
      "message": "Yeah, I thought you\u0027d say that. Ok - if this is performance-critical.",
      "parentUuid": "f166869e_5ca3bfb3",
      "revId": "a159c2e30179964fe09d4227a7ba40bd595b07ae",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "10426c15_0b512aa4",
        "filename": "internal/core/adt/typocheck.go",
        "patchSetId": 10
      },
      "lineNbr": 568,
      "author": {
        "id": 1038145
      },
      "writtenOn": "2025-03-17T15:12:52Z",
      "side": 1,
      "message": "Hmm, I\u0027m failing to follow this. I\u0027d have thought you\u0027d want to calculate the transitive closure of your replacementIds. It\u0027s highly likely I\u0027m misread this, but I think there\u0027s a risk here you recalculate the same transitive paths several times. E.g, imagine you have the replacements {[1-\u003e3], [2-\u003e3], [3-\u003e4], [4-\u003e5]}. If you call this twice, the first time x.id is 1, the second time x.id is 2, wouldn\u0027t you need to find and follow the 3-\u003e4 and 4-\u003e5 replacements both times?\n\nIt\u0027s certainly not clear to me that calculating the complete transitive closure is better (O(n^2) IIRC), I think I just want to better understand the likely scenarios here.",
      "revId": "a159c2e30179964fe09d4227a7ba40bd595b07ae",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "eb78c76c_749f1b9a",
        "filename": "internal/core/adt/typocheck.go",
        "patchSetId": 10
      },
      "lineNbr": 568,
      "author": {
        "id": 1013536
      },
      "writtenOn": "2025-03-18T11:46:47Z",
      "side": 1,
      "message": "Yes, I expect this code to be O(n^2), but didn\u0027t want to optimize it yet until it was necessary.\n\nIt does not appear to be an issue now, and if we move to the #A... approach, for instance, some of these data structures might change or render such optimizations moot otherwise.\n\nIn general, I can think of various very different kinds of optimizations that are possible here. I\u0027m not sure yet which one would be best or if any of them is on the critical path.\n\nAdded TODO.",
      "parentUuid": "10426c15_0b512aa4",
      "revId": "a159c2e30179964fe09d4227a7ba40bd595b07ae",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "41637da0_5e69f985",
        "filename": "internal/core/adt/typocheck.go",
        "patchSetId": 10
      },
      "lineNbr": 640,
      "author": {
        "id": 1038145
      },
      "writtenOn": "2025-03-17T15:12:52Z",
      "side": 1,
      "message": "I don\u0027t understand this line.",
      "revId": "a159c2e30179964fe09d4227a7ba40bd595b07ae",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "73f0ebef_40a7ed66",
        "filename": "internal/core/adt/typocheck.go",
        "patchSetId": 10
      },
      "lineNbr": 640,
      "author": {
        "id": 1013536
      },
      "writtenOn": "2025-03-18T11:46:47Z",
      "side": 1,
      "message": "Debugging leftover.",
      "parentUuid": "41637da0_5e69f985",
      "revId": "a159c2e30179964fe09d4227a7ba40bd595b07ae",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    }
  ]
}