{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "c37d755c_b32e318f",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1037639
      },
      "writtenOn": "2024-03-22T12:17:46Z",
      "side": 1,
      "message": "PTAL.",
      "revId": "a9fb13064162c2880a274e1a649fb5fc11e20d6a",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c8b297e2_d5c6922e",
        "filename": "mod/modconfig/modconfig.go",
        "patchSetId": 2
      },
      "lineNbr": 280,
      "author": {
        "id": 1017720
      },
      "writtenOn": "2024-03-21T12:51:28Z",
      "side": 1,
      "message": "this `t.logins` is unfortunately racy again - it reads not just the pointer itself, but the contents too.",
      "range": {
        "startLine": 280,
        "startChar": 41,
        "endLine": 280,
        "endChar": 49
      },
      "revId": "a9fb13064162c2880a274e1a649fb5fc11e20d6a",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ed5ae01f_d899337f",
        "filename": "mod/modconfig/modconfig.go",
        "patchSetId": 2
      },
      "lineNbr": 280,
      "author": {
        "id": 1017720
      },
      "writtenOn": "2024-03-21T12:51:28Z",
      "side": 1,
      "message": "`return cueconfig.WriteLogins(...)`",
      "revId": "a9fb13064162c2880a274e1a649fb5fc11e20d6a",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f710181c_41698242",
        "filename": "mod/modconfig/modconfig.go",
        "patchSetId": 2
      },
      "lineNbr": 280,
      "author": {
        "id": 1037639
      },
      "writtenOn": "2024-03-21T13:37:17Z",
      "side": 1,
      "message": "That\u0027s a bug :) It should have been `logins`.",
      "parentUuid": "c8b297e2_d5c6922e",
      "range": {
        "startLine": 280,
        "startChar": 41,
        "endLine": 280,
        "endChar": 49
      },
      "revId": "a9fb13064162c2880a274e1a649fb5fc11e20d6a",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4f2da32a_a0d12bfb",
        "filename": "mod/modconfig/modconfig.go",
        "patchSetId": 2
      },
      "lineNbr": 280,
      "author": {
        "id": 1017720
      },
      "writtenOn": "2024-03-21T14:12:24Z",
      "side": 1,
      "message": "FWIW even if you don\u0027t access the field, you\u0027re still accessing the map contents, and I think that may still be racy. remember that a map value is effectively a pointer.",
      "parentUuid": "f710181c_41698242",
      "range": {
        "startLine": 280,
        "startChar": 41,
        "endLine": 280,
        "endChar": 49
      },
      "revId": "a9fb13064162c2880a274e1a649fb5fc11e20d6a",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "99c74215_9ad09a3d",
        "filename": "mod/modconfig/modconfig.go",
        "patchSetId": 2
      },
      "lineNbr": 280,
      "author": {
        "id": 1037639
      },
      "writtenOn": "2024-03-21T16:23:08Z",
      "side": 1,
      "message": "The idea here is to never modify the map after it\u0027s created, so it\u0027s read-only and safe to use without locking. When it needs to change, a new map is created and \"published\" via `t.logins`. So once I get the pointer from `t.logins`, it\u0027s safe to dereference into the map.",
      "parentUuid": "4f2da32a_a0d12bfb",
      "range": {
        "startLine": 280,
        "startChar": 41,
        "endLine": 280,
        "endChar": 49
      },
      "revId": "a9fb13064162c2880a274e1a649fb5fc11e20d6a",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "5d87638b_5608ff26",
        "filename": "mod/modconfig/modconfig.go",
        "patchSetId": 2
      },
      "lineNbr": 280,
      "author": {
        "id": 1037639
      },
      "writtenOn": "2024-03-22T12:17:46Z",
      "side": 1,
      "message": "Fixed.",
      "parentUuid": "99c74215_9ad09a3d",
      "range": {
        "startLine": 280,
        "startChar": 41,
        "endLine": 280,
        "endChar": 49
      },
      "revId": "a9fb13064162c2880a274e1a649fb5fc11e20d6a",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "edee35e9_c724dcdb",
        "filename": "mod/modconfig/modconfig.go",
        "patchSetId": 2
      },
      "lineNbr": 280,
      "author": {
        "id": 1037639
      },
      "writtenOn": "2024-03-22T12:17:46Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "ed5ae01f_d899337f",
      "revId": "a9fb13064162c2880a274e1a649fb5fc11e20d6a",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3750eb40_b87d7738",
        "filename": "mod/modconfig/modconfig.go",
        "patchSetId": 2
      },
      "lineNbr": 370,
      "author": {
        "id": 1017720
      },
      "writtenOn": "2024-03-21T12:51:28Z",
      "side": 1,
      "message": "https://pkg.go.dev/sync/atomic#Pointer would be both easier and faster - e.g. you can use separate Load and CompareAndSwap calls",
      "revId": "a9fb13064162c2880a274e1a649fb5fc11e20d6a",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c713c4cc_11a6b48a",
        "filename": "mod/modconfig/modconfig.go",
        "patchSetId": 2
      },
      "lineNbr": 370,
      "author": {
        "id": 1037639
      },
      "writtenOn": "2024-03-21T13:37:17Z",
      "side": 1,
      "message": "We don\u0027t want faster here, we want other calls to wait while the token is being refreshed. But current solution is also not waiting, so I might as well go for the pointer solution.",
      "parentUuid": "3750eb40_b87d7738",
      "revId": "a9fb13064162c2880a274e1a649fb5fc11e20d6a",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f6b7f80d_1eebe8a8",
        "filename": "mod/modconfig/modconfig.go",
        "patchSetId": 2
      },
      "lineNbr": 370,
      "author": {
        "id": 1017720
      },
      "writtenOn": "2024-03-21T14:12:24Z",
      "side": 1,
      "message": "you\u0027re right. we _do_ want concurrent calls to wait between one another; getting more tokens would increase the load for registries, and possibly lead to errors such as rate limits or \"slow down\". surely x/oauth2 does this already, e.g. as part of the TokenSource used by its http.Client?",
      "parentUuid": "c713c4cc_11a6b48a",
      "revId": "a9fb13064162c2880a274e1a649fb5fc11e20d6a",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b44f6055_58878a5d",
        "filename": "mod/modconfig/modconfig.go",
        "patchSetId": 2
      },
      "lineNbr": 370,
      "author": {
        "id": 1037639
      },
      "writtenOn": "2024-03-22T12:17:46Z",
      "side": 1,
      "message": "In the same client instance, yes, but not between multiple instances.\nAdded a separate mutex to guard just the logins map update, should work better now.",
      "parentUuid": "f6b7f80d_1eebe8a8",
      "revId": "a9fb13064162c2880a274e1a649fb5fc11e20d6a",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f55946d0_50d11bc9",
        "filename": "mod/modconfig/modconfig.go",
        "patchSetId": 2
      },
      "lineNbr": 379,
      "author": {
        "id": 1017720
      },
      "writtenOn": "2024-03-21T12:51:28Z",
      "side": 1,
      "message": "this is a public package, so please don\u0027t expose API unless we have to - in this case I don\u0027t think we need to.",
      "revId": "a9fb13064162c2880a274e1a649fb5fc11e20d6a",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "12d124f6_a96546ac",
        "filename": "mod/modconfig/modconfig.go",
        "patchSetId": 2
      },
      "lineNbr": 379,
      "author": {
        "id": 1037639
      },
      "writtenOn": "2024-03-21T13:37:17Z",
      "side": 1,
      "message": "I thought to reuse it in `integration_test.go`. Happy to remove here. Please confirm.",
      "parentUuid": "f55946d0_50d11bc9",
      "revId": "a9fb13064162c2880a274e1a649fb5fc11e20d6a",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "10f0ffd7_1ac242a0",
        "filename": "mod/modconfig/modconfig.go",
        "patchSetId": 2
      },
      "lineNbr": 379,
      "author": {
        "id": 1017720
      },
      "writtenOn": "2024-03-21T14:12:24Z",
      "side": 1,
      "message": "I see; I\u0027m not opposed to that per se, but this being the main cue repo, I think we need to meet the bar of \"we think users will want this API\" when we expose stuff - and I don\u0027t think any CUE Go API user will need something like this.\n\nIf anything, from the user\u0027s PoV, upstream\u0027s oauth2 repo should provide something like it for convenience, e.g. https://github.com/golang/oauth2/pull/683\n\nI\u0027m not sure if there\u0027s a better solution than copy-pasting for now. at least once it\u0027s working, I doubt we will need to touch it much.",
      "parentUuid": "12d124f6_a96546ac",
      "revId": "a9fb13064162c2880a274e1a649fb5fc11e20d6a",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3d6791b4_7d55df70",
        "filename": "mod/modconfig/modconfig.go",
        "patchSetId": 2
      },
      "lineNbr": 379,
      "author": {
        "id": 1037639
      },
      "writtenOn": "2024-03-21T16:23:08Z",
      "side": 1,
      "message": "Ok that makes sense, will remove this public API for now.",
      "parentUuid": "10f0ffd7_1ac242a0",
      "revId": "a9fb13064162c2880a274e1a649fb5fc11e20d6a",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "931f683c_27f51987",
        "filename": "mod/modconfig/modconfig.go",
        "patchSetId": 2
      },
      "lineNbr": 379,
      "author": {
        "id": 1037639
      },
      "writtenOn": "2024-03-22T12:17:46Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "3d6791b4_7d55df70",
      "revId": "a9fb13064162c2880a274e1a649fb5fc11e20d6a",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    }
  ]
}