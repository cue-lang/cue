{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "5f4691a3_1816bb30",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1017720
      },
      "writtenOn": "2025-08-13T10:48:05Z",
      "side": 1,
      "message": "I don\u0027t oppose adding these APIs to our CUE module, but I do think they need to leverage the new encoding/json/jsontext.Pointer type from json/v2: https://pkg.go.dev/encoding/json/jsontext#Pointer\n\nThat is:\n* pointer constructors should return a `Pointer` type\n* `JSONPointerTokens` should be the method `Pointer.Tokens`\n* The implementation should generally reuse jsontext\u0027s code for escaping, unescaping, etc\n\nI understand that the API is only added in Go 1.25, so what we could do for the next 6 months is copy-paste the implementation with a `//go:build !go1.25` tag, and in `//go:build go1.25` tag, have an alias `type Pointer \u003d jsontext.Pointer`.\n\nFinally, did you consider adding this to `encoding/json` rather than `encoding/jsonschema`? They are useful just for JSON Schema for now, but they\u0027re JSON pointers, so perhaps the json package is a better place. And as a smaller package, it feels like a better place so that users don\u0027t have to import jsonschema unless they want to.",
      "revId": "aabe6cebad43b5c624c4b11eebafff39efd04e33",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "22bcddc7_71c09a8c",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1007275
      },
      "writtenOn": "2025-08-13T11:27:18Z",
      "side": 1,
      "message": "Done, except for the go1.25-guarded functionality, which we can add when jsontext is supported by default, as discussed online.",
      "parentUuid": "5f4691a3_1816bb30",
      "revId": "aabe6cebad43b5c624c4b11eebafff39efd04e33",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9c2fefb7_75d77b0c",
        "filename": "encoding/jsonschema/util.go",
        "patchSetId": 1
      },
      "lineNbr": 173,
      "author": {
        "id": 1017720
      },
      "writtenOn": "2025-08-13T10:48:05Z",
      "side": 1,
      "message": "how about `JSONPointerFromCUEPath`, for consistency with `JSONPointerFromTokens`? That way, they also all group/sort together in the docs.",
      "revId": "aabe6cebad43b5c624c4b11eebafff39efd04e33",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f79b834d_4ce4f220",
        "filename": "encoding/jsonschema/util.go",
        "patchSetId": 1
      },
      "lineNbr": 173,
      "author": {
        "id": 1017720
      },
      "writtenOn": "2025-08-13T10:49:00Z",
      "side": 1,
      "message": "I meant \"as opposed to `CUEPathToJSONPointer`\", of course!",
      "parentUuid": "9c2fefb7_75d77b0c",
      "revId": "aabe6cebad43b5c624c4b11eebafff39efd04e33",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b2205266_c7e999a3",
        "filename": "encoding/jsonschema/util.go",
        "patchSetId": 1
      },
      "lineNbr": 173,
      "author": {
        "id": 1007275
      },
      "writtenOn": "2025-08-13T11:27:18Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "9c2fefb7_75d77b0c",
      "revId": "aabe6cebad43b5c624c4b11eebafff39efd04e33",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    }
  ]
}