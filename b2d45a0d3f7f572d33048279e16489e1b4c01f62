{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "4cc66412_642b5147",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 6
      },
      "lineNbr": 0,
      "author": {
        "id": 1017720
      },
      "writtenOn": "2023-03-22T10:09:39Z",
      "side": 1,
      "message": "This breaks Vector on Unity. Here\u0027s the whole diff: https://clbin.com/kd2Md\n\nWorking on a minimal reproducer now. The other CLs in this stack do pass Unity normally.",
      "revId": "b2d45a0d3f7f572d33048279e16489e1b4c01f62",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "296f6d75_0b9658d6",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 6
      },
      "lineNbr": 0,
      "author": {
        "id": 1007275
      },
      "writtenOn": "2023-03-22T10:53:10Z",
      "side": 1,
      "message": "Here\u0027s another required-field anomaly: this passes `cue vet`, but I don\u0027t think it should:\n```\n#A: a!: int\n#A: #B\n\n#B: b!: int\n```",
      "revId": "b2d45a0d3f7f572d33048279e16489e1b4c01f62",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b6c8f2f1_4df612cf",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 6
      },
      "lineNbr": 0,
      "author": {
        "id": 1017723
      },
      "writtenOn": "2023-03-22T12:10:14Z",
      "side": 1,
      "message": "Unity setup is back up and running. Running trybots from this point onwards will also cause unity to run and report back.",
      "revId": "b2d45a0d3f7f572d33048279e16489e1b4c01f62",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "da58c29b_33ff1d13",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 6
      },
      "lineNbr": 0,
      "author": {
        "id": 1013536
      },
      "writtenOn": "2023-03-22T12:19:25Z",
      "side": 1,
      "message": "Yep, nice one.",
      "parentUuid": "296f6d75_0b9658d6",
      "revId": "b2d45a0d3f7f572d33048279e16489e1b4c01f62",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4be9ecad_97f6da87",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 6
      },
      "lineNbr": 0,
      "author": {
        "id": 1017720
      },
      "writtenOn": "2023-03-22T12:48:20Z",
      "side": 1,
      "message": "Took a couple of hours, but I reduced the Vector failure in Unity to:\n\n```\nexec cue eval in.cue\ncmp stdout stdout.golden\n\n-- in.cue --\n#Out: {\n\tyes: bool\n\tinput: [string]: _\n\n\tif yes {\n\t\tunused: _\n\t}\n\tfor k, _ in input {\n\t\t(k)?: _\n\t}\n}\n\nout: #Out \u0026 {\n\tyes: true\n\tinput: mode: _\n}\n-- stdout.golden --\n#Out: {\n    yes: bool\n    input: {\n        [string]: _\n    }\n\n    if yes {\n        unused: _\n    }\n    for k, _ in input {\n        (k): _\n    }\n}\nout: {\n    yes:    true\n    unused: _\n    mode:   _\n    input: {\n        mode: _\n    }\n}\n```\n\nWhen run with master (0b681f5d193a55893fdec8386f4a72a6effcebb1) it passes, but with PS6 here, it fails:\n\n```\n\u003e cmp stdout stdout.golden\n--- stdout\n+++ stdout.golden\n@@ -8,12 +8,13 @@\n         unused: _\n     }\n     for k, _ in input {\n-        (k)?: _\n+        (k): _\n     }\n }\n out: {\n     yes:    true\n     unused: _\n+    mode:   _\n     input: {\n         mode: _\n     }\n\nFAIL: /tmp/testscript1896212744/in.txtar/script.txtar:2: stdout and stdout.golden differ\n```\n\nNote that `+` is CUE master, and `-` is this CL in the diff above. It\u0027s a bit backwards in testscript at the moment.\n\nI _think_ the change in output is wanted. The input code used `(k)?:`, so the output using `(k):` seems weird. `mode:` disappearing is the same story, because as an optional field it should not show up in the output.\n\nSo I think this is the kind of Unity failure that we\u0027re OK with, and we just want to update the golden files. I don\u0027t think this should actually break Vector.",
      "revId": "b2d45a0d3f7f572d33048279e16489e1b4c01f62",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5398fb7c_adc1bfe1",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 6
      },
      "lineNbr": 0,
      "author": {
        "id": 1017720
      },
      "writtenOn": "2023-03-22T12:50:32Z",
      "side": 1,
      "message": "That said, I think we should add the reduced test case as a regression test, for the sake of \"locking in\" the desired behavior.",
      "parentUuid": "4be9ecad_97f6da87",
      "revId": "b2d45a0d3f7f572d33048279e16489e1b4c01f62",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0998dbae_aa3cec65",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 6
      },
      "lineNbr": 0,
      "author": {
        "id": 1013536
      },
      "writtenOn": "2023-03-23T07:19:17Z",
      "side": 1,
      "message": "The new behavior is correct and is in fact tested in unit tests. There were similar \"breakages\" in the old test.\n\ncmd eval does not show optional fields in data fields by default, if you add the -O flag, you\u0027ll see that the mode is actually there in the new implementation.\n\nThe problem is that the old implementation inadvertently accepted `(k)?: v`, but just ignored the `?`. Now it has meaning. An easy `cue fix` would be to remove the `?` in the vector code.",
      "parentUuid": "5398fb7c_adc1bfe1",
      "revId": "b2d45a0d3f7f572d33048279e16489e1b4c01f62",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d74c3ea2_4e648c5d",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 6
      },
      "lineNbr": 0,
      "author": {
        "id": 1013536
      },
      "writtenOn": "2023-03-23T07:34:40Z",
      "side": 1,
      "message": "I suggest we commit this in and file an issue for v0.6 to add a cue fix and/or cue version-specific behavior to disable this. Maybe the optional CUE fix mode is sufficient.",
      "revId": "b2d45a0d3f7f572d33048279e16489e1b4c01f62",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    }
  ],
  "submitRequirementResults": [
    {
      "submitRequirement": {
        "name": "Code-Review",
        "description": {
          "value": "At least one Code-Review+2 is required. Self review is not allowed, except for Marcel."
        },
        "applicabilityExpression": {},
        "submittabilityExpression": {
          "expressionString": "label:Code-Review\u003dMAX,user\u003dnon_uploader OR label:Code-Review\u003dMAX,user\u003dmpvl@gmail.com"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {},
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"label:Code-Review=MAX,user=non_uploader OR label:Code-Review=MAX,user=mpvl@gmail.com"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["label:Code-Review=MAX,user=non_uploader"],"failingAtoms":["label:Code-Review=MAX,user=mpvl@gmail.com"]}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "b2d45a0d3f7f572d33048279e16489e1b4c01f62",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Do-Not-Review",
        "description": {
          "value": "Changes that have DO NOT REVIEW in their commit message are not submittable."
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "message:\"^.*(D|d)(O|o) (N|n)(O|o)(T|t) (R|r)(E|e)(V|v)(I|i)(E|e)(W|w).*\""
          }
        },
        "submittabilityExpression": {
          "expressionString": "is:false"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": false
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"message:\"^.*(D|d)(O|o) (N|n)(O|o)(T|t) (R|r)(E|e)(V|v)(I|i)(E|e)(W|w).*\""},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["message:\"^.*(D|d)(O|o) (N|n)(O|o)(T|t) (R|r)(E|e)(V|v)(I|i)(E|e)(W|w).*\""]}
      },
      "submittabilityExpressionResult": {},
      "overrideExpressionResult": {},
      "patchSetCommitId": "b2d45a0d3f7f572d33048279e16489e1b4c01f62",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Do-Not-Submit",
        "description": {
          "value": "Changes that have DO NOT SUBMIT in their commit message are not submittable."
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "message:\"^.*(D|d)(O|o) (N|n)(O|o)(T|t) (S|s)(U|u)(B|b)(M|m)(I|i)(T|t).*\""
          }
        },
        "submittabilityExpression": {
          "expressionString": "is:false"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": false
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"message:\"^.*(D|d)(O|o) (N|n)(O|o)(T|t) (S|s)(U|u)(B|b)(M|m)(I|i)(T|t).*\""},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["message:\"^.*(D|d)(O|o) (N|n)(O|o)(T|t) (S|s)(U|u)(B|b)(M|m)(I|i)(T|t).*\""]}
      },
      "submittabilityExpressionResult": {},
      "overrideExpressionResult": {},
      "patchSetCommitId": "b2d45a0d3f7f572d33048279e16489e1b4c01f62",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "No-Holds",
        "description": {
          "value": "Changes with a Hold+1 vote are not submittable."
        },
        "applicabilityExpression": {},
        "submittabilityExpression": {
          "expressionString": "NOT label:Hold\u003d1"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": false
      },
      "applicabilityExpressionResult": {},
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"NOT label:Hold=1"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["label:Hold=1"]}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "b2d45a0d3f7f572d33048279e16489e1b4c01f62",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "TryBot-Result",
        "description": {
          "value": "TryBot-Result+1 is required. Unity-Result is not, as intentional breakages can happen. Can be bypassed by Chief Cueckoo with Code-Review+2."
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "-branch:refs/meta/config"
          }
        },
        "submittabilityExpression": {
          "expressionString": "label:TryBot-Result\u003dMAX OR label:Code-Review\u003dMAX,user\u003dchief.cueckoo@gmail.com"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"-branch:refs/meta/config"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["branch:refs/meta/config"]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"label:TryBot-Result=MAX OR label:Code-Review=MAX,user=chief.cueckoo@gmail.com"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["label:TryBot-Result=MAX"],"failingAtoms":["label:Code-Review=MAX,user=chief.cueckoo@gmail.com"]}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "b2d45a0d3f7f572d33048279e16489e1b4c01f62",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    }
  ]
}