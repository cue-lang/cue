{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "27f7bfd9_e3af8236",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1017723
      },
      "writtenOn": "2022-11-10T16:55:49Z",
      "side": 1,
      "message": "So the good news is that this fixes two things related to #1969:\n\n1) the OOM error with the large config behind the reduced config that forms the basis of the test case for #1969.\n2) the actual error in the reduced repro in #1969. i.e. with this CL, that reduced repro passes like v0.4.3\n\nThe bad news: even though the large config behind #1969 no longer OOMs, I haven\u0027t actually managed to run cue eval to completion yet. I left it running for ~15 mins, it was steady at 21G of memory, but it still appeared to be \"going strong\". \n\nContrast that same configuration with v0.4.3, where it completes in ~30 seconds. \n\nMy suggestion however is that all else being well we submit this CL. It strictly improves things with respect to that config at least. We could then create an alpha.2 release and get some exposure on that.",
      "revId": "c6e5eb29482a2b4a0f1d2c8212de3dfe8afcbbee",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "7d01e2a5_9588b013",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1007275
      },
      "writtenOn": "2022-11-10T17:14:54Z",
      "side": 1,
      "message": "LGTM, although as per comments, I don\u0027t really understand what\u0027s going on here ðŸ˜Š\n",
      "revId": "c6e5eb29482a2b4a0f1d2c8212de3dfe8afcbbee",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1e60e6fe_17ef77c1",
        "filename": "internal/core/adt/expr.go",
        "patchSetId": 1
      },
      "lineNbr": 1274,
      "author": {
        "id": 1007275
      },
      "writtenOn": "2022-11-10T17:14:54Z",
      "side": 1,
      "message": "in passing: s/note/not/\n\nAlso, should this comment be next to the Unwrap call?",
      "revId": "c6e5eb29482a2b4a0f1d2c8212de3dfe8afcbbee",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "326e163a_f3985be2",
        "filename": "internal/core/adt/expr.go",
        "patchSetId": 1
      },
      "lineNbr": 1274,
      "author": {
        "id": 1013536
      },
      "writtenOn": "2022-11-11T11:29:42Z",
      "side": 1,
      "message": "The position is correct, it refers to the Unwrap done in `value`. However, I\u0027m not entirely sure what this comment means anymore other than the case that is fixed in this CL. So I\u0027ll actually entirely remove it.",
      "parentUuid": "1e60e6fe_17ef77c1",
      "revId": "c6e5eb29482a2b4a0f1d2c8212de3dfe8afcbbee",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "42362f09_c4975b44",
        "filename": "internal/core/adt/expr.go",
        "patchSetId": 1
      },
      "lineNbr": 1283,
      "author": {
        "id": 1007275
      },
      "writtenOn": "2022-11-10T17:14:54Z",
      "side": 1,
      "message": "I don\u0027t understand how this can be working (although clearly it is :) ). The docs for Unwrap say that it returns nil if the value is a list or struct, but it looks like you\u0027re checking that v is exactly one of those above, so how is v anything but nil after the Unwrap?",
      "revId": "c6e5eb29482a2b4a0f1d2c8212de3dfe8afcbbee",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f5f32a74_32f41b92",
        "filename": "internal/core/adt/expr.go",
        "patchSetId": 1
      },
      "lineNbr": 1283,
      "author": {
        "id": 1013536
      },
      "writtenOn": "2022-11-11T11:29:42Z",
      "side": 1,
      "message": "That is indeed a false comment. It returns the vertex itself if it is a list or struct.\n\nMore importantly, your comment made me realize that this code will only work for \"fatal\" errors and not for incomplete errors. I have significantly changed the code accordingly.",
      "parentUuid": "42362f09_c4975b44",
      "revId": "c6e5eb29482a2b4a0f1d2c8212de3dfe8afcbbee",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b14681d2_fbafc626",
        "filename": "internal/core/adt/expr.go",
        "patchSetId": 1
      },
      "lineNbr": 1283,
      "author": {
        "id": 1013536
      },
      "writtenOn": "2022-11-11T15:59:12Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "f5f32a74_32f41b92",
      "revId": "c6e5eb29482a2b4a0f1d2c8212de3dfe8afcbbee",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    }
  ]
}