# `cue cmd` supports referring to tasks from tool/... packages via the
# kind or $id string fields. This can result in surprising behavior
# when unmarshalling data as a regular field alongside other tasks,
# as the data can then declare further tasks to be run.

exec cue cmd injectKindOutside
stdout -count=1 '^hello$'
stdout -count=1 '^command from input$'

exec cue cmd injectDollarIdOutside
stdout -count=1 '^hello$'
stdout -count=1 '^command from input$'

exec cue cmd injectUnderscoreIdOutside
stdout -count=1 '^hello$'
! stdout '^command from input$'

exec cue cmd injectDollarIdInside
stdout -count=1 '^hello$'
! stdout '^command from input$'

exec cue cmd injectDollarIdOutsideHidden
stdout -count=1 '^hello$'
! stdout '^command from input$'

exec cue cmd useCliPrintCopy
stdout -count=1 '^hello$'

-- input_kind.json --
{"cmd": {"kind": "print",          "text": "command from input"}, "data": "hello"}
-- input_dollar_id.json --
{"cmd": {"$id":  "tool/cli.Print", "text": "command from input"}, "data": "hello"}
-- input_underscore_id.json --
{"cmd": {"_id":  "tool/cli.Print", "text": "command from input"}, "data": "hello"}
-- in_tool.cue --
package p

import (
	"tool/cli"
	"tool/file"
	"encoding/json"
)

command: injectKindOutside: {
	input: file.Read & {
		filename: "input_kind.json"
	}
	unmarshal: json.Unmarshal(input.contents)
	display: cli.Print & {
		text: unmarshal.data
	}
}
command: injectDollarIdOutside: {
	input: file.Read & {
		filename: "input_dollar_id.json"
	}
	unmarshal: json.Unmarshal(input.contents)
	display: cli.Print & {
		text: unmarshal.data
	}
}
command: injectUnderscoreIdOutside: {
	input: file.Read & {
		filename: "input_underscore_id.json"
	}
	unmarshal: json.Unmarshal(input.contents)
	display: cli.Print & {
		text: unmarshal.data
	}
}
command: injectDollarIdInside: {
	input: file.Read & {
		filename: "input_dollar_id.json"
	}
	display: cli.Print & {
		unmarshal: json.Unmarshal(input.contents)
		text: unmarshal.data
	}
}
command: injectDollarIdOutsideHidden: {
	input: file.Read & {
		filename: "input_dollar_id.json"
	}
	_unmarshal: json.Unmarshal(input.contents)
	display: cli.Print & {
		text: _unmarshal.data
	}
}

command: useCliPrintCopy: cliPrintCopy & {
	text: "hello"
}
cliPrintCopy: {
	$id: _id
	_id: *"tool/cli.Print" | "print"
	text: string
}
