exec cue exp gengotypes ./root
# ! stderr .

# Check how many files were generated, and see that it aligns with how many files we expect.
find-files .
stdout -count=3 'cue_gen.go$'
stdout -count=3 'cue_gen.go.want$'
# No Go file is generated for imported itself, as it's only loaded as part of subpackage instances.
! stdout imported${/}gen_go.cue
# No bad or unused packages should have been generated at all.
! stdout 'bad_.*${/}gen_go.cue'
! stdout 'unused.*${/}gen_go.cue'

# Check the contents of the generated files.
cmp root/cue_gen.go              root/cue_gen.go.want
cmp imported/subinst/cue_gen.go  imported/subinst/cue_gen.go.want
cmp imported/indirect/cue_gen.go imported/indirect/cue_gen.go.want

# The resulting Go should work correctly.
# TODO: for now we just check that it builds; check that all types work
# with cue.Value.Decode and cue.Context.Encode.
go build ./...

-- go.mod --
module "foo.test/bar"

go 1.22
-- cue.mod/module.cue --
module: "foo.test/bar"
language: version: "v0.11.0"
-- root/root.cue --
package root

// These should be ignored as they are not public definitions.
regular:     string
_hidden:     string
_#hiddenDef: string

#emptyStruct: {}

#localStruct: {
	// TODO(mvdan): keep the embedding on the Go side to avoid repeating types
	#embeddedStruct

	regular:   int
	optional?: int
	required!: int
	withAttr:  int @go(WithAttrChangedName)

	// withDoc is a great field.
	//
	// It deserves multiple paragraphs of documentation
	// as there is a lot to write about it.
	withDoc: int

	withInlineDoc: int // this is an inline comment

	withInnerDoc: {
		// This is documentation inside a struct, but not attached to any of its fields.

		innerDocField: int
	}
}

// Actually, this field needed even more documentation.
#localStruct: withDoc: _

#embeddedStruct: {
	embedded1: int
	{
		embedded2: int
	}
}
-- root/types.cue --
package root

import "time"

#types: {
	// The field names below are capitalized to avoid name clashes.

	Null:     null
	Bool:     bool
	Int:      int
	Float:    float
	String:   string
	Bytes:    bytes

	Number: number
	Uint:   uint
	Int8:   int8
	Rune:   rune

	IntList:  [...int]
	IntMap:   [string]: int

	Time:     time.Time
	Duration: time.Duration
}
-- root/import.cue --
package root

import (
	"foo.test/bar/imported/subinst:imported"
	"foo.test/bar/imported/unused"
)

#remoteStructs: {
	inst: imported.#InstanceStruct
}

_unusedImport: unused.#Unused
-- root/cue_gen.go.want --
// Code generated by "cue exp gengotypes"; DO NOT EDIT.

package root

import (
	"foo.test/bar/imported/subinst"
	"time"
)

type remoteStructs struct {
	Inst imported.InstanceStruct `json:"inst"`
}

type emptyStruct struct {
}

type types struct {
	Null any/* TODO: IncompleteKind: null */ `json:"Null"`

	Bool any/* TODO: IncompleteKind: bool */ `json:"Bool"`

	Int int64 `json:"Int"`

	Float any/* TODO: IncompleteKind: float */ `json:"Float"`

	String string `json:"String"`

	Bytes any/* TODO: IncompleteKind: bytes */ `json:"Bytes"`

	Number any/* TODO: IncompleteKind: number */ `json:"Number"`

	Uint int64 `json:"Uint"`

	Int8 int64 `json:"Int8"`

	Rune int64 `json:"Rune"`

	IntList []int64 `json:"IntList"`

	IntMap map[string]int64 `json:"IntMap"`

	Time time.Time `json:"Time"`

	Duration time.Duration `json:"Duration"`
}

type localStruct struct {
	Regular int64 `json:"regular"`

	Optional int64 `json:"optional,omitempty"`

	Required int64 `json:"required"`

	WithAttrChangedName int64 `json:"withAttr"`

	// withDoc is a great field.
	//
	// It deserves multiple paragraphs of documentation
	// as there is a lot to write about it.
	//
	// Actually, this field needed even more documentation.
	WithDoc int64 `json:"withDoc"`

	WithInlineDoc int64 `json:"withInlineDoc"`

	Embedded1 int64 `json:"embedded1"`

	Embedded2 int64 `json:"embedded2"`

	WithInnerDoc struct {
		InnerDocField int64 `json:"innerDocField"`
	} `json:"withInnerDoc"`
}

type embeddedStruct struct {
	Embedded1 int64 `json:"embedded1"`

	Embedded2 int64 `json:"embedded2"`
}
-- imported/imported.cue --
package imported

import "foo.test/bar/imported/indirect"

#InstanceStruct: {
	instanceField: int

	indirectField: indirect.#Indirect
}
-- imported/subinst/imported.cue --
package imported

// TODO(mvdan): if instanceStruct here is not capitalized, the Go imported reference won't work.

#InstanceStruct: _
-- imported/subinst/cue_gen.go.want --
// Code generated by "cue exp gengotypes"; DO NOT EDIT.

package imported

import (
	"foo.test/bar/imported/indirect"
)

type InstanceStruct struct {
	InstanceField int64 `json:"instanceField"`

	IndirectField indirect.Indirect `json:"indirectField"`
}
-- imported/indirect/indirect.cue --
package indirect

#Indirect: int
-- imported/indirect/cue_gen.go.want --
// Code generated by "cue exp gengotypes"; DO NOT EDIT.

package indirect

type Indirect int64
-- imported/unused/unused.cue --
package unused

#Unused: int
-- bad_syntax/pkg.cue --
package bad_syntax

// This CUE package is not referenced nor used anywhere, so it should not be loaded.
{ bad syntax
