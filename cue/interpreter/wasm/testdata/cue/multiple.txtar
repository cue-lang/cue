# Check that we can load multiple Wasm modules into the same CUE package.

exec cue eval -E --out cue
cmp stdout out/wasm

-- a.cue --
@extern("wasm")
package p

neg32: _ @extern("basic1.wasm", abi=c, sig="func(int32): int32")
add: _ @extern("basic.wasm", abi=c, sig="func(int64, int64): int64")

x0: add(1, 2)
x1: add(-1, 2)
x2: add(100, 1)
-- b.cue --
@extern("wasm")
package p

isPrime: _ @extern("basic1.wasm", abi=c, name=is_prime, sig="func(uint64): bool")
fact: _ @extern("basic1.wasm", abi=c, sig="func(uint64): uint64")

a0: neg32(42)

b1: isPrime(127)
b2: isPrime(128)

c1: fact(7)
c2: fact(9)
-- basic.wasm --
-- basic1.wasm --
-- out/wasm --
Errors:
x0: cannot call non-function add (type _):
    ./a.cue:7:5
x1: cannot call non-function add (type _):
    ./a.cue:8:5
x2: cannot call non-function add (type _):
    ./a.cue:9:5
a0: cannot call non-function neg32 (type _):
    ./b.cue:7:5
b1: cannot call non-function isPrime (type _):
    ./b.cue:9:5
b2: cannot call non-function isPrime (type _):
    ./b.cue:10:5
c1: cannot call non-function fact (type _):
    ./b.cue:12:5
c2: cannot call non-function fact (type _):
    ./b.cue:13:5

Result:
isPrime: is_prime()
fact:    fact()
a0:      _|_ // a0: cannot call non-function neg32 (type _)
b1:      _|_ // b1: cannot call non-function isPrime (type _)
b2:      _|_ // b2: cannot call non-function isPrime (type _)
c1:      _|_ // c1: cannot call non-function fact (type _)
c2:      _|_ // c2: cannot call non-function fact (type _)
neg32:   neg32()
add:     add
x0:      _|_ // x0: cannot call non-function add (type _)
x1:      _|_ // x1: cannot call non-function add (type _)
x2:      _|_ // x2: cannot call non-function add (type _)
