# In the output external functions appear as a function call, like
# `add()` and `not()`. This is because they are implemented as a
# higher-order function which returns the actual callable builtin.
# Since this is `cue def` we don't run the functions, so we see the
# call to this higher-order construct.

exec cue def ./basic ./morewasm ./noload ./struct ./unusedwasm
cmp stdout eval.out

-- basic/foo.cue --
@extern("wasm")
package p

add: _ @extern("foo.wasm", abi=c, sig="func(int64, int64): int64")
mul: _ @extern("foo.wasm", abi=c, sig="func(float64, float64): float64")
not: _ @extern("foo.wasm", abi=c, sig="func(bool): bool")

x0: add(1, 2)
x1: add(-1, 2)
x2: add(100, 1)

y0: mul(3.0, 5.0)
y1: mul(-2.5, 3.37)
y2: mul(1.234, 5.678)

z: not(true)
-- basic/foo.wasm --
-- morewasm/foo.cue --
@extern("wasm")
package p

neg32: _ @extern("bar.wasm", abi=c, sig="func(int32): int32")
mul: _ @extern("foo.wasm", abi=c, sig="func(float64, float64): float64")
not: _ @extern("foo.wasm", abi=c, sig="func(bool): bool")

x0: add(1, 2)
x1: add(-1, 2)
x2: add(100, 1)

y0: mul(3.0, 5.0)
y1: mul(-2.5, 3.37)
y2: mul(1.234, 5.678)

z: not(true)
-- morewasm/bar.cue --
@extern("wasm")
package p

add: _ @extern("foo.wasm", abi=c, sig="func(int64, int64): int64")
isPrime: _ @extern("bar.wasm", abi=c, name=is_prime, sig="func(uint64): bool")
fact: _ @extern("bar.wasm", abi=c, sig="func(uint64): uint64")

a0: neg32(42)

b1: isPrime(127)
b2: isPrime(128)

c1: fact(7)
c2: fact(9)
-- morewasm/foo.wasm --
-- morewasm/bar.wasm --
-- noload/foo.cue --
@extern("wasm")
package p

x: 42
-- unusedwasm/foo.cue --
@extern("wasm")
package p

add: _ @extern("foo.wasm", abi=c, sig="func(int64, int64): int64")

x0: add(1, 2)
x1: add(-1, 2)
x2: add(100, 1)
-- struct/struct.cue --
@extern("wasm")
package p

import "math"

#vector2: {
	x: float64
	y: float64
}

magnitude2: _ @extern("struct.wasm", abi=c, sig="func(#vector2): float64")
magnitude3: _ @extern("struct.wasm", abi=c, sig="func(#vector3): float64")

_v0: {x: 1, y: 1}
_v1: {x: math.Sqrt2, y: math.Sqrt2}
_v2: {x: 123.456, y: 789.012}

m0: magnitude2(_v0)
m1: magnitude2(_v1)
m2: magnitude2(_v2)

#vector3: {
	x: float64
	y: float64
	z: float64
}

_v3: {x: 1, y: 1, z: 1}
_v4: {x: 0, y: 2, z: 2}
_v5: {x: 3.84900179459750509672765853667971637098401167513417917345734884322651781535288897129144, y: 3.84900179459750509672765853667971637098401167513417917345734884322651781535288897129144, z: 3.84900179459750509672765853667971637098401167513417917345734884322651781535288897129144}

m3: magnitude3(_v3)
m4: magnitude3(_v4)
m5: magnitude3(_v5)

cornucopia: _ @extern("struct.wasm", abi=c, sig="func(#cornucopia): int64")

#cornucopia: {
	b: bool
	n0: int16
	n1: uint8,
	n2: int64
}

_c0: {b: true, n0: 10, n1: 20, n2: 30}
_c1: {b: false, n0: 1, n1: 2, n2: 3}
_c2: {b: false, n0: -1, n1: 0, n2: 100}
_c3: {b: false, n0: -15000, n1: 10, n2: -10000000}

c0: cornucopia(_c0)
c1: cornucopia(_c1)
c2: cornucopia(_c2)
c3: cornucopia(_c3)
-- struct/struct.wasm --
-- unusedwasm/foo.wasm --
-- unusedwasm/empty.wasm --
-- eval.out --
package p

add: add() @extern("foo.wasm", abi=c, sig="func(int64, int64): int64")
mul: mul() @extern("foo.wasm", abi=c, sig="func(float64, float64): float64")
not: not() @extern("foo.wasm", abi=c, sig="func(bool): bool")
x0:  add(1, 2)
x1:  add(-1, 2)
x2:  add(100, 1)
y0:  mul(3.0, 5.0)
y1:  mul(-2.5, 3.37)
y2:  mul(1.234, 5.678)
z:   not(true)
// ---
package p

add:     add()      @extern("foo.wasm", abi=c, sig="func(int64, int64): int64")
isPrime: is_prime() @extern("bar.wasm", abi=c, name=is_prime, sig="func(uint64): bool")
fact:    fact()     @extern("bar.wasm", abi=c, sig="func(uint64): uint64")
a0:      neg32(42)
b1:      isPrime(127)
b2:      isPrime(128)
c1:      fact(7)
neg32:   neg32() @extern("bar.wasm", abi=c, sig="func(int32): int32")
mul:     mul()   @extern("foo.wasm", abi=c, sig="func(float64, float64): float64")
not:     not()   @extern("foo.wasm", abi=c, sig="func(bool): bool")
x0:      add(1, 2)
x1:      add(-1, 2)
x2:      add(100, 1)
y0:      mul(3.0, 5.0)
y1:      mul(-2.5, 3.37)
y2:      mul(1.234, 5.678)
c2:      fact(9)
z:       not(true)
// ---
package p

x: 42
// ---
package p

import "math"

#vector2: {
	x: float64
	y: float64
}
magnitude2: magnitude2() @extern("struct.wasm", abi=c, sig="func(#vector2): float64")
magnitude3: magnitude3() @extern("struct.wasm", abi=c, sig="func(#vector3): float64")
_v0: {
	x: 1
	y: 1
}
_v1: {
	x: math.Sqrt2
	y: math.Sqrt2
}
_v2: {
	x: 123.456
	y: 789.012
}
m0: magnitude2(_v0)
m1: magnitude2(_v1)
m2: magnitude2(_v2)
#vector3: {
	x: float64
	y: float64
	z: float64
}
_v3: {
	x: 1
	y: 1
	z: 1
}
_v4: {
	x: 0
	y: 2
	z: 2
}
_v5: {
	x: 3.84900179459750509672765853667971637098401167513417917345734884322651781535288897129144
	y: 3.84900179459750509672765853667971637098401167513417917345734884322651781535288897129144
	z: 3.84900179459750509672765853667971637098401167513417917345734884322651781535288897129144
}
m3:         magnitude3(_v3)
m4:         magnitude3(_v4)
m5:         magnitude3(_v5)
cornucopia: cornucopia() @extern("struct.wasm", abi=c, sig="func(#cornucopia): int64")
#cornucopia: {
	b:  bool
	n0: int16
	n1: uint8
	n2: int64
}
_c0: {
	b:  true
	n0: 10
	n1: 20
	n2: 30
}
_c1: {
	b:  false
	n0: 1
	n1: 2
	n2: 3
}
_c2: {
	b:  false
	n0: -1
	n1: 0
	n2: 100
}
_c3: {
	b:  false
	n0: -15000
	n1: 10
	n2: -10000000
}
c0: cornucopia(_c0)
c1: cornucopia(_c1)
c2: cornucopia(_c2)
c3: cornucopia(_c3)
// ---
package p

add: add() @extern("foo.wasm", abi=c, sig="func(int64, int64): int64")
x0:  add(1, 2)
x1:  add(-1, 2)
x2:  add(100, 1)
