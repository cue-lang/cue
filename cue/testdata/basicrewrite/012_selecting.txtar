#name: selecting
#evalPartial
-- in.cue --
obj: {a: 1, b: 2}
index:  {a: 1, b:     2}["b"]
mulidx: {a: 1, b: {a: 1, b: 3}}["b"]["b"]
e:      {a: 1}[4]
f:      {a: 1}.b
g:      {a: 1}["b"]
h:      [3].b
-- out/compile --
--- in.cue
{
  obj: {
    a: 1
    b: 2
  }
  index: {
    a: 1
    b: 2
  }["b"]
  mulidx: {
    a: 1
    b: {
      a: 1
      b: 3
    }
  }["b"]["b"]
  e: {
    a: 1
  }[4]
  f: {
    a: 1
  }.b
  g: {
    a: 1
  }["b"]
  h: [
    3,
  ].b
}
-- out/evalalpha --
Errors:
e: index out of range [4] with length 0:
    ./in.cue:4:16
h: undefined field: b:
    ./in.cue:7:13

Result:
(_|_){
  // [eval]
  obj: (struct){
    a: (int){ 1 }
    b: (int){ 2 }
  }
  index: (int){ 2 }
  mulidx: (int){ 3 }
  e: (_|_){
    // [eval] e: index out of range [4] with length 0:
    //     ./in.cue:4:16
  }
  f: (_|_){
    // [incomplete] f: undefined field: b:
    //     ./in.cue:5:16
  }
  g: (_|_){
    // [incomplete] g: undefined field: b:
    //     ./in.cue:6:16
  }
  h: (_|_){
    // [eval] h: undefined field: b:
    //     ./in.cue:7:13
  }
}
-- diff/-out/evalalpha<==>+out/eval --
diff old new
--- old
+++ new
@@ -1,7 +1,7 @@
 Errors:
-e: invalid struct selector 4 (type int):
+e: index out of range [4] with length 0:
     ./in.cue:4:16
-h: invalid list index b (type string):
+h: undefined field: b:
     ./in.cue:7:13
 
 Result:
@@ -14,7 +14,7 @@
   index: (int){ 2 }
   mulidx: (int){ 3 }
   e: (_|_){
-    // [eval] e: invalid struct selector 4 (type int):
+    // [eval] e: index out of range [4] with length 0:
     //     ./in.cue:4:16
   }
   f: (_|_){
@@ -26,7 +26,7 @@
     //     ./in.cue:6:16
   }
   h: (_|_){
-    // [eval] h: invalid list index b (type string):
+    // [eval] h: undefined field: b:
     //     ./in.cue:7:13
   }
 }
