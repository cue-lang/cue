#name: comparison
#evalPartial
-- in.cue --
lss: 1 < 2
leq: 1 <= 1.0
leq: 2.0 <= 3
eql: 1 == 1.0
neq: 1.0 == 1
gtr: !(2 > 3)
geq: 2.0 >= 2
seq: "a"+"b" == "ab"
err: 2 == "s"
-- lists.cue --
lists: {
	// Equal lists
	t1: [] == []
	t2: [1, 2, 3] == [1, 2, 3]
	t3: [1, "foo", true] == [1, "foo", true]
	t4: [[1, 2], [3, 4]] == [[1, 2], [3, 4]]
	t5: ([1, ...int] & [1, 2, 3]) == [1, 2, 3]
	// FIX:
	t6: [{a: 1}] == ([...{a: 1}] & [_])
	t7: [{a: 1}] != [...{a: 1}] // true as it is not equal
	t8: [...int] == [...string] // additional types are irrelevant.

	// Non-equal lists
	f1: [1, 2, 3] == [1, 2, 4]
	f2: [1, 2, 3] == [1, 2]
	f3: [1, 2, 3] == [1, 3, 2]  // different order
	f4: [] == [1]
	f5: [1, 2] == [1, "2"]  // different types
	f6: [*1 | 2 | 3] == [*2 | 3 | 4]

	// Error cases
	// FIX:
	err1: [1/0] == [1]
	err2: [int] == [string]
	_e3l: {}
	err3: [_e3l.b] == [1] // incomplete
	err4: [1, 2] == [1, int & string]

	// Inequality tests
	net1: [1, 2] != [1, 3]
	nef1: [1, 2] != [1, 2]
}
-- structs.cue --
structs: eq: {
    // Equal structs
    t1: {} == {}
    t2: {a: 1, b: "foo"} == {a: 1, b: "foo"}
    t3: {a: 1, b: 2} == {b: 2, a: 1}  // different order
    t4: {a: {x: 1, y: 2}} == {a: {x: 1, y: 2}} // nested structs
    t5: ({a: 1, b: 2, c: 3} & {d: 4}) == {a: 1, b: 2, c: 3, d: 4} // unification
    t6: {{{{a: 1}}}} == {{a: 1}} // embedding
    t7: {[string]: int} == {[string]: string}
	_t8l: *1 | 2 | 3
    t8: {a: _t8l} == {a: 3| *1}

    // Non-equal structs
    f1: {a: 1, b: "foo"} == {a: 2, b: "foo"}
    f2: {a: 1, b: "foo"} == {a: 1, c: "foo"}
    f3: {a: {x: 1}} == {a: {x: 2}}
    f4: {a: 1, b: 2} == {a: 1}
    f5: {} == {a: 1}
    f6: {a: 1} == 1
    f7: {a: 1, b?: 2} == {a: 1, b: 2} // optional field does not exist
    f8: {{{{a: 1}}}} == {{a: 1, b: 2}} // embedding
	_f9r:  *2 | 3 | 4
    f9: {a: *1 | 2 | 3} == {a: _f9r}

    // Error cases
	err1: {a!: int} == {a!: int}
    err2: {a!: int} == {a!: 1}
    err3: {a: int} == {a: string}
    err4: {a: 1/0} == {a: 1}
    err5: {a: 1} == {a: int & string}
	err6: {a!: 1} == {a: 1}
	err7: {a: 1} == {a!: 2}

	// Only test some versions of != recognizing the same code paths are
	// followed for ==.
	net1: {a: 1} != {a: 2}
	nef1: {a: 2} != {a: 2}
}
-- typediff.cue --
diffTypes: {
	// Tests with different types.
	num_diff:  2 == "s" // invalid operation
	str_diff:  "s" == 2 // invalid operation
	bool_diff: true == 2 // invalid operation
	struct_diff: {a: 1} == "s" // invalid operation

	// Other types compared to lists
	num_list:    5 == [5]
	str_list:    "ab" == ["a", "b"]
	bool_list:   true == [true]
	struct_list: {a: 1} == [{a: 1}]

	// Lists compared to other types
	list_num:    [1, 2] == 3
	list_str:    [1, 2] == "ab"
	list_bool:   [true] == false
	list_struct: [1, 2] == {a: 1}
	list_null:   [1, 2] == null

	// Negated comparisons
	n_list_num: [1, 2] != 3
	n_list_str: [1, 2] != "ab"

	// Lists with incompatible element types
	recursive1e: [int] == [string]
	recursive2f: [1, 2] == [1, "2"]
	recursive3t: [...int] == [...string]
	recursive4f: [1, "a"] == [1, 2]
}
-- out/def --
lss: true
leq: true
eql: true
neq: true
gtr: true
geq: true
seq: true
err: _|_ // invalid operation 2 == "s" (mismatched types int and string)
-- out/legacy-debug --
<0>{lss: true, leq: true, eql: true, neq: true, gtr: true, geq: true, seq: true, err: _|_((2 == "s"):invalid operation 2 == "s" (mismatched types int and string))}
-- out/compile --
--- in.cue
{
  lss: (1 < 2)
  leq: (1 <= 1.0)
  leq: (2.0 <= 3)
  eql: (1 == 1.0)
  neq: (1.0 == 1)
  gtr: !(2 > 3)
  geq: (2.0 >= 2)
  seq: (("a" + "b") == "ab")
  err: (2 == "s")
}
--- lists.cue
{
  lists: {
    t1: ([] == [])
    t2: ([
      1,
      2,
      3,
    ] == [
      1,
      2,
      3,
    ])
    t3: ([
      1,
      "foo",
      true,
    ] == [
      1,
      "foo",
      true,
    ])
    t4: ([
      [
        1,
        2,
      ],
      [
        3,
        4,
      ],
    ] == [
      [
        1,
        2,
      ],
      [
        3,
        4,
      ],
    ])
    t5: (([
      1,
      ...int,
    ] & [
      1,
      2,
      3,
    ]) == [
      1,
      2,
      3,
    ])
    t6: ([
      {
        a: 1
      },
    ] == ([
      ...{
        a: 1
      },
    ] & [
      _,
    ]))
    t7: ([
      {
        a: 1
      },
    ] != [
      ...{
        a: 1
      },
    ])
    t8: ([
      ...int,
    ] == [
      ...string,
    ])
    f1: ([
      1,
      2,
      3,
    ] == [
      1,
      2,
      4,
    ])
    f2: ([
      1,
      2,
      3,
    ] == [
      1,
      2,
    ])
    f3: ([
      1,
      2,
      3,
    ] == [
      1,
      3,
      2,
    ])
    f4: ([] == [
      1,
    ])
    f5: ([
      1,
      2,
    ] == [
      1,
      "2",
    ])
    f6: ([
      (*1|2|3),
    ] == [
      (*2|3|4),
    ])
    err1: ([
      (1 / 0),
    ] == [
      1,
    ])
    err2: ([
      int,
    ] == [
      string,
    ])
    _e3l: {}
    err3: ([
      〈1;_e3l〉.b,
    ] == [
      1,
    ])
    err4: ([
      1,
      2,
    ] == [
      1,
      (int & string),
    ])
    net1: ([
      1,
      2,
    ] != [
      1,
      3,
    ])
    nef1: ([
      1,
      2,
    ] != [
      1,
      2,
    ])
  }
}
--- structs.cue
{
  structs: {
    eq: {
      t1: ({} == {})
      t2: ({
        a: 1
        b: "foo"
      } == {
        a: 1
        b: "foo"
      })
      t3: ({
        a: 1
        b: 2
      } == {
        b: 2
        a: 1
      })
      t4: ({
        a: {
          x: 1
          y: 2
        }
      } == {
        a: {
          x: 1
          y: 2
        }
      })
      t5: (({
        a: 1
        b: 2
        c: 3
      } & {
        d: 4
      }) == {
        a: 1
        b: 2
        c: 3
        d: 4
      })
      t6: ({
        {
          {
            {
              a: 1
            }
          }
        }
      } == {
        {
          a: 1
        }
      })
      t7: ({
        [string]: int
      } == {
        [string]: string
      })
      _t8l: (*1|2|3)
      t8: ({
        a: 〈1;_t8l〉
      } == {
        a: (3|*1)
      })
      f1: ({
        a: 1
        b: "foo"
      } == {
        a: 2
        b: "foo"
      })
      f2: ({
        a: 1
        b: "foo"
      } == {
        a: 1
        c: "foo"
      })
      f3: ({
        a: {
          x: 1
        }
      } == {
        a: {
          x: 2
        }
      })
      f4: ({
        a: 1
        b: 2
      } == {
        a: 1
      })
      f5: ({} == {
        a: 1
      })
      f6: ({
        a: 1
      } == 1)
      f7: ({
        a: 1
        b?: 2
      } == {
        a: 1
        b: 2
      })
      f8: ({
        {
          {
            {
              a: 1
            }
          }
        }
      } == {
        {
          a: 1
          b: 2
        }
      })
      _f9r: (*2|3|4)
      f9: ({
        a: (*1|2|3)
      } == {
        a: 〈1;_f9r〉
      })
      err1: ({
        a!: int
      } == {
        a!: int
      })
      err2: ({
        a!: int
      } == {
        a!: 1
      })
      err3: ({
        a: int
      } == {
        a: string
      })
      err4: ({
        a: (1 / 0)
      } == {
        a: 1
      })
      err5: ({
        a: 1
      } == {
        a: (int & string)
      })
      err6: ({
        a!: 1
      } == {
        a: 1
      })
      err7: ({
        a: 1
      } == {
        a!: 2
      })
      net1: ({
        a: 1
      } != {
        a: 2
      })
      nef1: ({
        a: 2
      } != {
        a: 2
      })
    }
  }
}
--- typediff.cue
{
  diffTypes: {
    num_diff: (2 == "s")
    str_diff: ("s" == 2)
    bool_diff: (true == 2)
    struct_diff: ({
      a: 1
    } == "s")
    num_list: (5 == [
      5,
    ])
    str_list: ("ab" == [
      "a",
      "b",
    ])
    bool_list: (true == [
      true,
    ])
    struct_list: ({
      a: 1
    } == [
      {
        a: 1
      },
    ])
    list_num: ([
      1,
      2,
    ] == 3)
    list_str: ([
      1,
      2,
    ] == "ab")
    list_bool: ([
      true,
    ] == false)
    list_struct: ([
      1,
      2,
    ] == {
      a: 1
    })
    list_null: ([
      1,
      2,
    ] == null)
    n_list_num: ([
      1,
      2,
    ] != 3)
    n_list_str: ([
      1,
      2,
    ] != "ab")
    recursive1e: ([
      int,
    ] == [
      string,
    ])
    recursive2f: ([
      1,
      2,
    ] == [
      1,
      "2",
    ])
    recursive3t: ([
      ...int,
    ] == [
      ...string,
    ])
    recursive4f: ([
      1,
      "a",
    ] == [
      1,
      2,
    ])
  }
}
-- out/eval/stats --
Leaks:  37
Freed:  451
Reused: 445
Allocs: 43
Retain: 177

Unifications: 465
Conjuncts:    543
Disjuncts:    628
-- out/evalalpha --
Errors:
lists.err1: invalid left-hand value to '==' (type _|_): 0: failed arithmetic: division by zero:
    ./lists.cue:23:8
lists.err4: invalid right-hand value to '==' (type list): 1: conflicting values int and string (mismatched types int and string):
    ./lists.cue:27:8
structs.eq.err4: invalid left-hand value to '==' (type _|_): a: failed arithmetic: division by zero:
    ./structs.cue:29:11
structs.eq.err5: invalid right-hand value to '==' (type struct): a: conflicting values int and string (mismatched types int and string):
    ./structs.cue:30:11

Result:
(_|_){
  // [eval]
  lss: (bool){ true }
  leq: (bool){ true }
  eql: (bool){ true }
  neq: (bool){ true }
  gtr: (bool){ true }
  geq: (bool){ true }
  seq: (bool){ true }
  err: (bool){ false }
  lists: (_|_){
    // [eval]
    t1: (bool){ true }
    t2: (bool){ true }
    t3: (bool){ true }
    t4: (bool){ true }
    t5: (bool){ true }
    t6: (bool){ true }
    t7: (bool){ true }
    t8: (bool){ true }
    f1: (bool){ false }
    f2: (bool){ false }
    f3: (bool){ false }
    f4: (bool){ false }
    f5: (bool){ false }
    f6: (bool){ false }
    err1: (_|_){
      // [eval] lists.err1: invalid left-hand value to '==' (type _|_): 0: failed arithmetic: division by zero:
      //     ./lists.cue:23:8
    }
    err2: (_|_){
      // [incomplete] lists.err2: invalid left-hand value to '==' (type list): 0: incomplete value int:
      //     ./lists.cue:24:8
    }
    _e3l: (struct){
    }
    err3: (_|_){
      // [incomplete] lists.err3: invalid left-hand value to '==' (type list): 0: undefined field: b:
      //     ./lists.cue:26:8
    }
    err4: (_|_){
      // [eval] lists.err4: invalid right-hand value to '==' (type list): 1: conflicting values int and string (mismatched types int and string):
      //     ./lists.cue:27:8
    }
    net1: (bool){ true }
    nef1: (bool){ false }
  }
  structs: (_|_){
    // [eval]
    eq: (_|_){
      // [eval]
      t1: (bool){ true }
      t2: (bool){ true }
      t3: (bool){ true }
      t4: (bool){ true }
      t5: (bool){ true }
      t6: (bool){ true }
      t7: (bool){ true }
      _t8l: (int){ |(*(int){ 1 }, (int){ 2 }, (int){ 3 }) }
      t8: (bool){ false }
      f1: (bool){ false }
      f2: (bool){ false }
      f3: (bool){ false }
      f4: (bool){ false }
      f5: (bool){ false }
      f6: (bool){ false }
      f7: (bool){ false }
      f8: (bool){ false }
      _f9r: (int){ |(*(int){ 2 }, (int){ 3 }, (int){ 4 }) }
      f9: (bool){ false }
      err1: (_|_){
        // [incomplete] structs.eq.err1: invalid left-hand value to '==' (type struct): a: field is required but not present:
        //     ./structs.cue:26:8
      }
      err2: (_|_){
        // [incomplete] structs.eq.err2: invalid left-hand value to '==' (type struct): a: field is required but not present:
        //     ./structs.cue:27:11
      }
      err3: (_|_){
        // [incomplete] structs.eq.err3: invalid left-hand value to '==' (type struct): a: incomplete value int:
        //     ./structs.cue:28:11
      }
      err4: (_|_){
        // [eval] structs.eq.err4: invalid left-hand value to '==' (type _|_): a: failed arithmetic: division by zero:
        //     ./structs.cue:29:11
      }
      err5: (_|_){
        // [eval] structs.eq.err5: invalid right-hand value to '==' (type struct): a: conflicting values int and string (mismatched types int and string):
        //     ./structs.cue:30:11
      }
      err6: (_|_){
        // [incomplete] structs.eq.err6: invalid left-hand value to '==' (type struct): a: field is required but not present:
        //     ./structs.cue:31:8
      }
      err7: (_|_){
        // [incomplete] structs.eq.err7: invalid right-hand value to '==' (type struct): a: field is required but not present:
        //     ./structs.cue:32:8
      }
      net1: (bool){ true }
      nef1: (bool){ false }
    }
  }
  diffTypes: (struct){
    num_diff: (bool){ false }
    str_diff: (bool){ false }
    bool_diff: (bool){ false }
    struct_diff: (bool){ false }
    num_list: (bool){ false }
    str_list: (bool){ false }
    bool_list: (bool){ false }
    struct_list: (bool){ false }
    list_num: (bool){ false }
    list_str: (bool){ false }
    list_bool: (bool){ false }
    list_struct: (bool){ false }
    list_null: (bool){ false }
    n_list_num: (bool){ true }
    n_list_str: (bool){ true }
    recursive1e: (_|_){
      // [incomplete] diffTypes.recursive1e: invalid left-hand value to '==' (type list): 0: incomplete value int:
      //     ./typediff.cue:26:15
    }
    recursive2f: (bool){ false }
    recursive3t: (bool){ true }
    recursive4f: (bool){ false }
  }
}
-- diff/-out/evalalpha<==>+out/eval --
diff old new
--- old
+++ new
@@ -1,11 +1,11 @@
 Errors:
-lists.err1: invalid left-hand value to '==' (type _|_): lists.0: failed arithmetic: division by zero:
+lists.err1: invalid left-hand value to '==' (type _|_): 0: failed arithmetic: division by zero:
     ./lists.cue:23:8
-lists.err4: invalid right-hand value to '==' (type list): lists.1: conflicting values int and string (mismatched types int and string):
+lists.err4: invalid right-hand value to '==' (type list): 1: conflicting values int and string (mismatched types int and string):
     ./lists.cue:27:8
-structs.eq.err4: invalid left-hand value to '==' (type _|_): structs.eq.a: failed arithmetic: division by zero:
+structs.eq.err4: invalid left-hand value to '==' (type _|_): a: failed arithmetic: division by zero:
     ./structs.cue:29:11
-structs.eq.err5: invalid right-hand value to '==' (type struct): structs.eq.a: conflicting values int and string (mismatched types int and string):
+structs.eq.err5: invalid right-hand value to '==' (type struct): a: conflicting values int and string (mismatched types int and string):
     ./structs.cue:30:11
 
 Result:
@@ -36,21 +36,21 @@
     f5: (bool){ false }
     f6: (bool){ false }
     err1: (_|_){
-      // [eval] lists.err1: invalid left-hand value to '==' (type _|_): lists.0: failed arithmetic: division by zero:
+      // [eval] lists.err1: invalid left-hand value to '==' (type _|_): 0: failed arithmetic: division by zero:
       //     ./lists.cue:23:8
     }
     err2: (_|_){
-      // [incomplete] lists.err2: invalid left-hand value to '==' (type list): lists.0: incomplete value int:
+      // [incomplete] lists.err2: invalid left-hand value to '==' (type list): 0: incomplete value int:
       //     ./lists.cue:24:8
     }
     _e3l: (struct){
     }
     err3: (_|_){
-      // [incomplete] lists.err3: invalid left-hand value to '==' (type list): lists.0: undefined field: b:
+      // [incomplete] lists.err3: invalid left-hand value to '==' (type list): 0: undefined field: b:
       //     ./lists.cue:26:8
     }
     err4: (_|_){
-      // [eval] lists.err4: invalid right-hand value to '==' (type list): lists.1: conflicting values int and string (mismatched types int and string):
+      // [eval] lists.err4: invalid right-hand value to '==' (type list): 1: conflicting values int and string (mismatched types int and string):
       //     ./lists.cue:27:8
     }
     net1: (bool){ true }
@@ -80,31 +80,31 @@
       _f9r: (int){ |(*(int){ 2 }, (int){ 3 }, (int){ 4 }) }
       f9: (bool){ false }
       err1: (_|_){
-        // [incomplete] structs.eq.err1: invalid left-hand value to '==' (type struct): structs.eq.a: field is required but not present:
+        // [incomplete] structs.eq.err1: invalid left-hand value to '==' (type struct): a: field is required but not present:
         //     ./structs.cue:26:8
       }
       err2: (_|_){
-        // [incomplete] structs.eq.err2: invalid left-hand value to '==' (type struct): structs.eq.a: field is required but not present:
+        // [incomplete] structs.eq.err2: invalid left-hand value to '==' (type struct): a: field is required but not present:
         //     ./structs.cue:27:11
       }
       err3: (_|_){
-        // [incomplete] structs.eq.err3: invalid left-hand value to '==' (type struct): structs.eq.a: incomplete value int:
+        // [incomplete] structs.eq.err3: invalid left-hand value to '==' (type struct): a: incomplete value int:
         //     ./structs.cue:28:11
       }
       err4: (_|_){
-        // [eval] structs.eq.err4: invalid left-hand value to '==' (type _|_): structs.eq.a: failed arithmetic: division by zero:
+        // [eval] structs.eq.err4: invalid left-hand value to '==' (type _|_): a: failed arithmetic: division by zero:
         //     ./structs.cue:29:11
       }
       err5: (_|_){
-        // [eval] structs.eq.err5: invalid right-hand value to '==' (type struct): structs.eq.a: conflicting values int and string (mismatched types int and string):
+        // [eval] structs.eq.err5: invalid right-hand value to '==' (type struct): a: conflicting values int and string (mismatched types int and string):
         //     ./structs.cue:30:11
       }
       err6: (_|_){
-        // [incomplete] structs.eq.err6: invalid left-hand value to '==' (type struct): structs.eq.a: field is required but not present:
+        // [incomplete] structs.eq.err6: invalid left-hand value to '==' (type struct): a: field is required but not present:
         //     ./structs.cue:31:8
       }
       err7: (_|_){
-        // [incomplete] structs.eq.err7: invalid right-hand value to '==' (type struct): structs.eq.a: field is required but not present:
+        // [incomplete] structs.eq.err7: invalid right-hand value to '==' (type struct): a: field is required but not present:
         //     ./structs.cue:32:8
       }
       net1: (bool){ true }
@@ -128,7 +128,7 @@
     n_list_num: (bool){ true }
     n_list_str: (bool){ true }
     recursive1e: (_|_){
-      // [incomplete] diffTypes.recursive1e: invalid left-hand value to '==' (type list): diffTypes.0: incomplete value int:
+      // [incomplete] diffTypes.recursive1e: invalid left-hand value to '==' (type list): 0: incomplete value int:
       //     ./typediff.cue:26:15
     }
     recursive2f: (bool){ false }
-- out/eval --
Errors:
lists.err1: invalid left-hand value to '==' (type _|_): lists.0: failed arithmetic: division by zero:
    ./lists.cue:23:8
lists.err4: invalid right-hand value to '==' (type list): lists.1: conflicting values int and string (mismatched types int and string):
    ./lists.cue:27:8
structs.eq.err4: invalid left-hand value to '==' (type _|_): structs.eq.a: failed arithmetic: division by zero:
    ./structs.cue:29:11
structs.eq.err5: invalid right-hand value to '==' (type struct): structs.eq.a: conflicting values int and string (mismatched types int and string):
    ./structs.cue:30:11

Result:
(_|_){
  // [eval]
  lss: (bool){ true }
  leq: (bool){ true }
  eql: (bool){ true }
  neq: (bool){ true }
  gtr: (bool){ true }
  geq: (bool){ true }
  seq: (bool){ true }
  err: (bool){ false }
  lists: (_|_){
    // [eval]
    t1: (bool){ true }
    t2: (bool){ true }
    t3: (bool){ true }
    t4: (bool){ true }
    t5: (bool){ true }
    t6: (bool){ true }
    t7: (bool){ true }
    t8: (bool){ true }
    f1: (bool){ false }
    f2: (bool){ false }
    f3: (bool){ false }
    f4: (bool){ false }
    f5: (bool){ false }
    f6: (bool){ false }
    err1: (_|_){
      // [eval] lists.err1: invalid left-hand value to '==' (type _|_): lists.0: failed arithmetic: division by zero:
      //     ./lists.cue:23:8
    }
    err2: (_|_){
      // [incomplete] lists.err2: invalid left-hand value to '==' (type list): lists.0: incomplete value int:
      //     ./lists.cue:24:8
    }
    _e3l: (struct){
    }
    err3: (_|_){
      // [incomplete] lists.err3: invalid left-hand value to '==' (type list): lists.0: undefined field: b:
      //     ./lists.cue:26:8
    }
    err4: (_|_){
      // [eval] lists.err4: invalid right-hand value to '==' (type list): lists.1: conflicting values int and string (mismatched types int and string):
      //     ./lists.cue:27:8
    }
    net1: (bool){ true }
    nef1: (bool){ false }
  }
  structs: (_|_){
    // [eval]
    eq: (_|_){
      // [eval]
      t1: (bool){ true }
      t2: (bool){ true }
      t3: (bool){ true }
      t4: (bool){ true }
      t5: (bool){ true }
      t6: (bool){ true }
      t7: (bool){ true }
      _t8l: (int){ |(*(int){ 1 }, (int){ 2 }, (int){ 3 }) }
      t8: (bool){ false }
      f1: (bool){ false }
      f2: (bool){ false }
      f3: (bool){ false }
      f4: (bool){ false }
      f5: (bool){ false }
      f6: (bool){ false }
      f7: (bool){ false }
      f8: (bool){ false }
      _f9r: (int){ |(*(int){ 2 }, (int){ 3 }, (int){ 4 }) }
      f9: (bool){ false }
      err1: (_|_){
        // [incomplete] structs.eq.err1: invalid left-hand value to '==' (type struct): structs.eq.a: field is required but not present:
        //     ./structs.cue:26:8
      }
      err2: (_|_){
        // [incomplete] structs.eq.err2: invalid left-hand value to '==' (type struct): structs.eq.a: field is required but not present:
        //     ./structs.cue:27:11
      }
      err3: (_|_){
        // [incomplete] structs.eq.err3: invalid left-hand value to '==' (type struct): structs.eq.a: incomplete value int:
        //     ./structs.cue:28:11
      }
      err4: (_|_){
        // [eval] structs.eq.err4: invalid left-hand value to '==' (type _|_): structs.eq.a: failed arithmetic: division by zero:
        //     ./structs.cue:29:11
      }
      err5: (_|_){
        // [eval] structs.eq.err5: invalid right-hand value to '==' (type struct): structs.eq.a: conflicting values int and string (mismatched types int and string):
        //     ./structs.cue:30:11
      }
      err6: (_|_){
        // [incomplete] structs.eq.err6: invalid left-hand value to '==' (type struct): structs.eq.a: field is required but not present:
        //     ./structs.cue:31:8
      }
      err7: (_|_){
        // [incomplete] structs.eq.err7: invalid right-hand value to '==' (type struct): structs.eq.a: field is required but not present:
        //     ./structs.cue:32:8
      }
      net1: (bool){ true }
      nef1: (bool){ false }
    }
  }
  diffTypes: (struct){
    num_diff: (bool){ false }
    str_diff: (bool){ false }
    bool_diff: (bool){ false }
    struct_diff: (bool){ false }
    num_list: (bool){ false }
    str_list: (bool){ false }
    bool_list: (bool){ false }
    struct_list: (bool){ false }
    list_num: (bool){ false }
    list_str: (bool){ false }
    list_bool: (bool){ false }
    list_struct: (bool){ false }
    list_null: (bool){ false }
    n_list_num: (bool){ true }
    n_list_str: (bool){ true }
    recursive1e: (_|_){
      // [incomplete] diffTypes.recursive1e: invalid left-hand value to '==' (type list): diffTypes.0: incomplete value int:
      //     ./typediff.cue:26:15
    }
    recursive2f: (bool){ false }
    recursive3t: (bool){ true }
    recursive4f: (bool){ false }
  }
}
