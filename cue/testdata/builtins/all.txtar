-- in.cue --
fatalArg: {
	x: len("eee" + 'eee')
}

// don't call builtin for a permanent error of a child node
fatalChild: {
	#b: {}
	x: and([{a: #b.c}])
}

// allow incomplete child values. The error will persist after `and` is
// evaluated down the line. This allows the and-ing of templates that may
// complete later.
okIncompleteChild: {
	b: {}
	x: and([{a: b.c}, {b: 1}])
}
-- out/eval/stats --
Leaks:  2
Freed:  12
Reused: 8
Allocs: 6
Retain: 2

Unifications: 14
Conjuncts:    17
Disjuncts:    14
-- out/evalalpha --
Errors:
fatalArg.x: invalid operands "eee" and 'eee' to '+' (type string and bytes):
    ./in.cue:2:9
    ./in.cue:2:17
fatalChild.0.a: undefined field: c:
    ./in.cue:8:17

Result:
(_|_){
  // [eval]
  fatalArg: (_|_){
    // [eval]
    x: (_|_){
      // [eval] fatalArg.x: invalid operands "eee" and 'eee' to '+' (type string and bytes):
      //     ./in.cue:2:9
      //     ./in.cue:2:17
    }
  }
  fatalChild: (_|_){
    // [eval]
    #b: (#struct){
    }
    x: (_|_){
      // [eval] fatalChild.0.a: undefined field: c:
      //     ./in.cue:8:17
    }
  }
  okIncompleteChild: (struct){
    b: (struct){
    }
    x: (struct){
      a: (_|_){
        // [incomplete] okIncompleteChild.x.a: undefined field: c:
        //     ./in.cue:16:16
      }
      b: (int){ 1 }
    }
  }
}
-- diff/-out/evalalpha<==>+out/eval --
diff old new
--- old
+++ new
@@ -2,7 +2,7 @@
 fatalArg.x: invalid operands "eee" and 'eee' to '+' (type string and bytes):
     ./in.cue:2:9
     ./in.cue:2:17
-fatalChild.x.a: undefined field: c:
+fatalChild.0.a: undefined field: c:
     ./in.cue:8:17
 
 Result:
@@ -21,11 +21,8 @@
     #b: (#struct){
     }
     x: (_|_){
-      // [eval]
-      a: (_|_){
-        // [eval] fatalChild.x.a: undefined field: c:
-        //     ./in.cue:8:17
-      }
+      // [eval] fatalChild.0.a: undefined field: c:
+      //     ./in.cue:8:17
     }
   }
   okIncompleteChild: (struct){
-- diff/todo/p2 --
Path of old and new error is incorrect.
-- out/eval --
Errors:
fatalArg.x: invalid operands "eee" and 'eee' to '+' (type string and bytes):
    ./in.cue:2:9
    ./in.cue:2:17
fatalChild.x.a: undefined field: c:
    ./in.cue:8:17

Result:
(_|_){
  // [eval]
  fatalArg: (_|_){
    // [eval]
    x: (_|_){
      // [eval] fatalArg.x: invalid operands "eee" and 'eee' to '+' (type string and bytes):
      //     ./in.cue:2:9
      //     ./in.cue:2:17
    }
  }
  fatalChild: (_|_){
    // [eval]
    #b: (#struct){
    }
    x: (_|_){
      // [eval]
      a: (_|_){
        // [eval] fatalChild.x.a: undefined field: c:
        //     ./in.cue:8:17
      }
    }
  }
  okIncompleteChild: (struct){
    b: (struct){
    }
    x: (struct){
      a: (_|_){
        // [incomplete] okIncompleteChild.x.a: undefined field: c:
        //     ./in.cue:16:16
      }
      b: (int){ 1 }
    }
  }
}
-- out/compile --
--- in.cue
{
  fatalArg: {
    x: len(("eee" + 'eee'))
  }
  fatalChild: {
    #b: {}
    x: and([
      {
        a: 〈2;#b〉.c
      },
    ])
  }
  okIncompleteChild: {
    b: {}
    x: and([
      {
        a: 〈2;b〉.c
      },
      {
        b: 1
      },
    ])
  }
}
