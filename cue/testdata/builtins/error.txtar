-- cue.mod/module.cue --
module: "cuelang.org/error"
language: version: "v0.14.0"
-- in.cue --
selection: {
	dropError: 1 | error("drop me")

	useUserError: 1&2 | error("use me")

	twoUserErrors: 1&2 | error("error one") | error("error two")

	x: int
	dropIncomplete: x + 1 | error("user msg: x + 1 failed")
}

interpolation: {
	a: {b: int}
	world: "world"

	substituteAll: a.notExist | error("hello \(world)")

	substituteFail: a.b + 1 | a.notExist | error("reference failed: \(a.b) | \(a.notExist)")
}
indirect: {
	x: error
	y: x("msg")
}
-- issues.cue --
issue4001: {
	a: "b"
	a: int | error("error: "+"a='\(a)'")
}
issue3983: {
	x: int | error("I wanted an integer")
	x: >10 | error("I wanted more than 10")
	x: <20 | error("I wanted less than 20")

	x: 3
}
issue3984: {
	v: "a" | error("must be a")
	v: "b"
}
-- out/eval/stats --
Leaks:  0
Freed:  30
Reused: 25
Allocs: 5
Retain: 0

Unifications: 16
Conjuncts:    38
Disjuncts:    30
-- out/evalalpha --
Errors:
issue3983.x: 2 errors in empty disjunction:
selection.twoUserErrors: 2 errors in empty disjunction:
selection.useUserError: use me:
    ./in.cue:4:22
selection.twoUserErrors: error one:
    ./in.cue:6:23
selection.twoUserErrors: error two:
    ./in.cue:6:44
indirect.y: msg:
    ./in.cue:22:5
issue4001.a: error: a='b':
    ./issues.cue:3:11
issue3983.x: invalid value 3 (out of bound >10):
    ./issues.cue:7:5
    ./issues.cue:10:5
issue3983.x: I wanted less than 20:
    ./issues.cue:8:11
issue3984.v: must be a:
    ./issues.cue:13:11

Result:
(_|_){
  // [eval]
  selection: (_|_){
    // [user]
    dropError: (int){ 1 }
    useUserError: (_|_){
      // [user] selection.useUserError: use me:
      //     ./in.cue:4:22
    }
    twoUserErrors: (_|_){
      // [user] selection.twoUserErrors: 2 errors in empty disjunction:
      // selection.twoUserErrors: error one:
      //     ./in.cue:6:23
      // selection.twoUserErrors: error two:
      //     ./in.cue:6:44
    }
    x: (int){ int }
    dropIncomplete: (_|_){
      // [incomplete] selection.dropIncomplete: user msg: x + 1 failed:
      //     ./in.cue:9:26
    }
  }
  interpolation: (struct){
    a: (struct){
      b: (int){ int }
    }
    world: (string){ "world" }
    substituteAll: (_|_){
      // [incomplete] interpolation.substituteAll: hello world:
      //     ./in.cue:16:30
    }
    substituteFail: (_|_){
      // [incomplete] interpolation.substituteFail: reference failed: int | a.notExist:
      //     ./in.cue:18:41
      //     ./in.cue:13:9
      //     ./in.cue:18:77
    }
  }
  indirect: (_|_){
    // [user]
    x: (string){ error() }
    y: (_|_){
      // [user] indirect.y: msg:
      //     ./in.cue:22:5
    }
  }
  issue4001: (_|_){
    // [user]
    a: (_|_){
      // [user] issue4001.a: error: a='b':
      //     ./issues.cue:3:11
    }
  }
  issue3983: (_|_){
    // [eval]
    x: (_|_){
      // [eval] issue3983.x: 2 errors in empty disjunction:
      // issue3983.x: invalid value 3 (out of bound >10):
      //     ./issues.cue:7:5
      //     ./issues.cue:10:5
      // issue3983.x: I wanted less than 20:
      //     ./issues.cue:8:11
    }
  }
  issue3984: (_|_){
    // [user]
    v: (_|_){
      // [user] issue3984.v: must be a:
      //     ./issues.cue:13:11
    }
  }
}
-- diff/-out/evalalpha<==>+out/eval --
diff old new
--- old
+++ new
@@ -1,12 +1,6 @@
 Errors:
-selection.twoUserErrors: 3 errors in empty disjunction:
-selection.twoUserErrors: conflicting values 2 and 1:
-    ./in.cue:6:17
-    ./in.cue:6:19
-selection.useUserError: 2 errors in empty disjunction:
-selection.useUserError: conflicting values 2 and 1:
-    ./in.cue:4:16
-    ./in.cue:4:18
+issue3983.x: 2 errors in empty disjunction:
+selection.twoUserErrors: 2 errors in empty disjunction:
 selection.useUserError: use me:
     ./in.cue:4:22
 selection.twoUserErrors: error one:
@@ -15,26 +9,28 @@
     ./in.cue:6:44
 indirect.y: msg:
     ./in.cue:22:5
+issue4001.a: error: a='b':
+    ./issues.cue:3:11
+issue3983.x: invalid value 3 (out of bound >10):
+    ./issues.cue:7:5
+    ./issues.cue:10:5
+issue3983.x: I wanted less than 20:
+    ./issues.cue:8:11
+issue3984.v: must be a:
+    ./issues.cue:13:11
 
 Result:
 (_|_){
-  // [user]
+  // [eval]
   selection: (_|_){
     // [user]
     dropError: (int){ 1 }
     useUserError: (_|_){
-      // [user] selection.useUserError: 2 errors in empty disjunction:
-      // selection.useUserError: conflicting values 2 and 1:
-      //     ./in.cue:4:16
-      //     ./in.cue:4:18
-      // selection.useUserError: use me:
+      // [user] selection.useUserError: use me:
       //     ./in.cue:4:22
     }
     twoUserErrors: (_|_){
-      // [user] selection.twoUserErrors: 3 errors in empty disjunction:
-      // selection.twoUserErrors: conflicting values 2 and 1:
-      //     ./in.cue:6:17
-      //     ./in.cue:6:19
+      // [user] selection.twoUserErrors: 2 errors in empty disjunction:
       // selection.twoUserErrors: error one:
       //     ./in.cue:6:23
       // selection.twoUserErrors: error two:
@@ -42,11 +38,7 @@
     }
     x: (int){ int }
     dropIncomplete: (_|_){
-      // [incomplete] selection.dropIncomplete: 2 errors in empty disjunction:
-      // selection.dropIncomplete: non-concrete value int in operand to +:
-      //     ./in.cue:9:18
-      //     ./in.cue:8:5
-      // selection.dropIncomplete: user msg: x + 1 failed:
+      // [incomplete] selection.dropIncomplete: user msg: x + 1 failed:
       //     ./in.cue:9:26
     }
   }
@@ -56,20 +48,11 @@
     }
     world: (string){ "world" }
     substituteAll: (_|_){
-      // [incomplete] interpolation.substituteAll: 2 errors in empty disjunction:
-      // interpolation.substituteAll: undefined field: notExist:
-      //     ./in.cue:16:19
-      // interpolation.substituteAll: hello world:
+      // [incomplete] interpolation.substituteAll: hello world:
       //     ./in.cue:16:30
     }
     substituteFail: (_|_){
-      // [incomplete] interpolation.substituteFail: 3 errors in empty disjunction:
-      // interpolation.substituteFail: non-concrete value int in operand to +:
-      //     ./in.cue:18:18
-      //     ./in.cue:13:9
-      // interpolation.substituteFail: undefined field: notExist:
-      //     ./in.cue:18:30
-      // interpolation.substituteFail: reference failed: int | a.notExist:
+      // [incomplete] interpolation.substituteFail: reference failed: int | a.notExist:
       //     ./in.cue:18:41
       //     ./in.cue:13:9
       //     ./in.cue:18:77
@@ -87,7 +70,25 @@
     // [user]
     a: (_|_){
       // [user] issue4001.a: error: a='b':
-      //     ./issue4001.cue:3:11
+      //     ./issues.cue:3:11
+    }
+  }
+  issue3983: (_|_){
+    // [eval]
+    x: (_|_){
+      // [eval] issue3983.x: 2 errors in empty disjunction:
+      // issue3983.x: invalid value 3 (out of bound >10):
+      //     ./issues.cue:7:5
+      //     ./issues.cue:10:5
+      // issue3983.x: I wanted less than 20:
+      //     ./issues.cue:8:11
+    }
+  }
+  issue3984: (_|_){
+    // [user]
+    v: (_|_){
+      // [user] issue3984.v: must be a:
+      //     ./issues.cue:13:11
     }
   }
 }
-- out/eval --
Errors:
selection.twoUserErrors: 3 errors in empty disjunction:
selection.twoUserErrors: conflicting values 2 and 1:
    ./in.cue:6:17
    ./in.cue:6:19
selection.useUserError: 2 errors in empty disjunction:
selection.useUserError: conflicting values 2 and 1:
    ./in.cue:4:16
    ./in.cue:4:18
selection.useUserError: use me:
    ./in.cue:4:22
selection.twoUserErrors: error one:
    ./in.cue:6:23
selection.twoUserErrors: error two:
    ./in.cue:6:44
indirect.y: msg:
    ./in.cue:22:5

Result:
(_|_){
  // [user]
  selection: (_|_){
    // [user]
    dropError: (int){ 1 }
    useUserError: (_|_){
      // [user] selection.useUserError: 2 errors in empty disjunction:
      // selection.useUserError: conflicting values 2 and 1:
      //     ./in.cue:4:16
      //     ./in.cue:4:18
      // selection.useUserError: use me:
      //     ./in.cue:4:22
    }
    twoUserErrors: (_|_){
      // [user] selection.twoUserErrors: 3 errors in empty disjunction:
      // selection.twoUserErrors: conflicting values 2 and 1:
      //     ./in.cue:6:17
      //     ./in.cue:6:19
      // selection.twoUserErrors: error one:
      //     ./in.cue:6:23
      // selection.twoUserErrors: error two:
      //     ./in.cue:6:44
    }
    x: (int){ int }
    dropIncomplete: (_|_){
      // [incomplete] selection.dropIncomplete: 2 errors in empty disjunction:
      // selection.dropIncomplete: non-concrete value int in operand to +:
      //     ./in.cue:9:18
      //     ./in.cue:8:5
      // selection.dropIncomplete: user msg: x + 1 failed:
      //     ./in.cue:9:26
    }
  }
  interpolation: (struct){
    a: (struct){
      b: (int){ int }
    }
    world: (string){ "world" }
    substituteAll: (_|_){
      // [incomplete] interpolation.substituteAll: 2 errors in empty disjunction:
      // interpolation.substituteAll: undefined field: notExist:
      //     ./in.cue:16:19
      // interpolation.substituteAll: hello world:
      //     ./in.cue:16:30
    }
    substituteFail: (_|_){
      // [incomplete] interpolation.substituteFail: 3 errors in empty disjunction:
      // interpolation.substituteFail: non-concrete value int in operand to +:
      //     ./in.cue:18:18
      //     ./in.cue:13:9
      // interpolation.substituteFail: undefined field: notExist:
      //     ./in.cue:18:30
      // interpolation.substituteFail: reference failed: int | a.notExist:
      //     ./in.cue:18:41
      //     ./in.cue:13:9
      //     ./in.cue:18:77
    }
  }
  indirect: (_|_){
    // [user]
    x: (string){ error() }
    y: (_|_){
      // [user] indirect.y: msg:
      //     ./in.cue:22:5
    }
  }
  issue4001: (_|_){
    // [user]
    a: (_|_){
      // [user] issue4001.a: error: a='b':
      //     ./issue4001.cue:3:11
    }
  }
}
-- out/compile --
--- in.cue
{
  selection: {
    dropError: (1|error("drop me"))
    useUserError: ((1 & 2)|error("use me"))
    twoUserErrors: ((1 & 2)|error("error one")|error("error two"))
    x: int
    dropIncomplete: ((〈0;x〉 + 1)|error("user msg: x + 1 failed"))
  }
  interpolation: {
    a: {
      b: int
    }
    world: "world"
    substituteAll: (〈0;a〉.notExist|error("hello \(〈0;world〉)"))
    substituteFail: ((〈0;a〉.b + 1)|〈0;a〉.notExist|error("reference failed: \(〈0;a〉.b) | \(〈0;a〉.notExist)"))
  }
  indirect: {
    x: error
    y: 〈0;x〉("msg")
  }
}
--- issues.cue
{
  issue4001: {
    a: "b"
    a: (int|error(("error: " + "a='\(〈0;a〉)'")))
  }
  issue3983: {
    x: (int|error("I wanted an integer"))
    x: (>10|error("I wanted more than 10"))
    x: (<20|error("I wanted less than 20"))
    x: 3
  }
  issue3984: {
    v: ("a"|error("must be a"))
    v: "b"
  }
}
