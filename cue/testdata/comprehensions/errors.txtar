-- in.cue --
circularIf: {
	#list: {
		tail: #list | *null
		if tail != null {
		}
	}
}

circularFor: {
	#list: {
		tail: #list | *null
		for x in tail != null {
		}
	}
}

// Print a bit more sensible error message than "empty disjunction" here.
// Issue #465
userError: {
	a: string | *_|_
	if a != "" {
	}
}

intField: {
	for i, _ in [1, 2] {
		(i): {
		}
	}
}
-- out/eval/stats --
Leaks:  3
Freed:  24
Reused: 20
Allocs: 7
Retain: 3

Unifications: 17
Conjuncts:    29
Disjuncts:    25
-- out/eval --
Errors:
circularFor.#list: invalid operand tail != null (found bool, want list or struct):
    ./in.cue:12:12
intField: integer fields not supported:
    ./in.cue:27:4

Result:
(_|_){
  // [eval]
  circularIf: (struct){
    #list: (#struct){
      tail: ((null|struct)){ |(*(null){ null }, (#struct){
          tail: (null){ null }
        }) }
    }
  }
  circularFor: (_|_){
    // [eval]
    #list: (_|_){
      // [eval] circularFor.#list: invalid operand tail != null (found bool, want list or struct):
      //     ./in.cue:12:12
      tail: (null){ null }
    }
  }
  userError: (_|_){
    // [incomplete] userError: non-concrete value string in operand to !=:
    //     ./in.cue:21:5
    //     ./in.cue:20:5
    a: (string){ string }
  }
  intField: (_|_){
    // [eval] intField: integer fields not supported:
    //     ./in.cue:27:4
    0: (struct){
    }
    1: (struct){
    }
  }
}
-- out/compile --
--- in.cue
{
  circularIf: {
    #list: {
      tail: (〈1;#list〉|*null)
      if (〈0;tail〉 != null) {}
    }
  }
  circularFor: {
    #list: {
      tail: (〈1;#list〉|*null)
      for _, x in (〈0;tail〉 != null) {}
    }
  }
  userError: {
    a: (string|*_|_(explicit error (_|_ literal) in source))
    if (〈0;a〉 != "") {}
  }
  intField: {
    for i, _ in [
      1,
      2,
    ] {
      〈1;i〉: {}
    }
  }
}
