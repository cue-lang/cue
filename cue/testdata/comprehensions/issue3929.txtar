-- in.cue --
package main

import "strings"

reduced: {
	#Input: {
		name:  string
		age:   "one" | "two"
		if name != _|_ {
			if true {
				age: "one"
			}
		}
	}

	#def1: {
		IN=_in: _
		def1: #def2 & {_in: IN}
	}

	#def2: {
		IN=_in: _
		def2: #def3 & {_in: IN}
	}

	#def3: {
		_in: #Input
		def3: _in.age
	}

	in: name: "foobar"

	out: (#def1 & {_in: in}).def1
}

full: {
	cronjob: [string]: #CronjobConfig

	#CronjobConfig: {
		#PodConfig
	}

	#PodConfig: {
		#ContainerConfig
	}

	#ContainerConfig: {
		image:           string
		imagePullPolicy: "IfNotPresent" | "Always" | "Never"
		if image != _|_ {
			if strings.HasSuffix(image, ":latest") == true {
				imagePullPolicy: "IfNotPresent" | *"Always" | "Never"
			}
			if strings.HasSuffix(image, ":latest") != true {
				imagePullPolicy: *"IfNotPresent" | "Always" | "Never"
			}
		}
	}

	_#cronjob: {
		c=_config: #CronjobConfig

		out: spec: jobTemplate: spec: template: _#pod & {_config: c}
	}

	_#pod: {
		c=_config: #PodConfig

		spec: containers: [{
			_#container & {
				_config: c
			}
		}]
	}

	_#container: {
		c=_config: #ContainerConfig

		imagePullPolicy: c.imagePullPolicy
	}

	cronjob: "foobar": image: "foobar:latest"

	for k, v in cronjob {
		objects: cronjob: "\(k)": (_#cronjob & {_config: v}).out
	}
}
-- out/evalalpha/stats --
Leaks:  0
Freed:  153
Reused: 117
Allocs: 36
Retain: 0

Unifications: 96
Conjuncts:    265
Disjuncts:    53
Notifications: 18

CloseIDElems: 838
NumCloseIDs: 101
-- diff/-out/evalalpha/stats<==>+out/eval/stats --
diff old new
--- old
+++ new
@@ -1,12 +1,13 @@
-Leaks:  2
-Freed:  653
-Reused: 632
-Allocs: 23
-Retain: 93
-
-Unifications: 132
-Conjuncts:    966
-Disjuncts:    708
-
-CloseIDElems: 0
-NumCloseIDs: 30
+Leaks:  0
+Freed:  153
+Reused: 117
+Allocs: 36
+Retain: 0
+
+Unifications: 96
+Conjuncts:    265
+Disjuncts:    53
+Notifications: 18
+
+CloseIDElems: 838
+NumCloseIDs: 101
-- out/eval/stats --
Leaks:  2
Freed:  653
Reused: 632
Allocs: 23
Retain: 93

Unifications: 132
Conjuncts:    966
Disjuncts:    708

CloseIDElems: 0
NumCloseIDs: 30
-- out/evalalpha --
(struct){
  reduced: (struct){
    #Input: (#struct){
      name: (string){ string }
      age: (string){ |((string){ "one" }, (string){ "two" }) }
    }
    #def1: (#struct){
      _in(:main): (_){ _ }
      def1: (#struct){
        _in(:main): (_){ _ }
        def2: (#struct){
          _in(:main): (#struct){
            name: (string){ string }
            age: (string){ |((string){ "one" }, (string){ "two" }) }
          }
          def3: (string){ |((string){ "one" }, (string){ "two" }) }
        }
      }
    }
    #def2: (#struct){
      _in(:main): (_){ _ }
      def2: (#struct){
        _in(:main): (#struct){
          name: (string){ string }
          age: (string){ |((string){ "one" }, (string){ "two" }) }
        }
        def3: (string){ |((string){ "one" }, (string){ "two" }) }
      }
    }
    #def3: (#struct){
      _in(:main): ~(reduced.#Input)
      def3: (string){ |((string){ "one" }, (string){ "two" }) }
    }
    in: (struct){
      name: (string){ "foobar" }
    }
    out: (#struct){
      _in(:main): (#struct){
        name: (string){ "foobar" }
      }
      def2: (#struct){
        _in(:main): (#struct){
          name: (string){ "foobar" }
          age: (string){ |((string){ "one" }, (string){ "two" }) }
        }
        def3: (string){ |((string){ "one" }, (string){ "two" }) }
      }
    }
  }
  full: (struct){
    cronjob: (struct){
      foobar: (#struct){
        image: (string){ "foobar:latest" }
        imagePullPolicy: (string){ |(*(string){ "Always" }, (string){ "IfNotPresent" }, (string){ "Never" }) }
      }
    }
    #CronjobConfig: (#struct){
      image: (string){ string }
      imagePullPolicy: (string){ |((string){ "IfNotPresent" }, (string){ "Always" }, (string){ "Never" }) }
    }
    #PodConfig: (#struct){
      image: (string){ string }
      imagePullPolicy: (string){ |((string){ "IfNotPresent" }, (string){ "Always" }, (string){ "Never" }) }
    }
    #ContainerConfig: (#struct){
      image: (string){ string }
      imagePullPolicy: (string){ |((string){ "IfNotPresent" }, (string){ "Always" }, (string){ "Never" }) }
    }
    _#cronjob(:main): (#struct){
      _config(:main): ~(full.#CronjobConfig)
      out: (#struct){
        spec: (#struct){
          jobTemplate: (#struct){
            spec: (#struct){
              template: (#struct){
                _config(:main): (#struct){
                  image: (string){ string }
                  imagePullPolicy: (string){ |((string){ "IfNotPresent" }, (string){ "Always" }, (string){ "Never" }) }
                }
                spec: (#struct){
                  containers: (#list){
                    0: (#struct){
                      _config(:main): (#struct){
                        image: (string){ string }
                        imagePullPolicy: (string){ |((string){ "IfNotPresent" }, (string){ "Always" }, (string){ "Never" }) }
                      }
                      imagePullPolicy: (string){ |((string){ "IfNotPresent" }, (string){ "Always" }, (string){ "Never" }) }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    _#pod(:main): (#struct){
      _config(:main): ~(full.#PodConfig)
      spec: (#struct){
        containers: (#list){
          0: (#struct){
            _config(:main): (#struct){
              image: (string){ string }
              imagePullPolicy: (string){ |((string){ "IfNotPresent" }, (string){ "Always" }, (string){ "Never" }) }
            }
            imagePullPolicy: (string){ |((string){ "IfNotPresent" }, (string){ "Always" }, (string){ "Never" }) }
          }
        }
      }
    }
    _#container(:main): (#struct){
      _config(:main): ~(full.#ContainerConfig)
      imagePullPolicy: (string){ |((string){ "IfNotPresent" }, (string){ "Always" }, (string){ "Never" }) }
    }
    objects: (struct){
      cronjob: (struct){
        foobar: (#struct){
          spec: (#struct){
            jobTemplate: (#struct){
              spec: (#struct){
                template: (#struct){
                  _config(:main): (#struct){
                    image: (string){ "foobar:latest" }
                    imagePullPolicy: (string){ |(*(string){ "Always" }, (string){ "IfNotPresent" }, (string){ "Never" }) }
                  }
                  spec: (#struct){
                    containers: (#list){
                      0: (#struct){
                        _config(:main): (#struct){
                          image: (string){ "foobar:latest" }
                          imagePullPolicy: (string){ |((string){ "IfNotPresent" }, (string){ "Always" }, (string){ "Never" }) }
                        }
                        imagePullPolicy: (string){ |((string){ "IfNotPresent" }, (string){ "Always" }, (string){ "Never" }) }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}
-- diff/-out/evalalpha<==>+out/eval --
diff old new
--- old
+++ new
@@ -28,10 +28,7 @@
       }
     }
     #def3: (#struct){
-      _in(:main): (#struct){
-        name: (string){ string }
-        age: (string){ |((string){ "one" }, (string){ "two" }) }
-      }
+      _in(:main): ~(reduced.#Input)
       def3: (string){ |((string){ "one" }, (string){ "two" }) }
     }
     in: (struct){
@@ -38,15 +35,15 @@
       name: (string){ "foobar" }
     }
     out: (#struct){
-      _in(:main): (struct){
+      _in(:main): (#struct){
         name: (string){ "foobar" }
       }
       def2: (#struct){
         _in(:main): (#struct){
           name: (string){ "foobar" }
-          age: (string){ "one" }
-        }
-        def3: (string){ "one" }
+          age: (string){ |((string){ "one" }, (string){ "two" }) }
+        }
+        def3: (string){ |((string){ "one" }, (string){ "two" }) }
       }
     }
   }
@@ -70,10 +67,7 @@
       imagePullPolicy: (string){ |((string){ "IfNotPresent" }, (string){ "Always" }, (string){ "Never" }) }
     }
     _#cronjob(:main): (#struct){
-      _config(:main): (#struct){
-        image: (string){ string }
-        imagePullPolicy: (string){ |((string){ "IfNotPresent" }, (string){ "Always" }, (string){ "Never" }) }
-      }
+      _config(:main): ~(full.#CronjobConfig)
       out: (#struct){
         spec: (#struct){
           jobTemplate: (#struct){
@@ -101,10 +95,7 @@
       }
     }
     _#pod(:main): (#struct){
-      _config(:main): (#struct){
-        image: (string){ string }
-        imagePullPolicy: (string){ |((string){ "IfNotPresent" }, (string){ "Always" }, (string){ "Never" }) }
-      }
+      _config(:main): ~(full.#PodConfig)
       spec: (#struct){
         containers: (#list){
           0: (#struct){
@@ -118,18 +109,15 @@
       }
     }
     _#container(:main): (#struct){
-      _config(:main): (#struct){
-        image: (string){ string }
-        imagePullPolicy: (string){ |((string){ "IfNotPresent" }, (string){ "Always" }, (string){ "Never" }) }
-      }
+      _config(:main): ~(full.#ContainerConfig)
       imagePullPolicy: (string){ |((string){ "IfNotPresent" }, (string){ "Always" }, (string){ "Never" }) }
     }
     objects: (struct){
       cronjob: (struct){
-        foobar: (struct){
-          spec: (struct){
-            jobTemplate: (struct){
-              spec: (struct){
+        foobar: (#struct){
+          spec: (#struct){
+            jobTemplate: (#struct){
+              spec: (#struct){
                 template: (#struct){
                   _config(:main): (#struct){
                     image: (string){ "foobar:latest" }
@@ -140,9 +128,9 @@
                       0: (#struct){
                         _config(:main): (#struct){
                           image: (string){ "foobar:latest" }
-                          imagePullPolicy: (string){ |(*(string){ "Always" }, (string){ "IfNotPresent" }, (string){ "Never" }) }
+                          imagePullPolicy: (string){ |((string){ "IfNotPresent" }, (string){ "Always" }, (string){ "Never" }) }
                         }
-                        imagePullPolicy: (string){ |(*(string){ "Always" }, (string){ "IfNotPresent" }, (string){ "Never" }) }
+                        imagePullPolicy: (string){ |((string){ "IfNotPresent" }, (string){ "Always" }, (string){ "Never" }) }
                       }
                     }
                   }
-- out/eval --
(struct){
  reduced: (struct){
    #Input: (#struct){
      name: (string){ string }
      age: (string){ |((string){ "one" }, (string){ "two" }) }
    }
    #def1: (#struct){
      _in(:main): (_){ _ }
      def1: (#struct){
        _in(:main): (_){ _ }
        def2: (#struct){
          _in(:main): (#struct){
            name: (string){ string }
            age: (string){ |((string){ "one" }, (string){ "two" }) }
          }
          def3: (string){ |((string){ "one" }, (string){ "two" }) }
        }
      }
    }
    #def2: (#struct){
      _in(:main): (_){ _ }
      def2: (#struct){
        _in(:main): (#struct){
          name: (string){ string }
          age: (string){ |((string){ "one" }, (string){ "two" }) }
        }
        def3: (string){ |((string){ "one" }, (string){ "two" }) }
      }
    }
    #def3: (#struct){
      _in(:main): (#struct){
        name: (string){ string }
        age: (string){ |((string){ "one" }, (string){ "two" }) }
      }
      def3: (string){ |((string){ "one" }, (string){ "two" }) }
    }
    in: (struct){
      name: (string){ "foobar" }
    }
    out: (#struct){
      _in(:main): (struct){
        name: (string){ "foobar" }
      }
      def2: (#struct){
        _in(:main): (#struct){
          name: (string){ "foobar" }
          age: (string){ "one" }
        }
        def3: (string){ "one" }
      }
    }
  }
  full: (struct){
    cronjob: (struct){
      foobar: (#struct){
        image: (string){ "foobar:latest" }
        imagePullPolicy: (string){ |(*(string){ "Always" }, (string){ "IfNotPresent" }, (string){ "Never" }) }
      }
    }
    #CronjobConfig: (#struct){
      image: (string){ string }
      imagePullPolicy: (string){ |((string){ "IfNotPresent" }, (string){ "Always" }, (string){ "Never" }) }
    }
    #PodConfig: (#struct){
      image: (string){ string }
      imagePullPolicy: (string){ |((string){ "IfNotPresent" }, (string){ "Always" }, (string){ "Never" }) }
    }
    #ContainerConfig: (#struct){
      image: (string){ string }
      imagePullPolicy: (string){ |((string){ "IfNotPresent" }, (string){ "Always" }, (string){ "Never" }) }
    }
    _#cronjob(:main): (#struct){
      _config(:main): (#struct){
        image: (string){ string }
        imagePullPolicy: (string){ |((string){ "IfNotPresent" }, (string){ "Always" }, (string){ "Never" }) }
      }
      out: (#struct){
        spec: (#struct){
          jobTemplate: (#struct){
            spec: (#struct){
              template: (#struct){
                _config(:main): (#struct){
                  image: (string){ string }
                  imagePullPolicy: (string){ |((string){ "IfNotPresent" }, (string){ "Always" }, (string){ "Never" }) }
                }
                spec: (#struct){
                  containers: (#list){
                    0: (#struct){
                      _config(:main): (#struct){
                        image: (string){ string }
                        imagePullPolicy: (string){ |((string){ "IfNotPresent" }, (string){ "Always" }, (string){ "Never" }) }
                      }
                      imagePullPolicy: (string){ |((string){ "IfNotPresent" }, (string){ "Always" }, (string){ "Never" }) }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    _#pod(:main): (#struct){
      _config(:main): (#struct){
        image: (string){ string }
        imagePullPolicy: (string){ |((string){ "IfNotPresent" }, (string){ "Always" }, (string){ "Never" }) }
      }
      spec: (#struct){
        containers: (#list){
          0: (#struct){
            _config(:main): (#struct){
              image: (string){ string }
              imagePullPolicy: (string){ |((string){ "IfNotPresent" }, (string){ "Always" }, (string){ "Never" }) }
            }
            imagePullPolicy: (string){ |((string){ "IfNotPresent" }, (string){ "Always" }, (string){ "Never" }) }
          }
        }
      }
    }
    _#container(:main): (#struct){
      _config(:main): (#struct){
        image: (string){ string }
        imagePullPolicy: (string){ |((string){ "IfNotPresent" }, (string){ "Always" }, (string){ "Never" }) }
      }
      imagePullPolicy: (string){ |((string){ "IfNotPresent" }, (string){ "Always" }, (string){ "Never" }) }
    }
    objects: (struct){
      cronjob: (struct){
        foobar: (struct){
          spec: (struct){
            jobTemplate: (struct){
              spec: (struct){
                template: (#struct){
                  _config(:main): (#struct){
                    image: (string){ "foobar:latest" }
                    imagePullPolicy: (string){ |(*(string){ "Always" }, (string){ "IfNotPresent" }, (string){ "Never" }) }
                  }
                  spec: (#struct){
                    containers: (#list){
                      0: (#struct){
                        _config(:main): (#struct){
                          image: (string){ "foobar:latest" }
                          imagePullPolicy: (string){ |(*(string){ "Always" }, (string){ "IfNotPresent" }, (string){ "Never" }) }
                        }
                        imagePullPolicy: (string){ |(*(string){ "Always" }, (string){ "IfNotPresent" }, (string){ "Never" }) }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}
-- out/compile --
--- in.cue
{
  reduced: {
    #Input: {
      name: string
      age: ("one"|"two")
      if (〈0;name〉 != _|_(explicit error (_|_ literal) in source)) {
        if true {
          age: "one"
        }
      }
    }
    #def1: {
      _in: _
      def1: (〈1;#def2〉 & {
        _in: 〈1;_in〉
      })
    }
    #def2: {
      _in: _
      def2: (〈1;#def3〉 & {
        _in: 〈1;_in〉
      })
    }
    #def3: {
      _in: 〈1;#Input〉
      def3: 〈0;_in〉.age
    }
    in: {
      name: "foobar"
    }
    out: (〈0;#def1〉 & {
      _in: 〈1;in〉
    }).def1
  }
  full: {
    cronjob: {
      [string]: 〈1;#CronjobConfig〉
    }
    #CronjobConfig: {
      〈1;#PodConfig〉
    }
    #PodConfig: {
      〈1;#ContainerConfig〉
    }
    #ContainerConfig: {
      image: string
      imagePullPolicy: ("IfNotPresent"|"Always"|"Never")
      if (〈0;image〉 != _|_(explicit error (_|_ literal) in source)) {
        if (〈import;strings〉.HasSuffix(〈1;image〉, ":latest") == true) {
          imagePullPolicy: ("IfNotPresent"|*"Always"|"Never")
        }
        if (〈import;strings〉.HasSuffix(〈1;image〉, ":latest") != true) {
          imagePullPolicy: (*"IfNotPresent"|"Always"|"Never")
        }
      }
    }
    _#cronjob: {
      _config: 〈1;#CronjobConfig〉
      out: {
        spec: {
          jobTemplate: {
            spec: {
              template: (〈5;_#pod〉 & {
                _config: 〈5;_config〉
              })
            }
          }
        }
      }
    }
    _#pod: {
      _config: 〈1;#PodConfig〉
      spec: {
        containers: [
          {
            (〈4;_#container〉 & {
              _config: 〈4;_config〉
            })
          },
        ]
      }
    }
    _#container: {
      _config: 〈1;#ContainerConfig〉
      imagePullPolicy: 〈0;_config〉.imagePullPolicy
    }
    cronjob: {
      foobar: {
        image: "foobar:latest"
      }
    }
    for k, v in 〈0;cronjob〉 {
      objects: {
        cronjob: {
          "\(〈3;k〉)": (〈4;_#cronjob〉 & {
            _config: 〈4;v〉
          }).out
        }
      }
    }
  }
}
