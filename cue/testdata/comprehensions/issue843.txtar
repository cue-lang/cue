-- in.cue --
package main

import "list"

#d1: {
	as: [...string]

	#c: [
		#f1 & {
			"as": list.Concat([["go"], as])
		},
	]
}

#d2: {
	p: *"." | string

	#c: [
		#f2 & {
			from: #d1 & {
				as: [p]
			}
		},
	]
}

#c1: {
	#c: [...#o]
	_
	...
}

#o: #f1 | #f2

#f1: {
	do: "f1"
	as: [...string]
}

#f2: {
	do:   "f2"
	from: #c1
}
-- out/eval/stats --
Leaks:  0
Freed:  73
Reused: 58
Allocs: 15
Retain: 7

Unifications: 57
Conjuncts:    138
Disjuncts:    80
-- out/evalalpha --
Errors:
#d2.#c.0.from.#c.0: 2 errors in empty disjunction:
#d1.#c.0.0: field not allowed:
    ./in.cue:10:10
    ./in.cue:10:23
#d1.#c.0.1: field not allowed:
    ./in.cue:10:10
    ./in.cue:10:31
#d2.#c.0.from.#c.0.0: field not allowed:
    ./in.cue:10:10
    ./in.cue:10:23
#d2.#c.0.from.#c.0.1: field not allowed:
    ./in.cue:10:10
    ./in.cue:10:31

Result:
(_|_){
  // [eval]
  #d1: (_|_){
    // [eval]
    as: (list){
    }
    #c: (_|_){
      // [eval]
      0: (_|_){
        // [eval]
        as: (_|_){
          // [eval] #d1.#c.0.0: field not allowed:
          //     ./in.cue:10:10
          //     ./in.cue:10:23
          // #d1.#c.0.1: field not allowed:
          //     ./in.cue:10:10
          //     ./in.cue:10:31
        }
        do: (string){ "f1" }
      }
    }
  }
  #d2: (_|_){
    // [eval]
    p: (string){ |(*(string){ "." }, (string){ string }) }
    #c: (_|_){
      // [eval]
      0: (_|_){
        // [eval]
        from: (_|_){
          // [eval]
          as: (#list){
            0: (string){ |(*(string){ "." }, (string){ string }) }
          }
          #c: (_|_){
            // [eval]
            0: (_|_){
              // [eval] #d2.#c.0.from.#c.0: 2 errors in empty disjunction:
              // #d2.#c.0.from.#c.0.0: field not allowed:
              //     ./in.cue:10:10
              //     ./in.cue:10:23
              // #d2.#c.0.from.#c.0.1: field not allowed:
              //     ./in.cue:10:10
              //     ./in.cue:10:31
              as: (list){ list }
              do: (string){ "f1" }
            }
          }
        }
        do: (string){ "f2" }
      }
    }
  }
  #c1: (_){
    _
    #c: (list){
    }
  }
  #o: (#struct){ |((#struct){
      do: (string){ "f1" }
      as: (list){
      }
    }, (#struct){
      do: (string){ "f2" }
      from: ~(#c1)
    }) }
  #f1: (#struct){
    do: (string){ "f1" }
    as: (list){
    }
  }
  #f2: (#struct){
    do: (string){ "f2" }
    from: ~(#c1)
  }
}
-- diff/-out/evalalpha<==>+out/eval --
diff old new
--- old
+++ new
@@ -1,35 +1,69 @@
-(struct){
-  #d1: (#struct){
-    as: (list){
-    }
-    #c: (#list){
-      0: (#struct){
+Errors:
+#d2.#c.0.from.#c.0: 2 errors in empty disjunction:
+#d1.#c.0.0: field not allowed:
+    ./in.cue:10:10
+    ./in.cue:10:23
+#d1.#c.0.1: field not allowed:
+    ./in.cue:10:10
+    ./in.cue:10:31
+#d2.#c.0.from.#c.0.0: field not allowed:
+    ./in.cue:10:10
+    ./in.cue:10:23
+#d2.#c.0.from.#c.0.1: field not allowed:
+    ./in.cue:10:10
+    ./in.cue:10:31
+
+Result:
+(_|_){
+  // [eval]
+  #d1: (_|_){
+    // [eval]
+    as: (list){
+    }
+    #c: (_|_){
+      // [eval]
+      0: (_|_){
+        // [eval]
+        as: (_|_){
+          // [eval] #d1.#c.0.0: field not allowed:
+          //     ./in.cue:10:10
+          //     ./in.cue:10:23
+          // #d1.#c.0.1: field not allowed:
+          //     ./in.cue:10:10
+          //     ./in.cue:10:31
+        }
         do: (string){ "f1" }
-        as: (#list){
-          0: (string){ "go" }
-        }
-      }
-    }
-  }
-  #d2: (#struct){
+      }
+    }
+  }
+  #d2: (_|_){
+    // [eval]
     p: (string){ |(*(string){ "." }, (string){ string }) }
-    #c: (#list){
-      0: (#struct){
-        do: (string){ "f2" }
-        from: (#struct){
-          #c: (#list){
-            0: (#struct){
-              do: (string){ "f1" }
-              as: (#list){
-                0: (string){ "go" }
-                1: (string){ |(*(string){ "." }, (string){ string }) }
-              }
-            }
-          }
+    #c: (_|_){
+      // [eval]
+      0: (_|_){
+        // [eval]
+        from: (_|_){
+          // [eval]
           as: (#list){
             0: (string){ |(*(string){ "." }, (string){ string }) }
           }
-        }
+          #c: (_|_){
+            // [eval]
+            0: (_|_){
+              // [eval] #d2.#c.0.from.#c.0: 2 errors in empty disjunction:
+              // #d2.#c.0.from.#c.0.0: field not allowed:
+              //     ./in.cue:10:10
+              //     ./in.cue:10:23
+              // #d2.#c.0.from.#c.0.1: field not allowed:
+              //     ./in.cue:10:10
+              //     ./in.cue:10:31
+              as: (list){ list }
+              do: (string){ "f1" }
+            }
+          }
+        }
+        do: (string){ "f2" }
       }
     }
   }
@@ -44,11 +78,7 @@
       }
     }, (#struct){
       do: (string){ "f2" }
-      from: (_){
-        _
-        #c: (list){
-        }
-      }
+      from: ~(#c1)
     }) }
   #f1: (#struct){
     do: (string){ "f1" }
@@ -57,10 +87,6 @@
   }
   #f2: (#struct){
     do: (string){ "f2" }
-    from: (_){
-      _
-      #c: (list){
-      }
-    }
+    from: ~(#c1)
   }
 }
-- diff/todo/p3 --
Reordering
-- out/eval --
(struct){
  #d1: (#struct){
    as: (list){
    }
    #c: (#list){
      0: (#struct){
        do: (string){ "f1" }
        as: (#list){
          0: (string){ "go" }
        }
      }
    }
  }
  #d2: (#struct){
    p: (string){ |(*(string){ "." }, (string){ string }) }
    #c: (#list){
      0: (#struct){
        do: (string){ "f2" }
        from: (#struct){
          #c: (#list){
            0: (#struct){
              do: (string){ "f1" }
              as: (#list){
                0: (string){ "go" }
                1: (string){ |(*(string){ "." }, (string){ string }) }
              }
            }
          }
          as: (#list){
            0: (string){ |(*(string){ "." }, (string){ string }) }
          }
        }
      }
    }
  }
  #c1: (_){
    _
    #c: (list){
    }
  }
  #o: (#struct){ |((#struct){
      do: (string){ "f1" }
      as: (list){
      }
    }, (#struct){
      do: (string){ "f2" }
      from: (_){
        _
        #c: (list){
        }
      }
    }) }
  #f1: (#struct){
    do: (string){ "f1" }
    as: (list){
    }
  }
  #f2: (#struct){
    do: (string){ "f2" }
    from: (_){
      _
      #c: (list){
      }
    }
  }
}
-- out/compile --
--- in.cue
{
  #d1: {
    as: [
      ...string,
    ]
    #c: [
      (〈2;#f1〉 & {
        as: 〈import;list〉.Concat([
          [
            "go",
          ],
          〈3;as〉,
        ])
      }),
    ]
  }
  #d2: {
    p: (*"."|string)
    #c: [
      (〈2;#f2〉 & {
        from: (〈3;#d1〉 & {
          as: [
            〈4;p〉,
          ]
        })
      }),
    ]
  }
  #c1: {
    #c: [
      ...〈2;#o〉,
    ]
    _
    ...
  }
  #o: (〈0;#f1〉|〈0;#f2〉)
  #f1: {
    do: "f1"
    as: [
      ...string,
    ]
  }
  #f2: {
    do: "f2"
    from: 〈1;#c1〉
  }
}
