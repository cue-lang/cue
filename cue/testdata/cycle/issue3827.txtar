-- in.cue --
reduced: {
	A: b: (A.c & {}).x
	A: null | { c: x: 1 }
}

full: {
	out: #Workflow.#Step & {
		uses: "actions/upload-artifact@v3"
		with: {
			name: "foo"
			path: "bar"
		}
	}
	
	Y=#Workflow: #Step: (Y.steps & {x: {}}).x
	
	#Workflow: null | {
		steps: [string]: {
			uses?: string
			with?: [string]: string
		}
	}
}
-- out/eval/stats --
Leaks:  6
Freed:  29
Reused: 22
Allocs: 13
Retain: 10

Unifications: 31
Conjuncts:    57
Disjuncts:    38
-- out/evalalpha --
Errors:
full.#Workflow: conflicting values null and {#Step:(#Workflow.steps & {x:{}}).x} (mismatched types null and struct):
    ./in.cue:15:15
    ./in.cue:17:13
full.out.uses: field not allowed:
    ./in.cue:8:3
full.out.with: field not allowed:
    ./in.cue:9:3
reduced.A: 2 errors in empty disjunction:
reduced.A: conflicting values null and {b:(A.c & {}).x} (mismatched types null and struct):
    ./in.cue:2:5
    ./in.cue:3:5
invalid operand A (found null, want list or struct):
    ./in.cue:2:9
full.#Workflow: 2 errors in empty disjunction::
    ./in.cue:7:7
invalid operand Y (found null, want list or struct):
    ./in.cue:15:23

Result:
(_|_){
  // [eval]
  reduced: (_|_){
    // [eval]
    A: (_|_){
      // [eval] reduced.A: 2 errors in empty disjunction:
      // reduced.A: conflicting values null and {b:(A.c & {}).x} (mismatched types null and struct):
      //     ./in.cue:2:5
      //     ./in.cue:3:5
      // invalid operand A (found null, want list or struct):
      //     ./in.cue:2:9
      b: (_){ _ }
    }
  }
  full: (_|_){
    // [eval]
    out: (_|_){
      // [eval]
      uses: (_|_){
        // [eval] full.out.uses: field not allowed:
        //     ./in.cue:8:3
      }
      with: (_|_){
        // [eval] full.out.with: field not allowed:
        //     ./in.cue:9:3
        name: (_|_){
          // [eval] full.out.with.name: field not allowed:
          //     ./in.cue:10:4
        }
        path: (_|_){
          // [eval] full.out.with.path: field not allowed:
          //     ./in.cue:11:4
        }
      }
    }
    #Workflow: (_|_){
      // [eval] full.#Workflow: conflicting values null and {#Step:(#Workflow.steps & {x:{}}).x} (mismatched types null and struct):
      //     ./in.cue:15:15
      //     ./in.cue:17:13
      // full.#Workflow: 2 errors in empty disjunction::
      //     ./in.cue:7:7
      // invalid operand Y (found null, want list or struct):
      //     ./in.cue:15:23
      #Step: (_){ _ }
    }
  }
}
-- diff/-out/evalalpha<==>+out/eval --
diff old new
--- old
+++ new
@@ -1,28 +1,67 @@
-(struct){
-  reduced: (struct){
-    A: (struct){
-      b: (int){ 1 }
-      c: (struct){
-        x: (int){ 1 }
-      }
-    }
-  }
-  full: (struct){
-    out: (#struct){
-      uses: (string){ "actions/upload-artifact@v3" }
-      with: (#struct){
-        name: (string){ "foo" }
-        path: (string){ "bar" }
-      }
-    }
-    #Workflow: (#struct){
-      #Step: (#struct){
-        uses?: (string){ string }
-        with?: (#struct){
-        }
-      }
-      steps: (#struct){
-      }
+Errors:
+full.#Workflow: conflicting values null and {#Step:(#Workflow.steps & {x:{}}).x} (mismatched types null and struct):
+    ./in.cue:15:15
+    ./in.cue:17:13
+full.out.uses: field not allowed:
+    ./in.cue:8:3
+full.out.with: field not allowed:
+    ./in.cue:9:3
+reduced.A: 2 errors in empty disjunction:
+reduced.A: conflicting values null and {b:(A.c & {}).x} (mismatched types null and struct):
+    ./in.cue:2:5
+    ./in.cue:3:5
+invalid operand A (found null, want list or struct):
+    ./in.cue:2:9
+full.#Workflow: 2 errors in empty disjunction::
+    ./in.cue:7:7
+invalid operand Y (found null, want list or struct):
+    ./in.cue:15:23
+
+Result:
+(_|_){
+  // [eval]
+  reduced: (_|_){
+    // [eval]
+    A: (_|_){
+      // [eval] reduced.A: 2 errors in empty disjunction:
+      // reduced.A: conflicting values null and {b:(A.c & {}).x} (mismatched types null and struct):
+      //     ./in.cue:2:5
+      //     ./in.cue:3:5
+      // invalid operand A (found null, want list or struct):
+      //     ./in.cue:2:9
+      b: (_){ _ }
+    }
+  }
+  full: (_|_){
+    // [eval]
+    out: (_|_){
+      // [eval]
+      uses: (_|_){
+        // [eval] full.out.uses: field not allowed:
+        //     ./in.cue:8:3
+      }
+      with: (_|_){
+        // [eval] full.out.with: field not allowed:
+        //     ./in.cue:9:3
+        name: (_|_){
+          // [eval] full.out.with.name: field not allowed:
+          //     ./in.cue:10:4
+        }
+        path: (_|_){
+          // [eval] full.out.with.path: field not allowed:
+          //     ./in.cue:11:4
+        }
+      }
+    }
+    #Workflow: (_|_){
+      // [eval] full.#Workflow: conflicting values null and {#Step:(#Workflow.steps & {x:{}}).x} (mismatched types null and struct):
+      //     ./in.cue:15:15
+      //     ./in.cue:17:13
+      // full.#Workflow: 2 errors in empty disjunction::
+      //     ./in.cue:7:7
+      // invalid operand Y (found null, want list or struct):
+      //     ./in.cue:15:23
+      #Step: (_){ _ }
     }
   }
 }
-- out/eval --
(struct){
  reduced: (struct){
    A: (struct){
      b: (int){ 1 }
      c: (struct){
        x: (int){ 1 }
      }
    }
  }
  full: (struct){
    out: (#struct){
      uses: (string){ "actions/upload-artifact@v3" }
      with: (#struct){
        name: (string){ "foo" }
        path: (string){ "bar" }
      }
    }
    #Workflow: (#struct){
      #Step: (#struct){
        uses?: (string){ string }
        with?: (#struct){
        }
      }
      steps: (#struct){
      }
    }
  }
}
-- out/compile --
--- in.cue
{
  reduced: {
    A: {
      b: (〈1;A〉.c & {}).x
    }
    A: (null|{
      c: {
        x: 1
      }
    })
  }
  full: {
    out: (〈0;#Workflow〉.#Step & {
      uses: "actions/upload-artifact@v3"
      with: {
        name: "foo"
        path: "bar"
      }
    })
    #Workflow: {
      #Step: (〈1;#Workflow〉.steps & {
        x: {}
      }).x
    }
    #Workflow: (null|{
      steps: {
        [string]: {
          uses?: string
          with?: {
            [string]: string
          }
        }
      }
    })
  }
}