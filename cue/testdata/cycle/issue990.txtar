-- in.cue --
// A simple discriminated element
#AC: {
	k: "simple"
	d: #C
}

// A recursive discriminated element
#AS: {
	k: "complex"
	d: #S
}

#R: {
	a: #AC | #AS
}

// The structure of the recursive element
#S: {
	n: string
	r: [string]: #R
}

// The structure of the simple element
#C: {
	n: string
}

#sub: {
	$p=#p: #AS
	dict: [string]: _

	for rn, rd in $p.d.r if rd.a.k == "complex" {
		let subs = #sub & {#p: rd.a}
		for sn, sd in subs.dict {
			dict: "\(rn)_\(sn)": sd
		}
	}
	for rn, rd in $p.d.r if rd.a.k == "simple" {
		dict: "\(rn)": rd
	}
}

// Data
_test: {
	c1: #AC
	c1: d: {
		n: "c1"
	}


	s3: #AS
	s3: d: {
		n: "s3"
		r: r1: a:c1
	}

	s2: #AS
	s2: d: {
		n: "s2"
		r: {
			r1: a: c1
			r2: a: s3
		}
	}

	s1: #AS
	s1: d: {
		n: "s1"
		r: {
			r1: a: c1
			r2: a: s2
		}
	}
}

//  Test

out: #sub & {#p: _test.s1}
-- diff/todo/p0 --
out.subs.subs.#p: invalid structural cycle
This seems to be the result of incorrect handling of disjunctions.
-- diff/todo/p3 --
Reordering
-- out/evalalpha/stats --
Leaks:  2075
Freed:  218
Reused: 218
Allocs: 2075
Retain: 0

Unifications: 205
Conjuncts:    6343
Disjuncts:    436
-- out/evalalpha --
Errors:
out.subs.subs: structural cycle:
    ./in.cue:34:17

Result:
(_|_){
  // [structural cycle]
  #AC: (#struct){
    k: (string){ "simple" }
    d: ~(#C)
  }
  #AS: (#struct){
    k: (string){ "complex" }
    d: ~(#S)
  }
  #R: (#struct){
    a: (#struct){
      k: (string){ "simple" }
      d: ~(#C)
    }
  }
  #S: (#struct){
    n: (string){ string }
    r: (#struct){
    }
  }
  #C: (#struct){
    n: (string){ string }
  }
  #sub: (#struct){
    #p: ~(#AS)
    dict: (#struct){
    }
    let subs#1multi = (〈3;#sub〉 & {
      #p: 〈2;rd〉.a
    })
  }
  _test: (struct){
    c1: (#struct){
      d: (#struct){
        n: (string){ "c1" }
      }
      k: (string){ "simple" }
    }
    s3: (#struct){
      d: (#struct){
        n: (string){ "s3" }
        r: (#struct){
          r1: (#struct){
            a: (#struct){
              d: (#struct){
                n: (string){ "c1" }
              }
              k: (string){ "simple" }
            }
          }
        }
      }
      k: (string){ "complex" }
    }
    s2: (#struct){
      d: (#struct){
        n: (string){ "s2" }
        r: (#struct){
          r1: (#struct){
            a: (#struct){
              d: (#struct){
                n: (string){ "c1" }
              }
              k: (string){ "simple" }
            }
          }
          r2: (#struct){
            a: (#struct){
              d: (#struct){
                n: (string){ "s3" }
                r: (#struct){
                  r1: (#struct){
                    a: (#struct){
                      d: (#struct){
                        n: (string){ "c1" }
                      }
                      k: (string){ "simple" }
                    }
                  }
                }
              }
              k: (string){ "complex" }
            }
          }
        }
      }
      k: (string){ "complex" }
    }
    s1: (#struct){
      d: (#struct){
        n: (string){ "s1" }
        r: (#struct){
          r1: (#struct){
            a: (#struct){
              d: (#struct){
                n: (string){ "c1" }
              }
              k: (string){ "simple" }
            }
          }
          r2: (#struct){
            a: (#struct){
              d: (#struct){
                n: (string){ "s2" }
                r: (#struct){
                  r1: (#struct){
                    a: (#struct){
                      d: (#struct){
                        n: (string){ "c1" }
                      }
                      k: (string){ "simple" }
                    }
                  }
                  r2: (#struct){
                    a: (#struct){
                      d: (#struct){
                        n: (string){ "s3" }
                        r: (#struct){
                          r1: (#struct){
                            a: (#struct){
                              d: (#struct){
                                n: (string){ "c1" }
                              }
                              k: (string){ "simple" }
                            }
                          }
                        }
                      }
                      k: (string){ "complex" }
                    }
                  }
                }
              }
              k: (string){ "complex" }
            }
          }
        }
      }
      k: (string){ "complex" }
    }
  }
  out: (_|_){
    // [structural cycle] out.subs.subs: structural cycle:
    //     ./in.cue:34:17
  }
}
-- diff/-out/evalalpha/stats<==>+out/eval/stats --
diff old new
--- old
+++ new
@@ -1,9 +1,9 @@
-Leaks:  7
-Freed:  3218
-Reused: 3200
-Allocs: 25
-Retain: 26
+Leaks:  2075
+Freed:  218
+Reused: 218
+Allocs: 2075
+Retain: 0
 
-Unifications: 2577
-Conjuncts:    12017
-Disjuncts:    3244
+Unifications: 205
+Conjuncts:    6343
+Disjuncts:    436
-- diff/-out/evalalpha<==>+out/eval --
diff old new
--- old
+++ new
@@ -1,32 +1,23 @@
-(struct){
+Errors:
+out.subs.subs: structural cycle:
+    ./in.cue:34:17
+
+Result:
+(_|_){
+  // [structural cycle]
   #AC: (#struct){
     k: (string){ "simple" }
-    d: (#struct){
-      n: (string){ string }
-    }
+    d: ~(#C)
   }
   #AS: (#struct){
     k: (string){ "complex" }
-    d: (#struct){
-      n: (string){ string }
-      r: (#struct){
-      }
-    }
+    d: ~(#S)
   }
   #R: (#struct){
-    a: (#struct){ |((#struct){
-        k: (string){ "simple" }
-        d: (#struct){
-          n: (string){ string }
-        }
-      }, (#struct){
-        k: (string){ "complex" }
-        d: (#struct){
-          n: (string){ string }
-          r: (#struct){
-          }
-        }
-      }) }
+    a: (#struct){
+      k: (string){ "simple" }
+      d: ~(#C)
+    }
   }
   #S: (#struct){
     n: (string){ string }
@@ -37,14 +28,7 @@
     n: (string){ string }
   }
   #sub: (#struct){
-    #p: (#struct){
-      k: (string){ "complex" }
-      d: (#struct){
-        n: (string){ string }
-        r: (#struct){
-        }
-      }
-    }
+    #p: ~(#AS)
     dict: (#struct){
     }
     let subs#1multi = (〈3;#sub〉 & {
@@ -53,195 +37,116 @@
   }
   _test: (struct){
     c1: (#struct){
-      k: (string){ "simple" }
       d: (#struct){
         n: (string){ "c1" }
       }
+      k: (string){ "simple" }
     }
     s3: (#struct){
-      k: (string){ "complex" }
       d: (#struct){
         n: (string){ "s3" }
         r: (#struct){
           r1: (#struct){
             a: (#struct){
-              k: (string){ "simple" }
-              d: (#struct){
-                n: (string){ "c1" }
-              }
-            }
-          }
-        }
-      }
+              d: (#struct){
+                n: (string){ "c1" }
+              }
+              k: (string){ "simple" }
+            }
+          }
+        }
+      }
+      k: (string){ "complex" }
     }
     s2: (#struct){
-      k: (string){ "complex" }
       d: (#struct){
         n: (string){ "s2" }
         r: (#struct){
           r1: (#struct){
             a: (#struct){
-              k: (string){ "simple" }
-              d: (#struct){
-                n: (string){ "c1" }
-              }
-            }
-          }
-          r2: (#struct){
-            a: (#struct){
-              k: (string){ "complex" }
+              d: (#struct){
+                n: (string){ "c1" }
+              }
+              k: (string){ "simple" }
+            }
+          }
+          r2: (#struct){
+            a: (#struct){
               d: (#struct){
                 n: (string){ "s3" }
                 r: (#struct){
                   r1: (#struct){
                     a: (#struct){
-                      k: (string){ "simple" }
-                      d: (#struct){
-                        n: (string){ "c1" }
-                      }
-                    }
-                  }
-                }
-              }
-            }
-          }
-        }
-      }
+                      d: (#struct){
+                        n: (string){ "c1" }
+                      }
+                      k: (string){ "simple" }
+                    }
+                  }
+                }
+              }
+              k: (string){ "complex" }
+            }
+          }
+        }
+      }
+      k: (string){ "complex" }
     }
     s1: (#struct){
-      k: (string){ "complex" }
-      d: (#struct){
-        n: (string){ "s1" }
-        r: (#struct){
-          r1: (#struct){
-            a: (#struct){
-              k: (string){ "simple" }
-              d: (#struct){
-                n: (string){ "c1" }
-              }
-            }
-          }
-          r2: (#struct){
-            a: (#struct){
-              k: (string){ "complex" }
-              d: (#struct){
-                n: (string){ "s2" }
-                r: (#struct){
-                  r1: (#struct){
-                    a: (#struct){
-                      k: (string){ "simple" }
-                      d: (#struct){
-                        n: (string){ "c1" }
-                      }
-                    }
-                  }
-                  r2: (#struct){
-                    a: (#struct){
-                      k: (string){ "complex" }
-                      d: (#struct){
-                        n: (string){ "s3" }
-                        r: (#struct){
-                          r1: (#struct){
-                            a: (#struct){
-                              k: (string){ "simple" }
-                              d: (#struct){
-                                n: (string){ "c1" }
-                              }
-                            }
-                          }
-                        }
-                      }
-                    }
-                  }
-                }
-              }
-            }
-          }
-        }
-      }
-    }
-  }
-  out: (#struct){
-    #p: (#struct){
-      k: (string){ "complex" }
-      d: (#struct){
-        n: (string){ "s1" }
-        r: (#struct){
-          r1: (#struct){
-            a: (#struct){
-              k: (string){ "simple" }
-              d: (#struct){
-                n: (string){ "c1" }
-              }
-            }
-          }
-          r2: (#struct){
-            a: (#struct){
-              k: (string){ "complex" }
-              d: (#struct){
-                n: (string){ "s2" }
-                r: (#struct){
-                  r1: (#struct){
-                    a: (#struct){
-                      k: (string){ "simple" }
-                      d: (#struct){
-                        n: (string){ "c1" }
-                      }
-                    }
-                  }
-                  r2: (#struct){
-                    a: (#struct){
-                      k: (string){ "complex" }
-                      d: (#struct){
-                        n: (string){ "s3" }
-                        r: (#struct){
-                          r1: (#struct){
-                            a: (#struct){
-                              k: (string){ "simple" }
-                              d: (#struct){
-                                n: (string){ "c1" }
-                              }
-                            }
-                          }
-                        }
-                      }
-                    }
-                  }
-                }
-              }
-            }
-          }
-        }
-      }
-    }
-    dict: (#struct){
-      r1: (#struct){
-        a: (#struct){
-          k: (string){ "simple" }
-          d: (#struct){
-            n: (string){ "c1" }
-          }
-        }
-      }
-      r2_r1: (#struct){
-        a: (#struct){
-          k: (string){ "simple" }
-          d: (#struct){
-            n: (string){ "c1" }
-          }
-        }
-      }
-      r2_r2_r1: (#struct){
-        a: (#struct){
-          k: (string){ "simple" }
-          d: (#struct){
-            n: (string){ "c1" }
-          }
-        }
-      }
-    }
-    let subs#1multi = (〈3;#sub〉 & {
-      #p: 〈2;rd〉.a
-    })
+      d: (#struct){
+        n: (string){ "s1" }
+        r: (#struct){
+          r1: (#struct){
+            a: (#struct){
+              d: (#struct){
+                n: (string){ "c1" }
+              }
+              k: (string){ "simple" }
+            }
+          }
+          r2: (#struct){
+            a: (#struct){
+              d: (#struct){
+                n: (string){ "s2" }
+                r: (#struct){
+                  r1: (#struct){
+                    a: (#struct){
+                      d: (#struct){
+                        n: (string){ "c1" }
+                      }
+                      k: (string){ "simple" }
+                    }
+                  }
+                  r2: (#struct){
+                    a: (#struct){
+                      d: (#struct){
+                        n: (string){ "s3" }
+                        r: (#struct){
+                          r1: (#struct){
+                            a: (#struct){
+                              d: (#struct){
+                                n: (string){ "c1" }
+                              }
+                              k: (string){ "simple" }
+                            }
+                          }
+                        }
+                      }
+                      k: (string){ "complex" }
+                    }
+                  }
+                }
+              }
+              k: (string){ "complex" }
+            }
+          }
+        }
+      }
+      k: (string){ "complex" }
+    }
+  }
+  out: (_|_){
+    // [structural cycle] out.subs.subs: structural cycle:
+    //     ./in.cue:34:17
   }
 }
-- out/eval/stats --
Leaks:  7
Freed:  3218
Reused: 3200
Allocs: 25
Retain: 26

Unifications: 2577
Conjuncts:    12017
Disjuncts:    3244
-- out/eval --
(struct){
  #AC: (#struct){
    k: (string){ "simple" }
    d: (#struct){
      n: (string){ string }
    }
  }
  #AS: (#struct){
    k: (string){ "complex" }
    d: (#struct){
      n: (string){ string }
      r: (#struct){
      }
    }
  }
  #R: (#struct){
    a: (#struct){ |((#struct){
        k: (string){ "simple" }
        d: (#struct){
          n: (string){ string }
        }
      }, (#struct){
        k: (string){ "complex" }
        d: (#struct){
          n: (string){ string }
          r: (#struct){
          }
        }
      }) }
  }
  #S: (#struct){
    n: (string){ string }
    r: (#struct){
    }
  }
  #C: (#struct){
    n: (string){ string }
  }
  #sub: (#struct){
    #p: (#struct){
      k: (string){ "complex" }
      d: (#struct){
        n: (string){ string }
        r: (#struct){
        }
      }
    }
    dict: (#struct){
    }
    let subs#1multi = (〈3;#sub〉 & {
      #p: 〈2;rd〉.a
    })
  }
  _test: (struct){
    c1: (#struct){
      k: (string){ "simple" }
      d: (#struct){
        n: (string){ "c1" }
      }
    }
    s3: (#struct){
      k: (string){ "complex" }
      d: (#struct){
        n: (string){ "s3" }
        r: (#struct){
          r1: (#struct){
            a: (#struct){
              k: (string){ "simple" }
              d: (#struct){
                n: (string){ "c1" }
              }
            }
          }
        }
      }
    }
    s2: (#struct){
      k: (string){ "complex" }
      d: (#struct){
        n: (string){ "s2" }
        r: (#struct){
          r1: (#struct){
            a: (#struct){
              k: (string){ "simple" }
              d: (#struct){
                n: (string){ "c1" }
              }
            }
          }
          r2: (#struct){
            a: (#struct){
              k: (string){ "complex" }
              d: (#struct){
                n: (string){ "s3" }
                r: (#struct){
                  r1: (#struct){
                    a: (#struct){
                      k: (string){ "simple" }
                      d: (#struct){
                        n: (string){ "c1" }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    s1: (#struct){
      k: (string){ "complex" }
      d: (#struct){
        n: (string){ "s1" }
        r: (#struct){
          r1: (#struct){
            a: (#struct){
              k: (string){ "simple" }
              d: (#struct){
                n: (string){ "c1" }
              }
            }
          }
          r2: (#struct){
            a: (#struct){
              k: (string){ "complex" }
              d: (#struct){
                n: (string){ "s2" }
                r: (#struct){
                  r1: (#struct){
                    a: (#struct){
                      k: (string){ "simple" }
                      d: (#struct){
                        n: (string){ "c1" }
                      }
                    }
                  }
                  r2: (#struct){
                    a: (#struct){
                      k: (string){ "complex" }
                      d: (#struct){
                        n: (string){ "s3" }
                        r: (#struct){
                          r1: (#struct){
                            a: (#struct){
                              k: (string){ "simple" }
                              d: (#struct){
                                n: (string){ "c1" }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  out: (#struct){
    #p: (#struct){
      k: (string){ "complex" }
      d: (#struct){
        n: (string){ "s1" }
        r: (#struct){
          r1: (#struct){
            a: (#struct){
              k: (string){ "simple" }
              d: (#struct){
                n: (string){ "c1" }
              }
            }
          }
          r2: (#struct){
            a: (#struct){
              k: (string){ "complex" }
              d: (#struct){
                n: (string){ "s2" }
                r: (#struct){
                  r1: (#struct){
                    a: (#struct){
                      k: (string){ "simple" }
                      d: (#struct){
                        n: (string){ "c1" }
                      }
                    }
                  }
                  r2: (#struct){
                    a: (#struct){
                      k: (string){ "complex" }
                      d: (#struct){
                        n: (string){ "s3" }
                        r: (#struct){
                          r1: (#struct){
                            a: (#struct){
                              k: (string){ "simple" }
                              d: (#struct){
                                n: (string){ "c1" }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    dict: (#struct){
      r1: (#struct){
        a: (#struct){
          k: (string){ "simple" }
          d: (#struct){
            n: (string){ "c1" }
          }
        }
      }
      r2_r1: (#struct){
        a: (#struct){
          k: (string){ "simple" }
          d: (#struct){
            n: (string){ "c1" }
          }
        }
      }
      r2_r2_r1: (#struct){
        a: (#struct){
          k: (string){ "simple" }
          d: (#struct){
            n: (string){ "c1" }
          }
        }
      }
    }
    let subs#1multi = (〈3;#sub〉 & {
      #p: 〈2;rd〉.a
    })
  }
}
-- out/compile --
--- in.cue
{
  #AC: {
    k: "simple"
    d: 〈1;#C〉
  }
  #AS: {
    k: "complex"
    d: 〈1;#S〉
  }
  #R: {
    a: (〈1;#AC〉|〈1;#AS〉)
  }
  #S: {
    n: string
    r: {
      [string]: 〈2;#R〉
    }
  }
  #C: {
    n: string
  }
  #sub: {
    #p: 〈1;#AS〉
    dict: {
      [string]: _
    }
    for rn, rd in 〈0;#p〉.d.r if (〈0;rd〉.a.k == "complex") {
      let subs#1multi = (〈3;#sub〉 & {
        #p: 〈2;rd〉.a
      })
      for sn, sd in 〈0;let subs#1〉.dict {
        dict: {
          "\(〈4;rn〉)_\(〈2;sn〉)": 〈2;sd〉
        }
      }
    }
    for rn, rd in 〈0;#p〉.d.r if (〈0;rd〉.a.k == "simple") {
      dict: {
        "\(〈2;rn〉)": 〈2;rd〉
      }
    }
  }
  _test: {
    c1: 〈1;#AC〉
    c1: {
      d: {
        n: "c1"
      }
    }
    s3: 〈1;#AS〉
    s3: {
      d: {
        n: "s3"
        r: {
          r1: {
            a: 〈4;c1〉
          }
        }
      }
    }
    s2: 〈1;#AS〉
    s2: {
      d: {
        n: "s2"
        r: {
          r1: {
            a: 〈4;c1〉
          }
          r2: {
            a: 〈4;s3〉
          }
        }
      }
    }
    s1: 〈1;#AS〉
    s1: {
      d: {
        n: "s1"
        r: {
          r1: {
            a: 〈4;c1〉
          }
          r2: {
            a: 〈4;s2〉
          }
        }
      }
    }
  }
  out: (〈0;#sub〉 & {
    #p: 〈1;_test〉.s1
  })
}
