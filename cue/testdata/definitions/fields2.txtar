-- in.cue --
#Resource: {
    someMsg: string
    obs: {} | *{missing: true}

    let pickMsg = [
        if obs.missing {msg: "\(someMsg)"},
        {msg: "bar"},
    ][0]
    patches: [{
        op:    "add"
        path:  "/metadata"
        value: pickMsg.msg
    }]
}

#Patches: [string]: _
#JSONPatch: {
    namespace?: string
    patch: [...#JSONOp]
    output: #Patches & {(namespace): patch}
}
#JSONOp: {
    op:    "add"
    path:  string
    value: _
} | {
    op:   "remove"
    path: string
}

#Main: {
    NS=namespace: string

    output: jsonPatch.output

    let jsonPatch = #JSONPatch & {
        let base = #Resource & {}
        let withMsg = base & {someMsg: "foo"}

        namespace: NS

        patch: withMsg.patches
    }
}
out: (#Main & {namespace: "ns1"}).output

-- out/evalalpha/stats --
Leaks:  111
Freed:  0
Reused: 0
Allocs: 111
Retain: 0

Unifications: 78
Conjuncts:    141
Disjuncts:    12
-- diff/-out/evalalpha/stats<==>+out/eval/stats --
diff old new
--- old
+++ new
@@ -1,9 +1,9 @@
-Leaks:  12
-Freed:  160
-Reused: 150
-Allocs: 22
-Retain: 20
+Leaks:  111
+Freed:  0
+Reused: 0
+Allocs: 111
+Retain: 0
 
-Unifications: 146
-Conjuncts:    331
-Disjuncts:    179
+Unifications: 78
+Conjuncts:    141
+Disjuncts:    12
-- out/eval/stats --
Leaks:  12
Freed:  160
Reused: 150
Allocs: 22
Retain: 20

Unifications: 146
Conjuncts:    331
Disjuncts:    179
-- out/evalalpha --
(struct){
  #Resource: (#struct){
    someMsg: (string){ string }
    obs: (#struct){ |(*(#struct){
        missing: (bool){ true }
      }, (#struct){
      }) }
    let pickMsg#1 = (#struct){
      msg: (_|_){
        // [incomplete] #Resource.pickMsg.msg: invalid interpolation: non-concrete value string (type string):
        //     ./in.cue:6:30
        //     ./in.cue:2:14
      }
    }
    patches: (#list){
      0: (#struct){
        op: (string){ "add" }
        path: (string){ "/metadata" }
        value: (_|_){
          // [incomplete] #Resource.pickMsg.msg: invalid interpolation: non-concrete value string (type string):
          //     ./in.cue:6:30
          //     ./in.cue:2:14
        }
      }
    }
  }
  #Patches: (#struct){
  }
  #JSONPatch: (#struct){
    namespace?: (string){ string }
    patch: (list){
    }
    output: (_|_){
      // [incomplete] #JSONPatch.output: cannot reference optional field: namespace:
      //     ./in.cue:20:26
    }
  }
  #JSONOp: (#struct){ |((#struct){
      op: (string){ "add" }
      path: (string){ string }
      value: (_){ _ }
    }, (#struct){
      op: (string){ "remove" }
      path: (string){ string }
    }) }
  #Main: (#struct){
    namespace: (string){ string }
    output: (_|_){
      // [incomplete] #Main.jsonPatch.output: key value of dynamic field must be concrete, found string:
      //     ./in.cue:20:26
      //     ./in.cue:18:17
    }
    let jsonPatch#2 = (#struct){
      let base#5 = (#struct){
        someMsg: (string){ string }
        obs: (#struct){ |(*(#struct){
            missing: (bool){ true }
          }, (#struct){
          }) }
        let pickMsg#1 = (#struct){
          msg: (_|_){
            // [incomplete] #Main.jsonPatch.base.pickMsg.msg: invalid interpolation: non-concrete value string (type string):
            //     ./in.cue:6:30
            //     ./in.cue:2:14
          }
        }
        patches: (#list){
          0: (#struct){
            op: (string){ "add" }
            path: (string){ "/metadata" }
            value: (_|_){
              // [incomplete] #Main.jsonPatch.base.pickMsg.msg: invalid interpolation: non-concrete value string (type string):
              //     ./in.cue:6:30
              //     ./in.cue:2:14
            }
          }
        }
      }
      let withMsg#6 = (#struct){
        someMsg: (string){ "foo" }
        obs: (#struct){ |(*(#struct){
            missing: (bool){ true }
          }, (#struct){
          }) }
        let pickMsg#1 = (#struct){
          msg: (_|_){
            // [incomplete] #Main.jsonPatch.base.pickMsg.msg: invalid interpolation: non-concrete value string (type string):
            //     ./in.cue:6:30
            //     ./in.cue:2:14
          }
        }
        patches: (#list){
          0: (#struct){
            op: (string){ "add" }
            path: (string){ "/metadata" }
            value: (_|_){
              // [incomplete] #Main.jsonPatch.base.pickMsg.msg: invalid interpolation: non-concrete value string (type string):
              //     ./in.cue:6:30
              //     ./in.cue:2:14
            }
          }
        }
      }
      namespace: (string){ string }
      patch: (#list){
        0: (_|_){
          // [incomplete] #Main.jsonPatch.patch.0: 2 errors in empty disjunction:
          // #Main.jsonPatch.patch.0.op: conflicting values "remove" and "add":
          //     ./in.cue:10:16
          //     ./in.cue:27:11
          // #Main.jsonPatch.patch.0.value: invalid interpolation: non-concrete value string (type string):
          //     ./in.cue:6:30
          //     ./in.cue:2:14
          op: (string){ "add" }
          path: (string){ "/metadata" }
          value: (_){ _ }
        }
      }
      output: (_|_){
        // [incomplete] #Main.jsonPatch.output: key value of dynamic field must be concrete, found string:
        //     ./in.cue:20:26
        //     ./in.cue:18:17
      }
    }
  }
  out: (#struct){
    ns1: (#list){
      0: (_|_){
        // [incomplete] jsonPatch.output.ns1.0: 2 errors in empty disjunction:
        // jsonPatch.output.ns1.0.op: conflicting values "remove" and "add":
        //     ./in.cue:10:16
        //     ./in.cue:27:11
        // jsonPatch.output.ns1.0.value: invalid interpolation: non-concrete value string (type string):
        //     ./in.cue:6:30
        //     ./in.cue:2:14
        op: (string){ "add" }
        path: (string){ "/metadata" }
        value: (_){ _ }
      }
    }
  }
}
-- diff/-out/evalalpha<==>+out/eval --
diff old new
--- old
+++ new
@@ -17,7 +17,7 @@
         op: (string){ "add" }
         path: (string){ "/metadata" }
         value: (_|_){
-          // [incomplete] #Resource.patches.0.value: invalid interpolation: non-concrete value string (type string):
+          // [incomplete] #Resource.pickMsg.msg: invalid interpolation: non-concrete value string (type string):
           //     ./in.cue:6:30
           //     ./in.cue:2:14
         }
@@ -46,38 +46,11 @@
   #Main: (#struct){
     namespace: (string){ string }
     output: (_|_){
-      // [incomplete] #Main.output: invalid non-ground value string (must be concrete string):
+      // [incomplete] #Main.jsonPatch.output: key value of dynamic field must be concrete, found string:
+      //     ./in.cue:20:26
       //     ./in.cue:18:17
-      //     ./in.cue:40:20
-      _: (#list){
-        0: (#struct){
-          op: (string){ "add" }
-          path: (string){ "/metadata" }
-          value: (string){ "foo" }
-        }
-      }
     }
     let jsonPatch#2 = (#struct){
-      namespace: (string){ string }
-      patch: (#list){
-        0: (#struct){
-          op: (string){ "add" }
-          path: (string){ "/metadata" }
-          value: (string){ "foo" }
-        }
-      }
-      output: (_|_){
-        // [incomplete] #Main.jsonPatch.output: invalid non-ground value string (must be concrete string):
-        //     ./in.cue:18:17
-        //     ./in.cue:40:20
-        _: (#list){
-          0: (#struct){
-            op: (string){ "add" }
-            path: (string){ "/metadata" }
-            value: (string){ "foo" }
-          }
-        }
-      }
       let base#5 = (#struct){
         someMsg: (string){ string }
         obs: (#struct){ |(*(#struct){
@@ -96,7 +69,7 @@
             op: (string){ "add" }
             path: (string){ "/metadata" }
             value: (_|_){
-              // [incomplete] #Main.jsonPatch.base.patches.0.value: invalid interpolation: non-concrete value string (type string):
+              // [incomplete] #Main.jsonPatch.base.pickMsg.msg: invalid interpolation: non-concrete value string (type string):
               //     ./in.cue:6:30
               //     ./in.cue:2:14
             }
@@ -110,24 +83,59 @@
           }, (#struct){
           }) }
         let pickMsg#1 = (#struct){
-          msg: (string){ "foo" }
-        }
-        patches: (#list){
-          0: (#struct){
-            op: (string){ "add" }
-            path: (string){ "/metadata" }
-            value: (string){ "foo" }
-          }
-        }
+          msg: (_|_){
+            // [incomplete] #Main.jsonPatch.base.pickMsg.msg: invalid interpolation: non-concrete value string (type string):
+            //     ./in.cue:6:30
+            //     ./in.cue:2:14
+          }
+        }
+        patches: (#list){
+          0: (#struct){
+            op: (string){ "add" }
+            path: (string){ "/metadata" }
+            value: (_|_){
+              // [incomplete] #Main.jsonPatch.base.pickMsg.msg: invalid interpolation: non-concrete value string (type string):
+              //     ./in.cue:6:30
+              //     ./in.cue:2:14
+            }
+          }
+        }
+      }
+      namespace: (string){ string }
+      patch: (#list){
+        0: (_|_){
+          // [incomplete] #Main.jsonPatch.patch.0: 2 errors in empty disjunction:
+          // #Main.jsonPatch.patch.0.op: conflicting values "remove" and "add":
+          //     ./in.cue:10:16
+          //     ./in.cue:27:11
+          // #Main.jsonPatch.patch.0.value: invalid interpolation: non-concrete value string (type string):
+          //     ./in.cue:6:30
+          //     ./in.cue:2:14
+          op: (string){ "add" }
+          path: (string){ "/metadata" }
+          value: (_){ _ }
+        }
+      }
+      output: (_|_){
+        // [incomplete] #Main.jsonPatch.output: key value of dynamic field must be concrete, found string:
+        //     ./in.cue:20:26
+        //     ./in.cue:18:17
       }
     }
   }
   out: (#struct){
     ns1: (#list){
-      0: (#struct){
-        op: (string){ "add" }
-        path: (string){ "/metadata" }
-        value: (string){ "foo" }
+      0: (_|_){
+        // [incomplete] jsonPatch.output.ns1.0: 2 errors in empty disjunction:
+        // jsonPatch.output.ns1.0.op: conflicting values "remove" and "add":
+        //     ./in.cue:10:16
+        //     ./in.cue:27:11
+        // jsonPatch.output.ns1.0.value: invalid interpolation: non-concrete value string (type string):
+        //     ./in.cue:6:30
+        //     ./in.cue:2:14
+        op: (string){ "add" }
+        path: (string){ "/metadata" }
+        value: (_){ _ }
       }
     }
   }
-- out/eval --
(struct){
  #Resource: (#struct){
    someMsg: (string){ string }
    obs: (#struct){ |(*(#struct){
        missing: (bool){ true }
      }, (#struct){
      }) }
    let pickMsg#1 = (#struct){
      msg: (_|_){
        // [incomplete] #Resource.pickMsg.msg: invalid interpolation: non-concrete value string (type string):
        //     ./in.cue:6:30
        //     ./in.cue:2:14
      }
    }
    patches: (#list){
      0: (#struct){
        op: (string){ "add" }
        path: (string){ "/metadata" }
        value: (_|_){
          // [incomplete] #Resource.patches.0.value: invalid interpolation: non-concrete value string (type string):
          //     ./in.cue:6:30
          //     ./in.cue:2:14
        }
      }
    }
  }
  #Patches: (#struct){
  }
  #JSONPatch: (#struct){
    namespace?: (string){ string }
    patch: (list){
    }
    output: (_|_){
      // [incomplete] #JSONPatch.output: cannot reference optional field: namespace:
      //     ./in.cue:20:26
    }
  }
  #JSONOp: (#struct){ |((#struct){
      op: (string){ "add" }
      path: (string){ string }
      value: (_){ _ }
    }, (#struct){
      op: (string){ "remove" }
      path: (string){ string }
    }) }
  #Main: (#struct){
    namespace: (string){ string }
    output: (_|_){
      // [incomplete] #Main.output: invalid non-ground value string (must be concrete string):
      //     ./in.cue:18:17
      //     ./in.cue:40:20
      _: (#list){
        0: (#struct){
          op: (string){ "add" }
          path: (string){ "/metadata" }
          value: (string){ "foo" }
        }
      }
    }
    let jsonPatch#2 = (#struct){
      namespace: (string){ string }
      patch: (#list){
        0: (#struct){
          op: (string){ "add" }
          path: (string){ "/metadata" }
          value: (string){ "foo" }
        }
      }
      output: (_|_){
        // [incomplete] #Main.jsonPatch.output: invalid non-ground value string (must be concrete string):
        //     ./in.cue:18:17
        //     ./in.cue:40:20
        _: (#list){
          0: (#struct){
            op: (string){ "add" }
            path: (string){ "/metadata" }
            value: (string){ "foo" }
          }
        }
      }
      let base#5 = (#struct){
        someMsg: (string){ string }
        obs: (#struct){ |(*(#struct){
            missing: (bool){ true }
          }, (#struct){
          }) }
        let pickMsg#1 = (#struct){
          msg: (_|_){
            // [incomplete] #Main.jsonPatch.base.pickMsg.msg: invalid interpolation: non-concrete value string (type string):
            //     ./in.cue:6:30
            //     ./in.cue:2:14
          }
        }
        patches: (#list){
          0: (#struct){
            op: (string){ "add" }
            path: (string){ "/metadata" }
            value: (_|_){
              // [incomplete] #Main.jsonPatch.base.patches.0.value: invalid interpolation: non-concrete value string (type string):
              //     ./in.cue:6:30
              //     ./in.cue:2:14
            }
          }
        }
      }
      let withMsg#6 = (#struct){
        someMsg: (string){ "foo" }
        obs: (#struct){ |(*(#struct){
            missing: (bool){ true }
          }, (#struct){
          }) }
        let pickMsg#1 = (#struct){
          msg: (string){ "foo" }
        }
        patches: (#list){
          0: (#struct){
            op: (string){ "add" }
            path: (string){ "/metadata" }
            value: (string){ "foo" }
          }
        }
      }
    }
  }
  out: (#struct){
    ns1: (#list){
      0: (#struct){
        op: (string){ "add" }
        path: (string){ "/metadata" }
        value: (string){ "foo" }
      }
    }
  }
}
