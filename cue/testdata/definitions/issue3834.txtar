-- in.cue --
// expose at top level
X: {
	_a: foo: true
	_a: _ | close({y!: z?: _})
	_b: _a & {y: {}}
	concrete: _b.y
	isTrue: concrete != _|_
}
{X}

sub: t1: {
	X: {
		_a: foo: true
		_a: _ | close({y!: z?: _})
		_b: _a & {y: {}}
		concrete: _b.y
	}
	{X}
}
sub: t2: {
	X: {
		_a: foo: true
		_a: _ | close({y!: z?: _})
		_b: _a & {y: {}}
		concrete: _b.y
	}
	X
}
sub: t3: {
	#X: {
		_a: foo: true
		_a: _ | close({y!: z?: _})
		_b: _a & {y: {}}
		concrete: _b.y
	}
	{#X}
}
sub: t4: {
	#X: {
		_a: foo: true
		_a: _ | close({y!: z?: _})
		_b: _a & {y: {}}
		concrete: _b.y
	}
	#X
}

full: {
	#Foo: {
		_data: Foo: true
		_data: _ | close({Extra!: optional?: _})

		_dataWithExtra: _data & {Extra: {}}

		out: _dataWithExtra.Extra != _|_
	}

	{#Foo}
}
-- out/evalalpha/stats --
Leaks:  0
Freed:  339
Reused: 305
Allocs: 34
Retain: 0

Unifications: 171
Conjuncts:    322
Disjuncts:    48
Notifications: 6

NumCloseIDs: 69
-- out/eval/stats --
Leaks:  24
Freed:  207
Reused: 200
Allocs: 31
Retain: 30

Unifications: 183
Conjuncts:    344
Disjuncts:    237
-- out/evalalpha --
(struct){
  X: (struct){
    _a: (struct){
      foo: (bool){ true }
    }
    _b: (struct){
      y: (struct){
      }
      foo: (bool){ true }
    }
    concrete: (struct){
    }
    isTrue: (bool){ true }
  }
  sub: (struct){
    t1: (struct){
      X: (struct){
        _a: (struct){
          foo: (bool){ true }
        }
        _b: (struct){
          y: (struct){
          }
          foo: (bool){ true }
        }
        concrete: (struct){
        }
      }
      _a: (struct){
        foo: (bool){ true }
      }
      _b: (struct){
        y: (struct){
        }
        foo: (bool){ true }
      }
      concrete: (struct){
      }
    }
    t2: (struct){
      X: (struct){
        _a: (struct){
          foo: (bool){ true }
        }
        _b: (struct){
          y: (struct){
          }
          foo: (bool){ true }
        }
        concrete: (struct){
        }
      }
      _a: (struct){
        foo: (bool){ true }
      }
      _b: (struct){
        y: (struct){
        }
        foo: (bool){ true }
      }
      concrete: (struct){
      }
    }
    t3: (#struct){
      #X: (#struct){
        _a: (#struct){
          foo: (bool){ true }
        }
        _b: (#struct){
          y: (#struct){
          }
          foo: (bool){ true }
        }
        concrete: (#struct){
        }
      }
      _a: (#struct){
        foo: (bool){ true }
      }
      _b: (#struct){
        y: (#struct){
        }
        foo: (bool){ true }
      }
      concrete: (#struct){
      }
    }
    t4: (#struct){
      #X: (#struct){
        _a: (#struct){
          foo: (bool){ true }
        }
        _b: (#struct){
          y: (#struct){
          }
          foo: (bool){ true }
        }
        concrete: (#struct){
        }
      }
      _a: (#struct){
        foo: (bool){ true }
      }
      _b: (#struct){
        y: (#struct){
        }
        foo: (bool){ true }
      }
      concrete: (#struct){
      }
    }
  }
  full: (#struct){
    #Foo: (#struct){
      _data: (#struct){
        Foo: (bool){ true }
      }
      _dataWithExtra: (#struct){
        Extra: (#struct){
        }
        Foo: (bool){ true }
      }
      out: (bool){ true }
    }
    _data: (#struct){
      Foo: (bool){ true }
    }
    _dataWithExtra: (#struct){
      Extra: (#struct){
      }
      Foo: (bool){ true }
    }
    out: (bool){ true }
  }
  _a: (struct){
    foo: (bool){ true }
  }
  _b: (struct){
    y: (struct){
    }
    foo: (bool){ true }
  }
  concrete: (struct){
  }
  isTrue: (bool){ true }
}
-- out/eval --
(struct){
  X: (struct){
    _a: (struct){
      foo: (bool){ true }
    }
    _b: (struct){
      foo: (bool){ true }
      y: (struct){
      }
    }
    concrete: (struct){
    }
    isTrue: (bool){ true }
  }
  _a: (struct){
    foo: (bool){ true }
  }
  _b: (struct){
    foo: (bool){ true }
    y: (struct){
    }
  }
  concrete: (struct){
  }
  isTrue: (bool){ true }
  sub: (struct){
    t1: (struct){
      X: (struct){
        _a: (struct){
          foo: (bool){ true }
        }
        _b: (struct){
          foo: (bool){ true }
          y: (struct){
          }
        }
        concrete: (struct){
        }
      }
      _a: (struct){
        foo: (bool){ true }
      }
      _b: (struct){
        foo: (bool){ true }
        y: (struct){
        }
      }
      concrete: (struct){
      }
    }
    t2: (struct){
      X: (struct){
        _a: (struct){
          foo: (bool){ true }
        }
        _b: (struct){
          foo: (bool){ true }
          y: (struct){
          }
        }
        concrete: (struct){
        }
      }
      _a: (struct){
        foo: (bool){ true }
      }
      _b: (struct){
        foo: (bool){ true }
        y: (struct){
        }
      }
      concrete: (struct){
      }
    }
    t3: (#struct){
      #X: (#struct){
        _a: (#struct){
          foo: (bool){ true }
        }
        _b: (#struct){
          foo: (bool){ true }
          y: (#struct){
          }
        }
        concrete: (#struct){
        }
      }
      _a: (#struct){
        foo: (bool){ true }
      }
      _b: (#struct){
        foo: (bool){ true }
        y: (#struct){
        }
      }
      concrete: (#struct){
      }
    }
    t4: (#struct){
      #X: (#struct){
        _a: (#struct){
          foo: (bool){ true }
        }
        _b: (#struct){
          foo: (bool){ true }
          y: (#struct){
          }
        }
        concrete: (#struct){
        }
      }
      _a: (#struct){
        foo: (bool){ true }
      }
      _b: (#struct){
        foo: (bool){ true }
        y: (#struct){
        }
      }
      concrete: (#struct){
      }
    }
  }
  full: (#struct){
    #Foo: (#struct){
      _data: (#struct){
        Foo: (bool){ true }
      }
      _dataWithExtra: (#struct){
        Foo: (bool){ true }
        Extra: (#struct){
        }
      }
      out: (bool){ true }
    }
    _data: (#struct){
      Foo: (bool){ true }
    }
    _dataWithExtra: (#struct){
      Foo: (bool){ true }
      Extra: (#struct){
      }
    }
    out: (bool){ true }
  }
}
-- out/compile --
--- in.cue
{
  X: {
    _a: {
      foo: true
    }
    _a: (_|close({
      y!: {
        z?: _
      }
    }))
    _b: (〈0;_a〉 & {
      y: {}
    })
    concrete: 〈0;_b〉.y
    isTrue: (〈0;concrete〉 != _|_(explicit error (_|_ literal) in source))
  }
  {
    〈1;X〉
  }
  sub: {
    t1: {
      X: {
        _a: {
          foo: true
        }
        _a: (_|close({
          y!: {
            z?: _
          }
        }))
        _b: (〈0;_a〉 & {
          y: {}
        })
        concrete: 〈0;_b〉.y
      }
      {
        〈1;X〉
      }
    }
  }
  sub: {
    t2: {
      X: {
        _a: {
          foo: true
        }
        _a: (_|close({
          y!: {
            z?: _
          }
        }))
        _b: (〈0;_a〉 & {
          y: {}
        })
        concrete: 〈0;_b〉.y
      }
      〈0;X〉
    }
  }
  sub: {
    t3: {
      #X: {
        _a: {
          foo: true
        }
        _a: (_|close({
          y!: {
            z?: _
          }
        }))
        _b: (〈0;_a〉 & {
          y: {}
        })
        concrete: 〈0;_b〉.y
      }
      {
        〈1;#X〉
      }
    }
  }
  sub: {
    t4: {
      #X: {
        _a: {
          foo: true
        }
        _a: (_|close({
          y!: {
            z?: _
          }
        }))
        _b: (〈0;_a〉 & {
          y: {}
        })
        concrete: 〈0;_b〉.y
      }
      〈0;#X〉
    }
  }
  full: {
    #Foo: {
      _data: {
        Foo: true
      }
      _data: (_|close({
        Extra!: {
          optional?: _
        }
      }))
      _dataWithExtra: (〈0;_data〉 & {
        Extra: {}
      })
      out: (〈0;_dataWithExtra〉.Extra != _|_(explicit error (_|_ literal) in source))
    }
    {
      〈1;#Foo〉
    }
  }
}
