-- in.cue --
c: "foo"
a: b: int
#Schema
#Schema: close({ a: b: int})

x: {
	c: "foo"
	a: b: int
	#Schema
	#Schema: close({ a: b: int})
}
-- out/eval/stats --
Leaks:  4
Freed:  14
Reused: 9
Allocs: 9
Retain: 6

Unifications: 18
Conjuncts:    32
Disjuncts:    20
-- out/eval --
(#struct){
  c: (string){ "foo" }
  a: (#struct){
    b: (int){ int }
  }
  #Schema: (#struct){
    a: (#struct){
      b: (int){ int }
    }
  }
  x: (#struct){
    c: (string){ "foo" }
    a: (#struct){
      b: (int){ int }
    }
    #Schema: (#struct){
      a: (#struct){
        b: (int){ int }
      }
    }
  }
}
-- out/compile --
--- in.cue
{
  c: "foo"
  a: {
    b: int
  }
  〈0;#Schema〉
  #Schema: close({
    a: {
      b: int
    }
  })
  x: {
    c: "foo"
    a: {
      b: int
    }
    〈0;#Schema〉
    #Schema: close({
      a: {
        b: int
      }
    })
  }
}
