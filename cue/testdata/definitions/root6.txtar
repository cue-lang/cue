-- in.cue --
c: "foo"
a: b: int
#Schema
#Schema: close({ a: b: int})

x: {
	c: "foo"
	a: b: int
	#Schema
	#Schema: close({ a: b: int})
}
-- out/eval/stats --
Leaks:  4
Freed:  14
Reused: 9
Allocs: 9
Retain: 6

Unifications: 18
Conjuncts:    32
Disjuncts:    20
-- out/evalalpha --
Errors:
c: field not allowed:
    ./in.cue:1:1
x: field not allowed:
    ./in.cue:6:1

Result:
(_|_){
  // [eval]
  c: (_|_){
    // [eval] c: field not allowed:
    //     ./in.cue:1:1
  }
  a: (#struct){
    b: (int){ int }
  }
  #Schema: (#struct){
    a: (#struct){
      b: (int){ int }
    }
  }
  x: (_|_){
    // [eval] x: field not allowed:
    //     ./in.cue:6:1
    c: (string){ "foo" }
    a: (#struct){
      b: (int){ int }
    }
    #Schema: (#struct){
      a: (#struct){
        b: (int){ int }
      }
    }
  }
}
-- diff/-out/evalalpha<==>+out/eval --
diff old new
--- old
+++ new
@@ -1,5 +1,16 @@
-(#struct){
-  c: (string){ "foo" }
+Errors:
+c: field not allowed:
+    ./in.cue:1:1
+x: field not allowed:
+    ./in.cue:6:1
+
+Result:
+(_|_){
+  // [eval]
+  c: (_|_){
+    // [eval] c: field not allowed:
+    //     ./in.cue:1:1
+  }
   a: (#struct){
     b: (int){ int }
   }
@@ -8,7 +19,9 @@
       b: (int){ int }
     }
   }
-  x: (#struct){
+  x: (_|_){
+    // [eval] x: field not allowed:
+    //     ./in.cue:6:1
     c: (string){ "foo" }
     a: (#struct){
       b: (int){ int }
-- out/eval --
(#struct){
  c: (string){ "foo" }
  a: (#struct){
    b: (int){ int }
  }
  #Schema: (#struct){
    a: (#struct){
      b: (int){ int }
    }
  }
  x: (#struct){
    c: (string){ "foo" }
    a: (#struct){
      b: (int){ int }
    }
    #Schema: (#struct){
      a: (#struct){
        b: (int){ int }
      }
    }
  }
}
-- out/compile --
--- in.cue
{
  c: "foo"
  a: {
    b: int
  }
  〈0;#Schema〉
  #Schema: close({
    a: {
      b: int
    }
  })
  x: {
    c: "foo"
    a: {
      b: int
    }
    〈0;#Schema〉
    #Schema: close({
      a: {
        b: int
      }
    })
  }
}