-- in.cue --
issue570: {
	results: #DecodeOutput
	results: result: "hello"

	#Output: {
		result: _
	} | {
		error: string
	}

	#DecodeOutput: #Output & {
		result?: [... string]
		...
	}
}

issue516: {
	#Def: {
		match: metrics: string: {}
	} | {}

	x: #Def
	x: match: metrics: "foo": {}
}

// issue #465
explicitDefaultError: {
	a: string | *_|_

	if a != "" {
	}
}

issue2916: {
	b: _
	[_]: c:      uint | *1
	[string]: c: >=3 | *3
}
issue3157: {
	foo: *42 | _
	foo: *43 | bool
}
-- issue3581.cue --
issue3581: reduced: {
	list: [...] | *[]
	list: ["\(c)" ]
	c: _
}
-- issue3576.cue --
issue3576: reduced: {
	#A: a!: string
	#B: {
		if false {
			dummy: {}
		}
	}
	foo: #B | #A
	foo: a: "1"
}
issue3576: full: {
	#Run: {
		run!: string
		options?: #Option | [#Option, ...]
		if options != _|_ {
			optionsValue: options
		}
	}

	#Copy: {
		copy!: string
		options?: #Option | [#Option, ...]
		if options != _|_ {
			optionsValue: options
		}
	}
	
	#Option: {}
	
	foo: #Run | #Copy
	foo: run: "make"
}
-- out/eval/stats --
Leaks:  0
Freed:  109
Reused: 99
Allocs: 10
Retain: 21

Unifications: 71
Conjuncts:    152
Disjuncts:    130
-- out/evalalpha --
Errors:
issue516.x: 2 errors in empty disjunction:
issue516.x.match: field not allowed:
    ./in.cue:23:5
issue516.x.match.metrics.foo: field not allowed:
    ./in.cue:23:21
issue570.results.result: conflicting values "hello" and [...string] (mismatched types string and list):
    ./in.cue:3:19
    ./in.cue:12:12

Result:
(_|_){
  // [eval]
  issue570: (_|_){
    // [eval]
    results: (_|_){
      // [eval]
      result: (_|_){
        // [eval] issue570.results.result: conflicting values "hello" and [...string] (mismatched types string and list):
        //     ./in.cue:3:19
        //     ./in.cue:12:12
      }
    }
    #Output: (#struct){ |((#struct){
        result: (_){ _ }
      }, (#struct){
        error: (string){ string }
      }) }
    #DecodeOutput: (#struct){ |((#struct){
        result: (list){
        }
      }, (#struct){
        result?: (list){
        }
        error: (string){ string }
      }) }
  }
  issue516: (_|_){
    // [eval]
    #Def: (#struct){ |((#struct){
        match: (#struct){
          metrics: (#struct){
            string: (#struct){
            }
          }
        }
      }, (#struct){
      }) }
    x: (_|_){
      // [eval] issue516.x: 2 errors in empty disjunction:
      // issue516.x.match: field not allowed:
      //     ./in.cue:23:5
      // issue516.x.match.metrics.foo: field not allowed:
      //     ./in.cue:23:21
      match: (struct){
        metrics: (struct){
          foo: (struct){
          }
        }
      }
    }
  }
  explicitDefaultError: (_|_){
    // [incomplete] explicitDefaultError: non-concrete value string in operand to !=:
    //     ./in.cue:30:5
    //     ./in.cue:28:5
    a: (string){ string }
  }
  issue2916: (struct){
    b: (struct){
      c: (int){ |((int){ &(>=3, int) }, (int){ 3 }) }
    }
  }
  issue3157: (struct){
    foo: ((bool|int)){ |((int){ 43 }, (bool){ bool }) }
  }
  issue3576: (struct){
    reduced: (struct){
      #A: (#struct){
        a!: (string){ string }
      }
      #B: (#struct){
      }
      foo: (#struct){
        a: (string){ "1" }
      }
    }
    full: (struct){
      #Run: (#struct){
        run!: (string){ string }
        options?: ((list|struct)){ |((#struct){
          }, (list){
            0: (#struct){
            }
          }) }
      }
      #Copy: (#struct){
        copy!: (string){ string }
        options?: ((list|struct)){ |((#struct){
          }, (list){
            0: (#struct){
            }
          }) }
      }
      #Option: (#struct){
      }
      foo: (#struct){
        run: (string){ "make" }
        options?: ((list|struct)){ |((#struct){
          }, (list){
            0: (#struct){
            }
          }) }
      }
    }
  }
  issue3581: (struct){
    reduced: (struct){
      list: (_|_){
        // [incomplete] issue3581.reduced.list: 2 errors in empty disjunction:
        // issue3581.reduced.list: incompatible list lengths (0 and 1):
        //     ./issue3581.cue:2:17
        // issue3581.reduced.list.0: invalid interpolation: non-concrete value _ (type _):
        //     ./issue3581.cue:3:9
        0: (_){ _ }
      }
      c: (_){ _ }
    }
  }
}
-- diff/-out/evalalpha<==>+out/eval --
diff old new
--- old
+++ new
@@ -1,15 +1,10 @@
 Errors:
 issue516.x: 2 errors in empty disjunction:
 issue516.x.match: field not allowed:
-    ./in.cue:20:6
-    ./in.cue:22:5
     ./in.cue:23:5
 issue516.x.match.metrics.foo: field not allowed:
-    ./in.cue:19:19
-    ./in.cue:22:5
     ./in.cue:23:21
 issue570.results.result: conflicting values "hello" and [...string] (mismatched types string and list):
-    ./in.cue:2:11
     ./in.cue:3:19
     ./in.cue:12:12
 
@@ -19,17 +14,12 @@
   issue570: (_|_){
     // [eval]
     results: (_|_){
-      // [eval] issue570.results.result: conflicting values "hello" and [...string] (mismatched types string and list):
-      //     ./in.cue:2:11
-      //     ./in.cue:3:19
-      //     ./in.cue:12:12
+      // [eval]
       result: (_|_){
         // [eval] issue570.results.result: conflicting values "hello" and [...string] (mismatched types string and list):
-        //     ./in.cue:2:11
         //     ./in.cue:3:19
         //     ./in.cue:12:12
       }
-      error: (string){ string }
     }
     #Output: (#struct){ |((#struct){
         result: (_){ _ }
@@ -59,18 +49,10 @@
     x: (_|_){
       // [eval] issue516.x: 2 errors in empty disjunction:
       // issue516.x.match: field not allowed:
-      //     ./in.cue:20:6
-      //     ./in.cue:22:5
       //     ./in.cue:23:5
       // issue516.x.match.metrics.foo: field not allowed:
-      //     ./in.cue:19:19
-      //     ./in.cue:22:5
       //     ./in.cue:23:21
-      match: (_|_){
-        // [eval] issue516.x.match: field not allowed:
-        //     ./in.cue:20:6
-        //     ./in.cue:22:5
-        //     ./in.cue:23:5
+      match: (struct){
         metrics: (struct){
           foo: (struct){
           }
@@ -86,11 +68,11 @@
   }
   issue2916: (struct){
     b: (struct){
-      c: (int){ |(*(int){ 3 }, (int){ &(>=3, int) }) }
+      c: (int){ |((int){ &(>=3, int) }, (int){ 3 }) }
     }
   }
   issue3157: (struct){
-    foo: ((bool|int)){ |(*(int){ 43 }, (bool){ bool }) }
+    foo: ((bool|int)){ |((int){ 43 }, (bool){ bool }) }
   }
   issue3576: (struct){
     reduced: (struct){
@@ -136,13 +118,11 @@
     reduced: (struct){
       list: (_|_){
         // [incomplete] issue3581.reduced.list: 2 errors in empty disjunction:
-        // issue3581.reduced.list: incompatible list lengths (0 and 1)
+        // issue3581.reduced.list: incompatible list lengths (0 and 1):
+        //     ./issue3581.cue:2:17
         // issue3581.reduced.list.0: invalid interpolation: non-concrete value _ (type _):
         //     ./issue3581.cue:3:9
-        0: (_|_){
-          // [incomplete] issue3581.reduced.list.0: invalid interpolation: non-concrete value _ (type _):
-          //     ./issue3581.cue:3:9
-        }
+        0: (_){ _ }
       }
       c: (_){ _ }
     }
-- diff/todo/p3 --
Missing error positions.
-- diff/explanation --
The additional "field not allowed" error is correct and a message corresponding
to one of the conjuncts failing.
issue516.x.match: changes are okay and arguably better.
issue2916 and issue3157: the old evaluator incorrectly kept a default in the output.
-- out/eval --
Errors:
issue516.x: 2 errors in empty disjunction:
issue516.x.match: field not allowed:
    ./in.cue:20:6
    ./in.cue:22:5
    ./in.cue:23:5
issue516.x.match.metrics.foo: field not allowed:
    ./in.cue:19:19
    ./in.cue:22:5
    ./in.cue:23:21
issue570.results.result: conflicting values "hello" and [...string] (mismatched types string and list):
    ./in.cue:2:11
    ./in.cue:3:19
    ./in.cue:12:12

Result:
(_|_){
  // [eval]
  issue570: (_|_){
    // [eval]
    results: (_|_){
      // [eval] issue570.results.result: conflicting values "hello" and [...string] (mismatched types string and list):
      //     ./in.cue:2:11
      //     ./in.cue:3:19
      //     ./in.cue:12:12
      result: (_|_){
        // [eval] issue570.results.result: conflicting values "hello" and [...string] (mismatched types string and list):
        //     ./in.cue:2:11
        //     ./in.cue:3:19
        //     ./in.cue:12:12
      }
      error: (string){ string }
    }
    #Output: (#struct){ |((#struct){
        result: (_){ _ }
      }, (#struct){
        error: (string){ string }
      }) }
    #DecodeOutput: (#struct){ |((#struct){
        result: (list){
        }
      }, (#struct){
        result?: (list){
        }
        error: (string){ string }
      }) }
  }
  issue516: (_|_){
    // [eval]
    #Def: (#struct){ |((#struct){
        match: (#struct){
          metrics: (#struct){
            string: (#struct){
            }
          }
        }
      }, (#struct){
      }) }
    x: (_|_){
      // [eval] issue516.x: 2 errors in empty disjunction:
      // issue516.x.match: field not allowed:
      //     ./in.cue:20:6
      //     ./in.cue:22:5
      //     ./in.cue:23:5
      // issue516.x.match.metrics.foo: field not allowed:
      //     ./in.cue:19:19
      //     ./in.cue:22:5
      //     ./in.cue:23:21
      match: (_|_){
        // [eval] issue516.x.match: field not allowed:
        //     ./in.cue:20:6
        //     ./in.cue:22:5
        //     ./in.cue:23:5
        metrics: (struct){
          foo: (struct){
          }
        }
      }
    }
  }
  explicitDefaultError: (_|_){
    // [incomplete] explicitDefaultError: non-concrete value string in operand to !=:
    //     ./in.cue:30:5
    //     ./in.cue:28:5
    a: (string){ string }
  }
  issue2916: (struct){
    b: (struct){
      c: (int){ |(*(int){ 3 }, (int){ &(>=3, int) }) }
    }
  }
  issue3157: (struct){
    foo: ((bool|int)){ |(*(int){ 43 }, (bool){ bool }) }
  }
  issue3576: (struct){
    reduced: (struct){
      #A: (#struct){
        a!: (string){ string }
      }
      #B: (#struct){
      }
      foo: (#struct){
        a: (string){ "1" }
      }
    }
    full: (struct){
      #Run: (#struct){
        run!: (string){ string }
        options?: ((list|struct)){ |((#struct){
          }, (list){
            0: (#struct){
            }
          }) }
      }
      #Copy: (#struct){
        copy!: (string){ string }
        options?: ((list|struct)){ |((#struct){
          }, (list){
            0: (#struct){
            }
          }) }
      }
      #Option: (#struct){
      }
      foo: (#struct){
        run: (string){ "make" }
        options?: ((list|struct)){ |((#struct){
          }, (list){
            0: (#struct){
            }
          }) }
      }
    }
  }
  issue3581: (struct){
    reduced: (struct){
      list: (_|_){
        // [incomplete] issue3581.reduced.list: 2 errors in empty disjunction:
        // issue3581.reduced.list: incompatible list lengths (0 and 1)
        // issue3581.reduced.list.0: invalid interpolation: non-concrete value _ (type _):
        //     ./issue3581.cue:3:9
        0: (_|_){
          // [incomplete] issue3581.reduced.list.0: invalid interpolation: non-concrete value _ (type _):
          //     ./issue3581.cue:3:9
        }
      }
      c: (_){ _ }
    }
  }
}
-- out/compile --
--- in.cue
{
  issue570: {
    results: 〈0;#DecodeOutput〉
    results: {
      result: "hello"
    }
    #Output: ({
      result: _
    }|{
      error: string
    })
    #DecodeOutput: (〈0;#Output〉 & {
      result?: [
        ...string,
      ]
      ...
    })
  }
  issue516: {
    #Def: ({
      match: {
        metrics: {
          string: {}
        }
      }
    }|{})
    x: 〈0;#Def〉
    x: {
      match: {
        metrics: {
          foo: {}
        }
      }
    }
  }
  explicitDefaultError: {
    a: (string|*_|_(explicit error (_|_ literal) in source))
    if (〈0;a〉 != "") {}
  }
  issue2916: {
    b: _
    [_]: {
      c: (&(int, >=0)|*1)
    }
    [string]: {
      c: (>=3|*3)
    }
  }
  issue3157: {
    foo: (*42|_)
    foo: (*43|bool)
  }
}
--- issue3576.cue
{
  issue3576: {
    reduced: {
      #A: {
        a!: string
      }
      #B: {
        if false {
          dummy: {}
        }
      }
      foo: (〈0;#B〉|〈0;#A〉)
      foo: {
        a: "1"
      }
    }
  }
  issue3576: {
    full: {
      #Run: {
        run!: string
        options?: (〈1;#Option〉|[
          〈2;#Option〉,
          ...,
        ])
        if (〈0;options〉 != _|_(explicit error (_|_ literal) in source)) {
          optionsValue: 〈1;options〉
        }
      }
      #Copy: {
        copy!: string
        options?: (〈1;#Option〉|[
          〈2;#Option〉,
          ...,
        ])
        if (〈0;options〉 != _|_(explicit error (_|_ literal) in source)) {
          optionsValue: 〈1;options〉
        }
      }
      #Option: {}
      foo: (〈0;#Run〉|〈0;#Copy〉)
      foo: {
        run: "make"
      }
    }
  }
}
--- issue3581.cue
{
  issue3581: {
    reduced: {
      list: ([
        ...,
      ]|*[])
      list: [
        "\(〈1;c〉)",
      ]
      c: _
    }
  }
}
