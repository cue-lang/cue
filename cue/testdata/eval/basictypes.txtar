-- cue.mod/module.cue --
module: "test.com"
language: version: "v0.15.0"
-- in.cue --
top: {
	a: {_}
	b: _
}

scalar: {
	a: {string}
	b: string
	c: {{{number}}}
	d: number
}

// StructCmp works with accepted experiment status
comparison: {
	basicEquality: t: 42 == 42
	typeComparison: err: string == number  // error for non-concrete
	structEquality: t: {name: "test"} == {name: "test"}
	nestedComparison: t: {data: {value: 1}} == {data: {value: 1}}
}
-- out/eval/stats --
Leaks:  0
Freed:  9
Reused: 6
Allocs: 3
Retain: 0

Unifications: 9
Conjuncts:    14
Disjuncts:    9
-- out/evalalpha --
comparison.typeComparison.err: invalid operand string ('==' requires concrete value):
    ./in.cue:16:23
comparison.typeComparison.err: invalid operand number ('==' requires concrete value):
    ./in.cue:16:33
-- diff/-out/evalalpha<==>+out/eval --
diff old new
--- old
+++ new
@@ -1,12 +1,4 @@
-(struct){
-  top: (struct){
-    a: (_){ _ }
-    b: (_){ _ }
-  }
-  scalar: (struct){
-    a: (string){ string }
-    b: (string){ string }
-    c: (number){ number }
-    d: (number){ number }
-  }
-}
+comparison.typeComparison.err: invalid operand string ('==' requires concrete value):
+    ./in.cue:16:23
+comparison.typeComparison.err: invalid operand number ('==' requires concrete value):
+    ./in.cue:16:33
-- out/eval --
(struct){
  top: (struct){
    a: (_){ _ }
    b: (_){ _ }
  }
  scalar: (struct){
    a: (string){ string }
    b: (string){ string }
    c: (number){ number }
    d: (number){ number }
  }
}
-- out/compile --
comparison.typeComparison.err: invalid operand string ('==' requires concrete value):
    ./in.cue:16:23
comparison.typeComparison.err: invalid operand number ('==' requires concrete value):
    ./in.cue:16:33
--- in.cue
{
  top: {
    a: {
      _
    }
    b: _
  }
  scalar: {
    a: {
      string
    }
    b: string
    c: {
      {
        {
          number
        }
      }
    }
    d: number
  }
  comparison: {
    basicEquality: {
      t: (42 == 42)
    }
    typeComparison: {
      err: (string == number)
    }
    structEquality: {
      t: ({
        name: "test"
      } == {
        name: "test"
      })
    }
    nestedComparison: {
      t: ({
        data: {
          value: 1
        }
      } == {
        data: {
          value: 1
        }
      })
    }
  }
}
