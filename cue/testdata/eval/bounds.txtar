-- cue.mod/module.cue --
module: "x.test"
language: version: "v0.14.0"
-- in.cue --
x0: 5
x1: b5 & 30

b0: <x0 & >0
b1: b0 & int
b2: int & <5.5
b3: <10 & <=5
b4: >=20 & >20
b5: >=21 & >20
b6: int & >5 & <=6

simplifyExpr: {
	less1: <(<3)
	less2: <(<=3)
	less3: <=(<3)
	less4: <=(<=3)
	less5: <(!=3)
	less6: <=(!=3)

	gtr1: >(>3)
	gtr2: >(>=3)
	gtr3: >=(>3)
	gtr4: >=(>=3)
	gtr5: >(!=3)
	gtr6: >=(!=3)

	lg1: <(>3)
	lg2: <(>=3)
	lg3: <=(>3)
	lg4: <=(>=3)

	gl1: >(<3)
	gl2: >(<=3)
	gl3: >=(<3)
	gl4: >=(<=3)

	ne1: !=(!=3)
	ne2: !=(<3)
	ne3: !=(<=3)
	ne4: !=(>3)
	ne5: !=(>=3)

	s:      string
	n:      number
	i:      int
	f:      float
	b:      bytes
	basic1: <(i)
	basic2: >(n)
	basic3: >=(s)
	basic4: <=(f)
	basic5: <=(b)

	// Do NOT interpret this the same as `!= type`.
	bne1: !=(s)
	bne2: !=(n)
	bne3: !=(n)
	bne4: !=(i)
	bne5: !=(b)

	e1: <(=~"foo")
	e2: >(null)
}
-- binarystring.cue --
simplifyBinary: strings: {
  err1: p1: <"a" & >"b"
  err1: p2: >"b" & <"a"

  err2: p1: >"b" & <="a"
  err2: p2: <="a" & >"b"

  err3: p1: >="b" & <"b"
  err3: p2: <"b" & >="b"
  err3: p3: >"b" & <="b"
  err3: p4: <="b" & >"b"

  ok1: p1: >"a" & <"b"
  ok1: p2: <"b" & >"a"

  ok2: p1: >"a" & <="b"
  ok2: p2: <="b" & >"a"
  ok2: p3: >="a" & <"b"
  ok2: p4: <"b" & >="a"

  ok3: p1: >="b" & <="c"
  ok3: p2: <="c" & >="b"

  ok4: p1: >="b" & <="b"
}
simplifyBinary: byte: {
  err1: p1: <'a' & >'b'
  err1: p2: >'b' & <'a'

  err2: p1: >'b' & <='a'
  err2: p2: <='a' & >'b'

  err3: p1: >='b' & <'b'
  err3: p2: <'b' & >='b'
  err3: p3: >'b' & <='b'
  err3: p4: <='b' & >'b'

  ok1: p1: >'a' & <'b'
  ok1: p2: <'b' & >'a'

  ok2: p1: >'a' & <='b'
  ok2: p2: <='b' & >'a'
  ok2: p3: >='a' & <'b'
  ok2: p4: <'b' & >='a'

  ok3: p1: >='b' & <='c'
  ok3: p2: <='c' & >='b'

  ok4: p1: >='b' & <='b'
}
-- binary.cue --
simplifyBinary: float: {
  err1: p1: <1 & >2
  err1: p2: >2 & <1

  err2: p1: >2 & <=1
  err2: p2: <=1 & >2

  err3: p1: >=2 & <2
  err3: p2: <2 & >=2
  err3: p3: >2 & <=2
  err3: p4: <=2 & >2

  ok1: p1: >1 & <2
  ok1: p2: <2 & >1

  ok2: p1: >=2 & <=2
  ok2: p2: <=2 & >=2
}

simplifyBinary: integer: {
  [_]: [_]: int
  err1: p1: <1 & >2
  err1: p2: >2 & <1

  err2: p1: >2 & <=1
  err2: p2: <=1 & >2

  err3: p1: >=2 & <2
  err3: p2: <2 & >=2
  err3: p3: >2 & <=2
  err3: p4: <=2 & >2

  err4: p1: >1 & <2
  err4: p2: <2 & >1

  ok1: p1: >=2 & <=3
  ok1: p2: <=3 & >=2

  ok2: p1: >=2 & <=2
  ok2: p2: <=2 & >=2

  ok3: p1: >=2 & <3
  ok3: p2: >2 & <=3
  ok3: p3: <3 & >=2
  ok3: p4: <=3 & >2
}
-- equals.cue --
@experiment(structcmp)

equalScalar: {
	ok1: ==1
	ok1: 1

	ok2: [1, 2]
	ok2: ==[1, 2]

	err1: ==1
	err1: 2

	err2: [1, 2]
	err2: !=[1, 2]
}
equalStruct: {
	ok1: =={}
	ok1: {}

	ok2: {a: 1, b: 2}
	ok2: =={a: 1, b: 2}

	err1: =={}
	err1: {a: 1, b: 2}

	err2: {a: 1, b: 2}
	err2: !={a: 1, b: 2}
}
nonConcrete: {
	iErr0: =="foo"

	_int: int
	iErr1: ==_int

	iErr2: !=_int

	iErr3: ==_int
	iErr3: == 1

	iErr4: ==1
	iErr4: _int

	eErr5: =="foo"
	eErr5: _int

	eErr6: ==_int
	eErr6: "foo"
}
-- out/evalalpha/stats --
Leaks:  0
Freed:  205
Reused: 148
Allocs: 57
Retain: 0

Unifications: 197
Conjuncts:    357
Disjuncts:    0

NumCloseIDs: 4
-- diff/-out/evalalpha/stats<==>+out/eval/stats --
diff old new
--- old
+++ new
@@ -1,9 +1,11 @@
 Leaks:  0
-Freed:  191
-Reused: 186
-Allocs: 5
-Retain: 7
-
-Unifications: 191
-Conjuncts:    511
-Disjuncts:    200
+Freed:  205
+Reused: 148
+Allocs: 57
+Retain: 0
+
+Unifications: 197
+Conjuncts:    357
+Disjuncts:    0
+
+NumCloseIDs: 4
-- out/eval/stats --
Leaks:  0
Freed:  191
Reused: 186
Allocs: 5
Retain: 7

Unifications: 191
Conjuncts:    511
Disjuncts:    200
-- diff/explanation --
simplifyBinary.integer.ok2.*: v3 indicates correct type.
-- out/evalalpha --
Errors:
nonConcrete.eErr5: conflicting values =="foo" and int (mismatched types string and int):
    ./equals.cue:32:8
    ./equals.cue:43:9
    ./equals.cue:44:9
simplifyBinary.float.err1.p1: incompatible number bounds <1 and >2:
    ./binary.cue:2:18
    ./binary.cue:2:13
simplifyBinary.float.err1.p2: incompatible number bounds <1 and >2:
    ./binary.cue:3:18
    ./binary.cue:3:13
simplifyBinary.float.err2.p1: incompatible number bounds <=1 and >2:
    ./binary.cue:5:18
    ./binary.cue:5:13
simplifyBinary.float.err2.p2: incompatible number bounds <=1 and >2:
    ./binary.cue:6:19
    ./binary.cue:6:13
simplifyBinary.float.err3.p1: incompatible number bounds <2 and >=2:
    ./binary.cue:8:19
    ./binary.cue:8:13
simplifyBinary.float.err3.p2: incompatible number bounds <2 and >=2:
    ./binary.cue:9:18
    ./binary.cue:9:13
simplifyBinary.float.err3.p3: incompatible number bounds <=2 and >2:
    ./binary.cue:10:18
    ./binary.cue:10:13
simplifyBinary.float.err3.p4: incompatible number bounds <=2 and >2:
    ./binary.cue:11:19
    ./binary.cue:11:13
simplifyBinary.integer.err1.p1: incompatible integer bounds <1 and >2:
    ./binary.cue:22:18
    ./binary.cue:22:13
simplifyBinary.integer.err1.p2: incompatible integer bounds <1 and >2:
    ./binary.cue:23:18
    ./binary.cue:23:13
simplifyBinary.integer.err2.p1: incompatible integer bounds <=1 and >2:
    ./binary.cue:25:18
    ./binary.cue:25:13
simplifyBinary.integer.err2.p2: incompatible integer bounds <=1 and >2:
    ./binary.cue:26:19
    ./binary.cue:26:13
simplifyBinary.integer.err3.p1: incompatible integer bounds <2 and >=2:
    ./binary.cue:28:19
    ./binary.cue:28:13
simplifyBinary.integer.err3.p2: incompatible integer bounds <2 and >=2:
    ./binary.cue:29:18
    ./binary.cue:29:13
simplifyBinary.integer.err3.p3: incompatible integer bounds <=2 and >2:
    ./binary.cue:30:18
    ./binary.cue:30:13
simplifyBinary.integer.err3.p4: incompatible integer bounds <=2 and >2:
    ./binary.cue:31:19
    ./binary.cue:31:13
simplifyBinary.integer.err4.p1: incompatible integer bounds >1 and <2:
    ./binary.cue:33:18
    ./binary.cue:33:13
simplifyBinary.integer.err4.p2: incompatible integer bounds >1 and <2:
    ./binary.cue:34:18
    ./binary.cue:34:13
simplifyBinary.strings.err1.p1: incompatible string bounds <"a" and >"b":
    ./binarystring.cue:2:20
    ./binarystring.cue:2:13
simplifyBinary.strings.err1.p2: incompatible string bounds <"a" and >"b":
    ./binarystring.cue:3:20
    ./binarystring.cue:3:13
simplifyBinary.strings.err2.p1: incompatible string bounds <="a" and >"b":
    ./binarystring.cue:5:20
    ./binarystring.cue:5:13
simplifyBinary.strings.err2.p2: incompatible string bounds <="a" and >"b":
    ./binarystring.cue:6:21
    ./binarystring.cue:6:13
simplifyBinary.strings.err3.p1: incompatible string bounds <"b" and >="b":
    ./binarystring.cue:8:21
    ./binarystring.cue:8:13
simplifyBinary.strings.err3.p2: incompatible string bounds <"b" and >="b":
    ./binarystring.cue:9:20
    ./binarystring.cue:9:13
simplifyBinary.strings.err3.p3: incompatible string bounds <="b" and >"b":
    ./binarystring.cue:10:20
    ./binarystring.cue:10:13
simplifyBinary.strings.err3.p4: incompatible string bounds <="b" and >"b":
    ./binarystring.cue:11:21
    ./binarystring.cue:11:13
simplifyBinary.byte.err1.p1: incompatible bytes bounds <'a' and >'b':
    ./binarystring.cue:27:20
    ./binarystring.cue:27:13
simplifyBinary.byte.err1.p2: incompatible bytes bounds <'a' and >'b':
    ./binarystring.cue:28:20
    ./binarystring.cue:28:13
simplifyBinary.byte.err2.p1: incompatible bytes bounds <='a' and >'b':
    ./binarystring.cue:30:20
    ./binarystring.cue:30:13
simplifyBinary.byte.err2.p2: incompatible bytes bounds <='a' and >'b':
    ./binarystring.cue:31:21
    ./binarystring.cue:31:13
simplifyBinary.byte.err3.p1: incompatible bytes bounds <'b' and >='b':
    ./binarystring.cue:33:21
    ./binarystring.cue:33:13
simplifyBinary.byte.err3.p2: incompatible bytes bounds <'b' and >='b':
    ./binarystring.cue:34:20
    ./binarystring.cue:34:13
simplifyBinary.byte.err3.p3: incompatible bytes bounds <='b' and >'b':
    ./binarystring.cue:35:20
    ./binarystring.cue:35:13
simplifyBinary.byte.err3.p4: incompatible bytes bounds <='b' and >'b':
    ./binarystring.cue:36:21
    ./binarystring.cue:36:13
equalScalar.err1: invalid value 2 (out of bound ==1):
    ./equals.cue:10:8
    ./equals.cue:11:8
equalScalar.err2: invalid value [1,2] (out of bound !=[1,2]):
    ./equals.cue:14:8
    ./equals.cue:13:8
equalStruct.err1: invalid value {a:1,b:2} (out of bound =={}):
    ./equals.cue:23:8
    ./equals.cue:24:8
equalStruct.err2: invalid value {a:1,b:2} (out of bound !={a:1,b:2}):
    ./equals.cue:27:8
    ./equals.cue:26:8
simplifyExpr.e2: cannot use null for bound >:
    ./in.cue:62:8

Result:
(_|_){
  // [eval]
  simplifyBinary: (_|_){
    // [eval]
    float: (_|_){
      // [eval]
      err1: (_|_){
        // [eval]
        p1: (_|_){
          // [eval] simplifyBinary.float.err1.p1: incompatible number bounds <1 and >2:
          //     ./binary.cue:2:18
          //     ./binary.cue:2:13
        }
        p2: (_|_){
          // [eval] simplifyBinary.float.err1.p2: incompatible number bounds <1 and >2:
          //     ./binary.cue:3:18
          //     ./binary.cue:3:13
        }
      }
      err2: (_|_){
        // [eval]
        p1: (_|_){
          // [eval] simplifyBinary.float.err2.p1: incompatible number bounds <=1 and >2:
          //     ./binary.cue:5:18
          //     ./binary.cue:5:13
        }
        p2: (_|_){
          // [eval] simplifyBinary.float.err2.p2: incompatible number bounds <=1 and >2:
          //     ./binary.cue:6:19
          //     ./binary.cue:6:13
        }
      }
      err3: (_|_){
        // [eval]
        p1: (_|_){
          // [eval] simplifyBinary.float.err3.p1: incompatible number bounds <2 and >=2:
          //     ./binary.cue:8:19
          //     ./binary.cue:8:13
        }
        p2: (_|_){
          // [eval] simplifyBinary.float.err3.p2: incompatible number bounds <2 and >=2:
          //     ./binary.cue:9:18
          //     ./binary.cue:9:13
        }
        p3: (_|_){
          // [eval] simplifyBinary.float.err3.p3: incompatible number bounds <=2 and >2:
          //     ./binary.cue:10:18
          //     ./binary.cue:10:13
        }
        p4: (_|_){
          // [eval] simplifyBinary.float.err3.p4: incompatible number bounds <=2 and >2:
          //     ./binary.cue:11:19
          //     ./binary.cue:11:13
        }
      }
      ok1: (struct){
        p1: (number){ &(>1, <2) }
        p2: (number){ &(>1, <2) }
      }
      ok2: (struct){
        p1: (number){ &(>=2, <=2) }
        p2: (number){ &(>=2, <=2) }
      }
    }
    integer: (_|_){
      // [eval]
      err1: (_|_){
        // [eval]
        p1: (_|_){
          // [eval] simplifyBinary.integer.err1.p1: incompatible integer bounds <1 and >2:
          //     ./binary.cue:22:18
          //     ./binary.cue:22:13
        }
        p2: (_|_){
          // [eval] simplifyBinary.integer.err1.p2: incompatible integer bounds <1 and >2:
          //     ./binary.cue:23:18
          //     ./binary.cue:23:13
        }
      }
      err2: (_|_){
        // [eval]
        p1: (_|_){
          // [eval] simplifyBinary.integer.err2.p1: incompatible integer bounds <=1 and >2:
          //     ./binary.cue:25:18
          //     ./binary.cue:25:13
        }
        p2: (_|_){
          // [eval] simplifyBinary.integer.err2.p2: incompatible integer bounds <=1 and >2:
          //     ./binary.cue:26:19
          //     ./binary.cue:26:13
        }
      }
      err3: (_|_){
        // [eval]
        p1: (_|_){
          // [eval] simplifyBinary.integer.err3.p1: incompatible integer bounds <2 and >=2:
          //     ./binary.cue:28:19
          //     ./binary.cue:28:13
        }
        p2: (_|_){
          // [eval] simplifyBinary.integer.err3.p2: incompatible integer bounds <2 and >=2:
          //     ./binary.cue:29:18
          //     ./binary.cue:29:13
        }
        p3: (_|_){
          // [eval] simplifyBinary.integer.err3.p3: incompatible integer bounds <=2 and >2:
          //     ./binary.cue:30:18
          //     ./binary.cue:30:13
        }
        p4: (_|_){
          // [eval] simplifyBinary.integer.err3.p4: incompatible integer bounds <=2 and >2:
          //     ./binary.cue:31:19
          //     ./binary.cue:31:13
        }
      }
      err4: (_|_){
        // [eval]
        p1: (_|_){
          // [eval] simplifyBinary.integer.err4.p1: incompatible integer bounds >1 and <2:
          //     ./binary.cue:33:18
          //     ./binary.cue:33:13
        }
        p2: (_|_){
          // [eval] simplifyBinary.integer.err4.p2: incompatible integer bounds >1 and <2:
          //     ./binary.cue:34:18
          //     ./binary.cue:34:13
        }
      }
      ok1: (struct){
        p1: (int){ &(>=2, <=3, int) }
        p2: (int){ &(>=2, <=3, int) }
      }
      ok2: (struct){
        p1: (int){ &(>=2, <=2, int) }
        p2: (int){ &(>=2, <=2, int) }
      }
      ok3: (struct){
        p1: (int){ &(>=2, <3, int) }
        p2: (int){ &(>2, <=3, int) }
        p3: (int){ &(>=2, <3, int) }
        p4: (int){ &(>2, <=3, int) }
      }
    }
    strings: (_|_){
      // [eval]
      err1: (_|_){
        // [eval]
        p1: (_|_){
          // [eval] simplifyBinary.strings.err1.p1: incompatible string bounds <"a" and >"b":
          //     ./binarystring.cue:2:20
          //     ./binarystring.cue:2:13
        }
        p2: (_|_){
          // [eval] simplifyBinary.strings.err1.p2: incompatible string bounds <"a" and >"b":
          //     ./binarystring.cue:3:20
          //     ./binarystring.cue:3:13
        }
      }
      err2: (_|_){
        // [eval]
        p1: (_|_){
          // [eval] simplifyBinary.strings.err2.p1: incompatible string bounds <="a" and >"b":
          //     ./binarystring.cue:5:20
          //     ./binarystring.cue:5:13
        }
        p2: (_|_){
          // [eval] simplifyBinary.strings.err2.p2: incompatible string bounds <="a" and >"b":
          //     ./binarystring.cue:6:21
          //     ./binarystring.cue:6:13
        }
      }
      err3: (_|_){
        // [eval]
        p1: (_|_){
          // [eval] simplifyBinary.strings.err3.p1: incompatible string bounds <"b" and >="b":
          //     ./binarystring.cue:8:21
          //     ./binarystring.cue:8:13
        }
        p2: (_|_){
          // [eval] simplifyBinary.strings.err3.p2: incompatible string bounds <"b" and >="b":
          //     ./binarystring.cue:9:20
          //     ./binarystring.cue:9:13
        }
        p3: (_|_){
          // [eval] simplifyBinary.strings.err3.p3: incompatible string bounds <="b" and >"b":
          //     ./binarystring.cue:10:20
          //     ./binarystring.cue:10:13
        }
        p4: (_|_){
          // [eval] simplifyBinary.strings.err3.p4: incompatible string bounds <="b" and >"b":
          //     ./binarystring.cue:11:21
          //     ./binarystring.cue:11:13
        }
      }
      ok1: (struct){
        p1: (string){ &(>"a", <"b") }
        p2: (string){ &(>"a", <"b") }
      }
      ok2: (struct){
        p1: (string){ &(>"a", <="b") }
        p2: (string){ &(>"a", <="b") }
        p3: (string){ &(>="a", <"b") }
        p4: (string){ &(>="a", <"b") }
      }
      ok3: (struct){
        p1: (string){ &(>="b", <="c") }
        p2: (string){ &(>="b", <="c") }
      }
      ok4: (struct){
        p1: (string){ &(>="b", <="b") }
      }
    }
    byte: (_|_){
      // [eval]
      err1: (_|_){
        // [eval]
        p1: (_|_){
          // [eval] simplifyBinary.byte.err1.p1: incompatible bytes bounds <'a' and >'b':
          //     ./binarystring.cue:27:20
          //     ./binarystring.cue:27:13
        }
        p2: (_|_){
          // [eval] simplifyBinary.byte.err1.p2: incompatible bytes bounds <'a' and >'b':
          //     ./binarystring.cue:28:20
          //     ./binarystring.cue:28:13
        }
      }
      err2: (_|_){
        // [eval]
        p1: (_|_){
          // [eval] simplifyBinary.byte.err2.p1: incompatible bytes bounds <='a' and >'b':
          //     ./binarystring.cue:30:20
          //     ./binarystring.cue:30:13
        }
        p2: (_|_){
          // [eval] simplifyBinary.byte.err2.p2: incompatible bytes bounds <='a' and >'b':
          //     ./binarystring.cue:31:21
          //     ./binarystring.cue:31:13
        }
      }
      err3: (_|_){
        // [eval]
        p1: (_|_){
          // [eval] simplifyBinary.byte.err3.p1: incompatible bytes bounds <'b' and >='b':
          //     ./binarystring.cue:33:21
          //     ./binarystring.cue:33:13
        }
        p2: (_|_){
          // [eval] simplifyBinary.byte.err3.p2: incompatible bytes bounds <'b' and >='b':
          //     ./binarystring.cue:34:20
          //     ./binarystring.cue:34:13
        }
        p3: (_|_){
          // [eval] simplifyBinary.byte.err3.p3: incompatible bytes bounds <='b' and >'b':
          //     ./binarystring.cue:35:20
          //     ./binarystring.cue:35:13
        }
        p4: (_|_){
          // [eval] simplifyBinary.byte.err3.p4: incompatible bytes bounds <='b' and >'b':
          //     ./binarystring.cue:36:21
          //     ./binarystring.cue:36:13
        }
      }
      ok1: (struct){
        p1: (bytes){ &(>'a', <'b') }
        p2: (bytes){ &(>'a', <'b') }
      }
      ok2: (struct){
        p1: (bytes){ &(>'a', <='b') }
        p2: (bytes){ &(>'a', <='b') }
        p3: (bytes){ &(>='a', <'b') }
        p4: (bytes){ &(>='a', <'b') }
      }
      ok3: (struct){
        p1: (bytes){ &(>='b', <='c') }
        p2: (bytes){ &(>='b', <='c') }
      }
      ok4: (struct){
        p1: (bytes){ &(>='b', <='b') }
      }
    }
  }
  equalScalar: (_|_){
    // [eval]
    ok1: (int){ 1 }
    ok2: (#list){
      0: (int){ 1 }
      1: (int){ 2 }
    }
    err1: (_|_){
      // [eval] equalScalar.err1: invalid value 2 (out of bound ==1):
      //     ./equals.cue:10:8
      //     ./equals.cue:11:8
    }
    err2: (_|_){
      // [eval] equalScalar.err2: invalid value [1,2] (out of bound !=[1,2]):
      //     ./equals.cue:14:8
      //     ./equals.cue:13:8
      0: (int){ 1 }
      1: (int){ 2 }
    }
  }
  equalStruct: (_|_){
    // [eval]
    ok1: (struct){
    }
    ok2: (struct){
      a: (int){ 1 }
      b: (int){ 2 }
    }
    err1: (_|_){
      // [eval] equalStruct.err1: invalid value {a:1,b:2} (out of bound =={}):
      //     ./equals.cue:23:8
      //     ./equals.cue:24:8
      a: (int){ 1 }
      b: (int){ 2 }
    }
    err2: (_|_){
      // [eval] equalStruct.err2: invalid value {a:1,b:2} (out of bound !={a:1,b:2}):
      //     ./equals.cue:27:8
      //     ./equals.cue:26:8
      a: (int){ 1 }
      b: (int){ 2 }
    }
  }
  nonConcrete: (_|_){
    // [eval]
    iErr0: (string){ =="foo" }
    _int: (int){ int }
    iErr1: (_|_){
      // [incomplete] nonConcrete.iErr1: non-concrete value _int for bound ==:
      //     ./equals.cue:33:11
    }
    iErr2: (_|_){
      // [incomplete] nonConcrete.iErr2: non-concrete value _int for bound !=:
      //     ./equals.cue:35:11
    }
    iErr3: (_|_){
      // [incomplete] nonConcrete.iErr3: non-concrete value _int for bound ==:
      //     ./equals.cue:37:11
    }
    iErr4: (int){ &(==1, int) }
    eErr5: (_|_){
      // [eval] nonConcrete.eErr5: conflicting values =="foo" and int (mismatched types string and int):
      //     ./equals.cue:32:8
      //     ./equals.cue:43:9
      //     ./equals.cue:44:9
    }
    eErr6: (_|_){
      // [incomplete] nonConcrete.eErr6: non-concrete value _int for bound ==:
      //     ./equals.cue:46:11
    }
  }
  x0: (int){ 5 }
  x1: (int){ 30 }
  b0: (number){ &(>0, <5) }
  b1: (int){ &(>0, <5, int) }
  b2: (int){ &(<5.5, int) }
  b3: (number){ <=5 }
  b4: (number){ >20 }
  b5: (number){ >=21 }
  b6: (int){ &(>5, <=6, int) }
  simplifyExpr: (_|_){
    // [eval]
    less1: (_|_){
      // [incomplete] simplifyExpr.less1: non-concrete value <3 for bound <:
      //     ./in.cue:13:11
    }
    less2: (_|_){
      // [incomplete] simplifyExpr.less2: non-concrete value <=3 for bound <:
      //     ./in.cue:14:11
    }
    less3: (_|_){
      // [incomplete] simplifyExpr.less3: non-concrete value <3 for bound <=:
      //     ./in.cue:15:12
    }
    less4: (_|_){
      // [incomplete] simplifyExpr.less4: non-concrete value <=3 for bound <=:
      //     ./in.cue:16:12
    }
    less5: (_|_){
      // [incomplete] simplifyExpr.less5: non-concrete value !=3 for bound <:
      //     ./in.cue:17:11
    }
    less6: (_|_){
      // [incomplete] simplifyExpr.less6: non-concrete value !=3 for bound <=:
      //     ./in.cue:18:12
    }
    gtr1: (_|_){
      // [incomplete] simplifyExpr.gtr1: non-concrete value >3 for bound >:
      //     ./in.cue:20:10
    }
    gtr2: (_|_){
      // [incomplete] simplifyExpr.gtr2: non-concrete value >=3 for bound >:
      //     ./in.cue:21:10
    }
    gtr3: (_|_){
      // [incomplete] simplifyExpr.gtr3: non-concrete value >3 for bound >=:
      //     ./in.cue:22:11
    }
    gtr4: (_|_){
      // [incomplete] simplifyExpr.gtr4: non-concrete value >=3 for bound >=:
      //     ./in.cue:23:11
    }
    gtr5: (_|_){
      // [incomplete] simplifyExpr.gtr5: non-concrete value !=3 for bound >:
      //     ./in.cue:24:10
    }
    gtr6: (_|_){
      // [incomplete] simplifyExpr.gtr6: non-concrete value !=3 for bound >=:
      //     ./in.cue:25:11
    }
    lg1: (_|_){
      // [incomplete] simplifyExpr.lg1: non-concrete value >3 for bound <:
      //     ./in.cue:27:9
    }
    lg2: (_|_){
      // [incomplete] simplifyExpr.lg2: non-concrete value >=3 for bound <:
      //     ./in.cue:28:9
    }
    lg3: (_|_){
      // [incomplete] simplifyExpr.lg3: non-concrete value >3 for bound <=:
      //     ./in.cue:29:10
    }
    lg4: (_|_){
      // [incomplete] simplifyExpr.lg4: non-concrete value >=3 for bound <=:
      //     ./in.cue:30:10
    }
    gl1: (_|_){
      // [incomplete] simplifyExpr.gl1: non-concrete value <3 for bound >:
      //     ./in.cue:32:9
    }
    gl2: (_|_){
      // [incomplete] simplifyExpr.gl2: non-concrete value <=3 for bound >:
      //     ./in.cue:33:9
    }
    gl3: (_|_){
      // [incomplete] simplifyExpr.gl3: non-concrete value <3 for bound >=:
      //     ./in.cue:34:10
    }
    gl4: (_|_){
      // [incomplete] simplifyExpr.gl4: non-concrete value <=3 for bound >=:
      //     ./in.cue:35:10
    }
    ne1: (_|_){
      // [incomplete] simplifyExpr.ne1: non-concrete value !=3 for bound !=:
      //     ./in.cue:37:10
    }
    ne2: (_|_){
      // [incomplete] simplifyExpr.ne2: non-concrete value <3 for bound !=:
      //     ./in.cue:38:10
    }
    ne3: (_|_){
      // [incomplete] simplifyExpr.ne3: non-concrete value <=3 for bound !=:
      //     ./in.cue:39:10
    }
    ne4: (_|_){
      // [incomplete] simplifyExpr.ne4: non-concrete value >3 for bound !=:
      //     ./in.cue:40:10
    }
    ne5: (_|_){
      // [incomplete] simplifyExpr.ne5: non-concrete value >=3 for bound !=:
      //     ./in.cue:41:10
    }
    s: (string){ string }
    n: (number){ number }
    i: (int){ int }
    f: (float){ float }
    b: (bytes){ bytes }
    basic1: (_|_){
      // [incomplete] simplifyExpr.basic1: non-concrete value i for bound <:
      //     ./in.cue:48:12
    }
    basic2: (_|_){
      // [incomplete] simplifyExpr.basic2: non-concrete value n for bound >:
      //     ./in.cue:49:12
    }
    basic3: (_|_){
      // [incomplete] simplifyExpr.basic3: non-concrete value s for bound >=:
      //     ./in.cue:50:13
    }
    basic4: (_|_){
      // [incomplete] simplifyExpr.basic4: non-concrete value f for bound <=:
      //     ./in.cue:51:13
    }
    basic5: (_|_){
      // [incomplete] simplifyExpr.basic5: non-concrete value b for bound <=:
      //     ./in.cue:52:13
    }
    bne1: (_|_){
      // [incomplete] simplifyExpr.bne1: non-concrete value s for bound !=:
      //     ./in.cue:55:11
    }
    bne2: (_|_){
      // [incomplete] simplifyExpr.bne2: non-concrete value n for bound !=:
      //     ./in.cue:56:11
    }
    bne3: (_|_){
      // [incomplete] simplifyExpr.bne3: non-concrete value n for bound !=:
      //     ./in.cue:57:11
    }
    bne4: (_|_){
      // [incomplete] simplifyExpr.bne4: non-concrete value i for bound !=:
      //     ./in.cue:58:11
    }
    bne5: (_|_){
      // [incomplete] simplifyExpr.bne5: non-concrete value b for bound !=:
      //     ./in.cue:59:11
    }
    e1: (_|_){
      // [incomplete] simplifyExpr.e1: non-concrete value =~"foo" for bound <:
      //     ./in.cue:61:8
    }
    e2: (_|_){
      // [eval] simplifyExpr.e2: cannot use null for bound >:
      //     ./in.cue:62:8
    }
  }
}
-- diff/-out/evalalpha<==>+out/eval --
diff old new
--- old
+++ new
@@ -3,114 +3,108 @@
     ./equals.cue:32:8
     ./equals.cue:43:9
     ./equals.cue:44:9
-simplifyBinary.byte.err1.p1: incompatible bytes bounds <'a' and >'b':
-    ./binarystring.cue:27:13
-    ./binarystring.cue:27:20
-simplifyBinary.byte.err1.p2: incompatible bytes bounds <'a' and >'b':
-    ./binarystring.cue:28:13
-    ./binarystring.cue:28:20
-simplifyBinary.byte.err2.p1: incompatible bytes bounds <='a' and >'b':
-    ./binarystring.cue:30:13
-    ./binarystring.cue:30:20
-simplifyBinary.byte.err2.p2: incompatible bytes bounds <='a' and >'b':
-    ./binarystring.cue:31:13
-    ./binarystring.cue:31:21
-simplifyBinary.byte.err3.p1: incompatible bytes bounds <'b' and >='b':
-    ./binarystring.cue:33:13
-    ./binarystring.cue:33:21
-simplifyBinary.byte.err3.p2: incompatible bytes bounds <'b' and >='b':
-    ./binarystring.cue:34:13
-    ./binarystring.cue:34:20
-simplifyBinary.byte.err3.p3: incompatible bytes bounds <='b' and >'b':
-    ./binarystring.cue:35:13
-    ./binarystring.cue:35:20
-simplifyBinary.byte.err3.p4: incompatible bytes bounds <='b' and >'b':
-    ./binarystring.cue:36:13
-    ./binarystring.cue:36:21
 simplifyBinary.float.err1.p1: incompatible number bounds <1 and >2:
-    ./binary.cue:2:13
     ./binary.cue:2:18
+    ./binary.cue:2:13
 simplifyBinary.float.err1.p2: incompatible number bounds <1 and >2:
-    ./binary.cue:3:13
     ./binary.cue:3:18
+    ./binary.cue:3:13
 simplifyBinary.float.err2.p1: incompatible number bounds <=1 and >2:
-    ./binary.cue:5:13
     ./binary.cue:5:18
+    ./binary.cue:5:13
 simplifyBinary.float.err2.p2: incompatible number bounds <=1 and >2:
-    ./binary.cue:6:13
     ./binary.cue:6:19
+    ./binary.cue:6:13
 simplifyBinary.float.err3.p1: incompatible number bounds <2 and >=2:
-    ./binary.cue:8:13
     ./binary.cue:8:19
+    ./binary.cue:8:13
 simplifyBinary.float.err3.p2: incompatible number bounds <2 and >=2:
-    ./binary.cue:9:13
     ./binary.cue:9:18
+    ./binary.cue:9:13
 simplifyBinary.float.err3.p3: incompatible number bounds <=2 and >2:
-    ./binary.cue:10:13
     ./binary.cue:10:18
+    ./binary.cue:10:13
 simplifyBinary.float.err3.p4: incompatible number bounds <=2 and >2:
-    ./binary.cue:11:13
     ./binary.cue:11:19
-simplifyBinary.integer.err1.p1: incompatible number bounds <1 and >2:
-    ./binary.cue:22:13
+    ./binary.cue:11:13
+simplifyBinary.integer.err1.p1: incompatible integer bounds <1 and >2:
     ./binary.cue:22:18
-simplifyBinary.integer.err1.p2: incompatible number bounds <1 and >2:
-    ./binary.cue:23:13
+    ./binary.cue:22:13
+simplifyBinary.integer.err1.p2: incompatible integer bounds <1 and >2:
     ./binary.cue:23:18
-simplifyBinary.integer.err2.p1: incompatible number bounds <=1 and >2:
-    ./binary.cue:25:13
+    ./binary.cue:23:13
+simplifyBinary.integer.err2.p1: incompatible integer bounds <=1 and >2:
     ./binary.cue:25:18
-simplifyBinary.integer.err2.p2: incompatible number bounds <=1 and >2:
-    ./binary.cue:26:13
+    ./binary.cue:25:13
+simplifyBinary.integer.err2.p2: incompatible integer bounds <=1 and >2:
     ./binary.cue:26:19
-simplifyBinary.integer.err3.p1: incompatible number bounds <2 and >=2:
-    ./binary.cue:28:13
+    ./binary.cue:26:13
+simplifyBinary.integer.err3.p1: incompatible integer bounds <2 and >=2:
     ./binary.cue:28:19
-simplifyBinary.integer.err3.p2: incompatible number bounds <2 and >=2:
-    ./binary.cue:29:13
+    ./binary.cue:28:13
+simplifyBinary.integer.err3.p2: incompatible integer bounds <2 and >=2:
     ./binary.cue:29:18
-simplifyBinary.integer.err3.p3: incompatible number bounds <=2 and >2:
-    ./binary.cue:30:13
+    ./binary.cue:29:13
+simplifyBinary.integer.err3.p3: incompatible integer bounds <=2 and >2:
     ./binary.cue:30:18
-simplifyBinary.integer.err3.p4: incompatible number bounds <=2 and >2:
-    ./binary.cue:31:13
+    ./binary.cue:30:13
+simplifyBinary.integer.err3.p4: incompatible integer bounds <=2 and >2:
     ./binary.cue:31:19
+    ./binary.cue:31:13
 simplifyBinary.integer.err4.p1: incompatible integer bounds >1 and <2:
-    ./binary.cue:21:8
-    ./binary.cue:21:13
-    ./binary.cue:33:13
     ./binary.cue:33:18
+    ./binary.cue:33:13
 simplifyBinary.integer.err4.p2: incompatible integer bounds >1 and <2:
-    ./binary.cue:21:8
-    ./binary.cue:21:13
-    ./binary.cue:34:13
     ./binary.cue:34:18
+    ./binary.cue:34:13
 simplifyBinary.strings.err1.p1: incompatible string bounds <"a" and >"b":
-    ./binarystring.cue:2:13
     ./binarystring.cue:2:20
+    ./binarystring.cue:2:13
 simplifyBinary.strings.err1.p2: incompatible string bounds <"a" and >"b":
-    ./binarystring.cue:3:13
     ./binarystring.cue:3:20
+    ./binarystring.cue:3:13
 simplifyBinary.strings.err2.p1: incompatible string bounds <="a" and >"b":
-    ./binarystring.cue:5:13
     ./binarystring.cue:5:20
+    ./binarystring.cue:5:13
 simplifyBinary.strings.err2.p2: incompatible string bounds <="a" and >"b":
-    ./binarystring.cue:6:13
     ./binarystring.cue:6:21
+    ./binarystring.cue:6:13
 simplifyBinary.strings.err3.p1: incompatible string bounds <"b" and >="b":
-    ./binarystring.cue:8:13
     ./binarystring.cue:8:21
+    ./binarystring.cue:8:13
 simplifyBinary.strings.err3.p2: incompatible string bounds <"b" and >="b":
-    ./binarystring.cue:9:13
     ./binarystring.cue:9:20
+    ./binarystring.cue:9:13
 simplifyBinary.strings.err3.p3: incompatible string bounds <="b" and >"b":
-    ./binarystring.cue:10:13
     ./binarystring.cue:10:20
+    ./binarystring.cue:10:13
 simplifyBinary.strings.err3.p4: incompatible string bounds <="b" and >"b":
-    ./binarystring.cue:11:13
     ./binarystring.cue:11:21
-equalScalar.ok2: invalid left-hand value to '==' (type _|_): equalScalar.ok2: invalid value [1,2] (out of bound ==[1,2]):
-    ./equals.cue:8:7
+    ./binarystring.cue:11:13
+simplifyBinary.byte.err1.p1: incompatible bytes bounds <'a' and >'b':
+    ./binarystring.cue:27:20
+    ./binarystring.cue:27:13
+simplifyBinary.byte.err1.p2: incompatible bytes bounds <'a' and >'b':
+    ./binarystring.cue:28:20
+    ./binarystring.cue:28:13
+simplifyBinary.byte.err2.p1: incompatible bytes bounds <='a' and >'b':
+    ./binarystring.cue:30:20
+    ./binarystring.cue:30:13
+simplifyBinary.byte.err2.p2: incompatible bytes bounds <='a' and >'b':
+    ./binarystring.cue:31:21
+    ./binarystring.cue:31:13
+simplifyBinary.byte.err3.p1: incompatible bytes bounds <'b' and >='b':
+    ./binarystring.cue:33:21
+    ./binarystring.cue:33:13
+simplifyBinary.byte.err3.p2: incompatible bytes bounds <'b' and >='b':
+    ./binarystring.cue:34:20
+    ./binarystring.cue:34:13
+simplifyBinary.byte.err3.p3: incompatible bytes bounds <='b' and >'b':
+    ./binarystring.cue:35:20
+    ./binarystring.cue:35:13
+simplifyBinary.byte.err3.p4: incompatible bytes bounds <='b' and >'b':
+    ./binarystring.cue:36:21
+    ./binarystring.cue:36:13
 equalScalar.err1: invalid value 2 (out of bound ==1):
     ./equals.cue:10:8
     ./equals.cue:11:8
@@ -117,12 +111,12 @@
 equalScalar.err2: invalid value [1,2] (out of bound !=[1,2]):
     ./equals.cue:14:8
     ./equals.cue:13:8
-equalStruct.ok2: invalid value {a:1,b:2} (out of bound =={a:1,b:2}):
-    ./equals.cue:21:7
-    ./equals.cue:20:7
 equalStruct.err1: invalid value {a:1,b:2} (out of bound =={}):
     ./equals.cue:23:8
     ./equals.cue:24:8
+equalStruct.err2: invalid value {a:1,b:2} (out of bound !={a:1,b:2}):
+    ./equals.cue:27:8
+    ./equals.cue:26:8
 simplifyExpr.e2: cannot use null for bound >:
     ./in.cue:62:8
 
@@ -137,13 +131,13 @@
         // [eval]
         p1: (_|_){
           // [eval] simplifyBinary.float.err1.p1: incompatible number bounds <1 and >2:
-          //     ./binary.cue:2:13
           //     ./binary.cue:2:18
+          //     ./binary.cue:2:13
         }
         p2: (_|_){
           // [eval] simplifyBinary.float.err1.p2: incompatible number bounds <1 and >2:
-          //     ./binary.cue:3:13
           //     ./binary.cue:3:18
+          //     ./binary.cue:3:13
         }
       }
       err2: (_|_){
@@ -150,13 +144,13 @@
         // [eval]
         p1: (_|_){
           // [eval] simplifyBinary.float.err2.p1: incompatible number bounds <=1 and >2:
-          //     ./binary.cue:5:13
           //     ./binary.cue:5:18
+          //     ./binary.cue:5:13
         }
         p2: (_|_){
           // [eval] simplifyBinary.float.err2.p2: incompatible number bounds <=1 and >2:
-          //     ./binary.cue:6:13
           //     ./binary.cue:6:19
+          //     ./binary.cue:6:13
         }
       }
       err3: (_|_){
@@ -163,23 +157,23 @@
         // [eval]
         p1: (_|_){
           // [eval] simplifyBinary.float.err3.p1: incompatible number bounds <2 and >=2:
-          //     ./binary.cue:8:13
           //     ./binary.cue:8:19
+          //     ./binary.cue:8:13
         }
         p2: (_|_){
           // [eval] simplifyBinary.float.err3.p2: incompatible number bounds <2 and >=2:
-          //     ./binary.cue:9:13
           //     ./binary.cue:9:18
+          //     ./binary.cue:9:13
         }
         p3: (_|_){
           // [eval] simplifyBinary.float.err3.p3: incompatible number bounds <=2 and >2:
-          //     ./binary.cue:10:13
           //     ./binary.cue:10:18
+          //     ./binary.cue:10:13
         }
         p4: (_|_){
           // [eval] simplifyBinary.float.err3.p4: incompatible number bounds <=2 and >2:
-          //     ./binary.cue:11:13
           //     ./binary.cue:11:19
+          //     ./binary.cue:11:13
         }
       }
       ok1: (struct){
@@ -196,50 +190,50 @@
       err1: (_|_){
         // [eval]
         p1: (_|_){
-          // [eval] simplifyBinary.integer.err1.p1: incompatible number bounds <1 and >2:
-          //     ./binary.cue:22:13
+          // [eval] simplifyBinary.integer.err1.p1: incompatible integer bounds <1 and >2:
           //     ./binary.cue:22:18
-        }
-        p2: (_|_){
-          // [eval] simplifyBinary.integer.err1.p2: incompatible number bounds <1 and >2:
-          //     ./binary.cue:23:13
+          //     ./binary.cue:22:13
+        }
+        p2: (_|_){
+          // [eval] simplifyBinary.integer.err1.p2: incompatible integer bounds <1 and >2:
           //     ./binary.cue:23:18
-        }
-      }
-      err2: (_|_){
-        // [eval]
-        p1: (_|_){
-          // [eval] simplifyBinary.integer.err2.p1: incompatible number bounds <=1 and >2:
-          //     ./binary.cue:25:13
+          //     ./binary.cue:23:13
+        }
+      }
+      err2: (_|_){
+        // [eval]
+        p1: (_|_){
+          // [eval] simplifyBinary.integer.err2.p1: incompatible integer bounds <=1 and >2:
           //     ./binary.cue:25:18
-        }
-        p2: (_|_){
-          // [eval] simplifyBinary.integer.err2.p2: incompatible number bounds <=1 and >2:
-          //     ./binary.cue:26:13
+          //     ./binary.cue:25:13
+        }
+        p2: (_|_){
+          // [eval] simplifyBinary.integer.err2.p2: incompatible integer bounds <=1 and >2:
           //     ./binary.cue:26:19
-        }
-      }
-      err3: (_|_){
-        // [eval]
-        p1: (_|_){
-          // [eval] simplifyBinary.integer.err3.p1: incompatible number bounds <2 and >=2:
-          //     ./binary.cue:28:13
+          //     ./binary.cue:26:13
+        }
+      }
+      err3: (_|_){
+        // [eval]
+        p1: (_|_){
+          // [eval] simplifyBinary.integer.err3.p1: incompatible integer bounds <2 and >=2:
           //     ./binary.cue:28:19
-        }
-        p2: (_|_){
-          // [eval] simplifyBinary.integer.err3.p2: incompatible number bounds <2 and >=2:
-          //     ./binary.cue:29:13
+          //     ./binary.cue:28:13
+        }
+        p2: (_|_){
+          // [eval] simplifyBinary.integer.err3.p2: incompatible integer bounds <2 and >=2:
           //     ./binary.cue:29:18
-        }
-        p3: (_|_){
-          // [eval] simplifyBinary.integer.err3.p3: incompatible number bounds <=2 and >2:
-          //     ./binary.cue:30:13
+          //     ./binary.cue:29:13
+        }
+        p3: (_|_){
+          // [eval] simplifyBinary.integer.err3.p3: incompatible integer bounds <=2 and >2:
           //     ./binary.cue:30:18
-        }
-        p4: (_|_){
-          // [eval] simplifyBinary.integer.err3.p4: incompatible number bounds <=2 and >2:
-          //     ./binary.cue:31:13
+          //     ./binary.cue:30:13
+        }
+        p4: (_|_){
+          // [eval] simplifyBinary.integer.err3.p4: incompatible integer bounds <=2 and >2:
           //     ./binary.cue:31:19
+          //     ./binary.cue:31:13
         }
       }
       err4: (_|_){
@@ -246,17 +240,13 @@
         // [eval]
         p1: (_|_){
           // [eval] simplifyBinary.integer.err4.p1: incompatible integer bounds >1 and <2:
-          //     ./binary.cue:21:8
-          //     ./binary.cue:21:13
-          //     ./binary.cue:33:13
           //     ./binary.cue:33:18
+          //     ./binary.cue:33:13
         }
         p2: (_|_){
           // [eval] simplifyBinary.integer.err4.p2: incompatible integer bounds >1 and <2:
-          //     ./binary.cue:21:8
-          //     ./binary.cue:21:13
-          //     ./binary.cue:34:13
           //     ./binary.cue:34:18
+          //     ./binary.cue:34:13
         }
       }
       ok1: (struct){
@@ -280,13 +270,13 @@
         // [eval]
         p1: (_|_){
           // [eval] simplifyBinary.strings.err1.p1: incompatible string bounds <"a" and >"b":
-          //     ./binarystring.cue:2:13
           //     ./binarystring.cue:2:20
+          //     ./binarystring.cue:2:13
         }
         p2: (_|_){
           // [eval] simplifyBinary.strings.err1.p2: incompatible string bounds <"a" and >"b":
-          //     ./binarystring.cue:3:13
           //     ./binarystring.cue:3:20
+          //     ./binarystring.cue:3:13
         }
       }
       err2: (_|_){
@@ -293,13 +283,13 @@
         // [eval]
         p1: (_|_){
           // [eval] simplifyBinary.strings.err2.p1: incompatible string bounds <="a" and >"b":
-          //     ./binarystring.cue:5:13
           //     ./binarystring.cue:5:20
+          //     ./binarystring.cue:5:13
         }
         p2: (_|_){
           // [eval] simplifyBinary.strings.err2.p2: incompatible string bounds <="a" and >"b":
-          //     ./binarystring.cue:6:13
           //     ./binarystring.cue:6:21
+          //     ./binarystring.cue:6:13
         }
       }
       err3: (_|_){
@@ -306,23 +296,23 @@
         // [eval]
         p1: (_|_){
           // [eval] simplifyBinary.strings.err3.p1: incompatible string bounds <"b" and >="b":
-          //     ./binarystring.cue:8:13
           //     ./binarystring.cue:8:21
+          //     ./binarystring.cue:8:13
         }
         p2: (_|_){
           // [eval] simplifyBinary.strings.err3.p2: incompatible string bounds <"b" and >="b":
-          //     ./binarystring.cue:9:13
           //     ./binarystring.cue:9:20
+          //     ./binarystring.cue:9:13
         }
         p3: (_|_){
           // [eval] simplifyBinary.strings.err3.p3: incompatible string bounds <="b" and >"b":
-          //     ./binarystring.cue:10:13
           //     ./binarystring.cue:10:20
+          //     ./binarystring.cue:10:13
         }
         p4: (_|_){
           // [eval] simplifyBinary.strings.err3.p4: incompatible string bounds <="b" and >"b":
-          //     ./binarystring.cue:11:13
           //     ./binarystring.cue:11:21
+          //     ./binarystring.cue:11:13
         }
       }
       ok1: (struct){
@@ -349,13 +339,13 @@
         // [eval]
         p1: (_|_){
           // [eval] simplifyBinary.byte.err1.p1: incompatible bytes bounds <'a' and >'b':
-          //     ./binarystring.cue:27:13
           //     ./binarystring.cue:27:20
+          //     ./binarystring.cue:27:13
         }
         p2: (_|_){
           // [eval] simplifyBinary.byte.err1.p2: incompatible bytes bounds <'a' and >'b':
-          //     ./binarystring.cue:28:13
           //     ./binarystring.cue:28:20
+          //     ./binarystring.cue:28:13
         }
       }
       err2: (_|_){
@@ -362,13 +352,13 @@
         // [eval]
         p1: (_|_){
           // [eval] simplifyBinary.byte.err2.p1: incompatible bytes bounds <='a' and >'b':
-          //     ./binarystring.cue:30:13
           //     ./binarystring.cue:30:20
+          //     ./binarystring.cue:30:13
         }
         p2: (_|_){
           // [eval] simplifyBinary.byte.err2.p2: incompatible bytes bounds <='a' and >'b':
-          //     ./binarystring.cue:31:13
           //     ./binarystring.cue:31:21
+          //     ./binarystring.cue:31:13
         }
       }
       err3: (_|_){
@@ -375,23 +365,23 @@
         // [eval]
         p1: (_|_){
           // [eval] simplifyBinary.byte.err3.p1: incompatible bytes bounds <'b' and >='b':
-          //     ./binarystring.cue:33:13
           //     ./binarystring.cue:33:21
+          //     ./binarystring.cue:33:13
         }
         p2: (_|_){
           // [eval] simplifyBinary.byte.err3.p2: incompatible bytes bounds <'b' and >='b':
-          //     ./binarystring.cue:34:13
           //     ./binarystring.cue:34:20
+          //     ./binarystring.cue:34:13
         }
         p3: (_|_){
           // [eval] simplifyBinary.byte.err3.p3: incompatible bytes bounds <='b' and >'b':
-          //     ./binarystring.cue:35:13
           //     ./binarystring.cue:35:20
+          //     ./binarystring.cue:35:13
         }
         p4: (_|_){
           // [eval] simplifyBinary.byte.err3.p4: incompatible bytes bounds <='b' and >'b':
-          //     ./binarystring.cue:36:13
           //     ./binarystring.cue:36:21
+          //     ./binarystring.cue:36:13
         }
       }
       ok1: (struct){
@@ -416,9 +406,7 @@
   equalScalar: (_|_){
     // [eval]
     ok1: (int){ 1 }
-    ok2: (_|_){
-      // [eval] equalScalar.ok2: invalid left-hand value to '==' (type _|_): equalScalar.ok2: invalid value [1,2] (out of bound ==[1,2]):
-      //     ./equals.cue:8:7
+    ok2: (#list){
       0: (int){ 1 }
       1: (int){ 2 }
     }
@@ -439,10 +427,7 @@
     // [eval]
     ok1: (struct){
     }
-    ok2: (_|_){
-      // [eval] equalStruct.ok2: invalid value {a:1,b:2} (out of bound =={a:1,b:2}):
-      //     ./equals.cue:21:7
-      //     ./equals.cue:20:7
+    ok2: (struct){
       a: (int){ 1 }
       b: (int){ 2 }
     }
@@ -453,7 +438,10 @@
       a: (int){ 1 }
       b: (int){ 2 }
     }
-    err2: (struct){
+    err2: (_|_){
+      // [eval] equalStruct.err2: invalid value {a:1,b:2} (out of bound !={a:1,b:2}):
+      //     ./equals.cue:27:8
+      //     ./equals.cue:26:8
       a: (int){ 1 }
       b: (int){ 2 }
     }
@@ -473,8 +461,6 @@
     iErr3: (_|_){
       // [incomplete] nonConcrete.iErr3: non-concrete value _int for bound ==:
       //     ./equals.cue:37:11
-      // nonConcrete.iErr3: invalid left-hand value to '==' (type _|_): nonConcrete.iErr3: non-concrete value _int for bound ==:
-      //     ./equals.cue:38:9
     }
     iErr4: (int){ &(==1, int) }
     eErr5: (_|_){
-- out/eval --
Errors:
nonConcrete.eErr5: conflicting values =="foo" and int (mismatched types string and int):
    ./equals.cue:32:8
    ./equals.cue:43:9
    ./equals.cue:44:9
simplifyBinary.byte.err1.p1: incompatible bytes bounds <'a' and >'b':
    ./binarystring.cue:27:13
    ./binarystring.cue:27:20
simplifyBinary.byte.err1.p2: incompatible bytes bounds <'a' and >'b':
    ./binarystring.cue:28:13
    ./binarystring.cue:28:20
simplifyBinary.byte.err2.p1: incompatible bytes bounds <='a' and >'b':
    ./binarystring.cue:30:13
    ./binarystring.cue:30:20
simplifyBinary.byte.err2.p2: incompatible bytes bounds <='a' and >'b':
    ./binarystring.cue:31:13
    ./binarystring.cue:31:21
simplifyBinary.byte.err3.p1: incompatible bytes bounds <'b' and >='b':
    ./binarystring.cue:33:13
    ./binarystring.cue:33:21
simplifyBinary.byte.err3.p2: incompatible bytes bounds <'b' and >='b':
    ./binarystring.cue:34:13
    ./binarystring.cue:34:20
simplifyBinary.byte.err3.p3: incompatible bytes bounds <='b' and >'b':
    ./binarystring.cue:35:13
    ./binarystring.cue:35:20
simplifyBinary.byte.err3.p4: incompatible bytes bounds <='b' and >'b':
    ./binarystring.cue:36:13
    ./binarystring.cue:36:21
simplifyBinary.float.err1.p1: incompatible number bounds <1 and >2:
    ./binary.cue:2:13
    ./binary.cue:2:18
simplifyBinary.float.err1.p2: incompatible number bounds <1 and >2:
    ./binary.cue:3:13
    ./binary.cue:3:18
simplifyBinary.float.err2.p1: incompatible number bounds <=1 and >2:
    ./binary.cue:5:13
    ./binary.cue:5:18
simplifyBinary.float.err2.p2: incompatible number bounds <=1 and >2:
    ./binary.cue:6:13
    ./binary.cue:6:19
simplifyBinary.float.err3.p1: incompatible number bounds <2 and >=2:
    ./binary.cue:8:13
    ./binary.cue:8:19
simplifyBinary.float.err3.p2: incompatible number bounds <2 and >=2:
    ./binary.cue:9:13
    ./binary.cue:9:18
simplifyBinary.float.err3.p3: incompatible number bounds <=2 and >2:
    ./binary.cue:10:13
    ./binary.cue:10:18
simplifyBinary.float.err3.p4: incompatible number bounds <=2 and >2:
    ./binary.cue:11:13
    ./binary.cue:11:19
simplifyBinary.integer.err1.p1: incompatible number bounds <1 and >2:
    ./binary.cue:22:13
    ./binary.cue:22:18
simplifyBinary.integer.err1.p2: incompatible number bounds <1 and >2:
    ./binary.cue:23:13
    ./binary.cue:23:18
simplifyBinary.integer.err2.p1: incompatible number bounds <=1 and >2:
    ./binary.cue:25:13
    ./binary.cue:25:18
simplifyBinary.integer.err2.p2: incompatible number bounds <=1 and >2:
    ./binary.cue:26:13
    ./binary.cue:26:19
simplifyBinary.integer.err3.p1: incompatible number bounds <2 and >=2:
    ./binary.cue:28:13
    ./binary.cue:28:19
simplifyBinary.integer.err3.p2: incompatible number bounds <2 and >=2:
    ./binary.cue:29:13
    ./binary.cue:29:18
simplifyBinary.integer.err3.p3: incompatible number bounds <=2 and >2:
    ./binary.cue:30:13
    ./binary.cue:30:18
simplifyBinary.integer.err3.p4: incompatible number bounds <=2 and >2:
    ./binary.cue:31:13
    ./binary.cue:31:19
simplifyBinary.integer.err4.p1: incompatible integer bounds >1 and <2:
    ./binary.cue:21:8
    ./binary.cue:21:13
    ./binary.cue:33:13
    ./binary.cue:33:18
simplifyBinary.integer.err4.p2: incompatible integer bounds >1 and <2:
    ./binary.cue:21:8
    ./binary.cue:21:13
    ./binary.cue:34:13
    ./binary.cue:34:18
simplifyBinary.strings.err1.p1: incompatible string bounds <"a" and >"b":
    ./binarystring.cue:2:13
    ./binarystring.cue:2:20
simplifyBinary.strings.err1.p2: incompatible string bounds <"a" and >"b":
    ./binarystring.cue:3:13
    ./binarystring.cue:3:20
simplifyBinary.strings.err2.p1: incompatible string bounds <="a" and >"b":
    ./binarystring.cue:5:13
    ./binarystring.cue:5:20
simplifyBinary.strings.err2.p2: incompatible string bounds <="a" and >"b":
    ./binarystring.cue:6:13
    ./binarystring.cue:6:21
simplifyBinary.strings.err3.p1: incompatible string bounds <"b" and >="b":
    ./binarystring.cue:8:13
    ./binarystring.cue:8:21
simplifyBinary.strings.err3.p2: incompatible string bounds <"b" and >="b":
    ./binarystring.cue:9:13
    ./binarystring.cue:9:20
simplifyBinary.strings.err3.p3: incompatible string bounds <="b" and >"b":
    ./binarystring.cue:10:13
    ./binarystring.cue:10:20
simplifyBinary.strings.err3.p4: incompatible string bounds <="b" and >"b":
    ./binarystring.cue:11:13
    ./binarystring.cue:11:21
equalScalar.ok2: invalid left-hand value to '==' (type _|_): equalScalar.ok2: invalid value [1,2] (out of bound ==[1,2]):
    ./equals.cue:8:7
equalScalar.err1: invalid value 2 (out of bound ==1):
    ./equals.cue:10:8
    ./equals.cue:11:8
equalScalar.err2: invalid value [1,2] (out of bound !=[1,2]):
    ./equals.cue:14:8
    ./equals.cue:13:8
equalStruct.ok2: invalid value {a:1,b:2} (out of bound =={a:1,b:2}):
    ./equals.cue:21:7
    ./equals.cue:20:7
equalStruct.err1: invalid value {a:1,b:2} (out of bound =={}):
    ./equals.cue:23:8
    ./equals.cue:24:8
simplifyExpr.e2: cannot use null for bound >:
    ./in.cue:62:8

Result:
(_|_){
  // [eval]
  simplifyBinary: (_|_){
    // [eval]
    float: (_|_){
      // [eval]
      err1: (_|_){
        // [eval]
        p1: (_|_){
          // [eval] simplifyBinary.float.err1.p1: incompatible number bounds <1 and >2:
          //     ./binary.cue:2:13
          //     ./binary.cue:2:18
        }
        p2: (_|_){
          // [eval] simplifyBinary.float.err1.p2: incompatible number bounds <1 and >2:
          //     ./binary.cue:3:13
          //     ./binary.cue:3:18
        }
      }
      err2: (_|_){
        // [eval]
        p1: (_|_){
          // [eval] simplifyBinary.float.err2.p1: incompatible number bounds <=1 and >2:
          //     ./binary.cue:5:13
          //     ./binary.cue:5:18
        }
        p2: (_|_){
          // [eval] simplifyBinary.float.err2.p2: incompatible number bounds <=1 and >2:
          //     ./binary.cue:6:13
          //     ./binary.cue:6:19
        }
      }
      err3: (_|_){
        // [eval]
        p1: (_|_){
          // [eval] simplifyBinary.float.err3.p1: incompatible number bounds <2 and >=2:
          //     ./binary.cue:8:13
          //     ./binary.cue:8:19
        }
        p2: (_|_){
          // [eval] simplifyBinary.float.err3.p2: incompatible number bounds <2 and >=2:
          //     ./binary.cue:9:13
          //     ./binary.cue:9:18
        }
        p3: (_|_){
          // [eval] simplifyBinary.float.err3.p3: incompatible number bounds <=2 and >2:
          //     ./binary.cue:10:13
          //     ./binary.cue:10:18
        }
        p4: (_|_){
          // [eval] simplifyBinary.float.err3.p4: incompatible number bounds <=2 and >2:
          //     ./binary.cue:11:13
          //     ./binary.cue:11:19
        }
      }
      ok1: (struct){
        p1: (number){ &(>1, <2) }
        p2: (number){ &(>1, <2) }
      }
      ok2: (struct){
        p1: (number){ &(>=2, <=2) }
        p2: (number){ &(>=2, <=2) }
      }
    }
    integer: (_|_){
      // [eval]
      err1: (_|_){
        // [eval]
        p1: (_|_){
          // [eval] simplifyBinary.integer.err1.p1: incompatible number bounds <1 and >2:
          //     ./binary.cue:22:13
          //     ./binary.cue:22:18
        }
        p2: (_|_){
          // [eval] simplifyBinary.integer.err1.p2: incompatible number bounds <1 and >2:
          //     ./binary.cue:23:13
          //     ./binary.cue:23:18
        }
      }
      err2: (_|_){
        // [eval]
        p1: (_|_){
          // [eval] simplifyBinary.integer.err2.p1: incompatible number bounds <=1 and >2:
          //     ./binary.cue:25:13
          //     ./binary.cue:25:18
        }
        p2: (_|_){
          // [eval] simplifyBinary.integer.err2.p2: incompatible number bounds <=1 and >2:
          //     ./binary.cue:26:13
          //     ./binary.cue:26:19
        }
      }
      err3: (_|_){
        // [eval]
        p1: (_|_){
          // [eval] simplifyBinary.integer.err3.p1: incompatible number bounds <2 and >=2:
          //     ./binary.cue:28:13
          //     ./binary.cue:28:19
        }
        p2: (_|_){
          // [eval] simplifyBinary.integer.err3.p2: incompatible number bounds <2 and >=2:
          //     ./binary.cue:29:13
          //     ./binary.cue:29:18
        }
        p3: (_|_){
          // [eval] simplifyBinary.integer.err3.p3: incompatible number bounds <=2 and >2:
          //     ./binary.cue:30:13
          //     ./binary.cue:30:18
        }
        p4: (_|_){
          // [eval] simplifyBinary.integer.err3.p4: incompatible number bounds <=2 and >2:
          //     ./binary.cue:31:13
          //     ./binary.cue:31:19
        }
      }
      err4: (_|_){
        // [eval]
        p1: (_|_){
          // [eval] simplifyBinary.integer.err4.p1: incompatible integer bounds >1 and <2:
          //     ./binary.cue:21:8
          //     ./binary.cue:21:13
          //     ./binary.cue:33:13
          //     ./binary.cue:33:18
        }
        p2: (_|_){
          // [eval] simplifyBinary.integer.err4.p2: incompatible integer bounds >1 and <2:
          //     ./binary.cue:21:8
          //     ./binary.cue:21:13
          //     ./binary.cue:34:13
          //     ./binary.cue:34:18
        }
      }
      ok1: (struct){
        p1: (int){ &(>=2, <=3, int) }
        p2: (int){ &(>=2, <=3, int) }
      }
      ok2: (struct){
        p1: (int){ &(>=2, <=2, int) }
        p2: (int){ &(>=2, <=2, int) }
      }
      ok3: (struct){
        p1: (int){ &(>=2, <3, int) }
        p2: (int){ &(>2, <=3, int) }
        p3: (int){ &(>=2, <3, int) }
        p4: (int){ &(>2, <=3, int) }
      }
    }
    strings: (_|_){
      // [eval]
      err1: (_|_){
        // [eval]
        p1: (_|_){
          // [eval] simplifyBinary.strings.err1.p1: incompatible string bounds <"a" and >"b":
          //     ./binarystring.cue:2:13
          //     ./binarystring.cue:2:20
        }
        p2: (_|_){
          // [eval] simplifyBinary.strings.err1.p2: incompatible string bounds <"a" and >"b":
          //     ./binarystring.cue:3:13
          //     ./binarystring.cue:3:20
        }
      }
      err2: (_|_){
        // [eval]
        p1: (_|_){
          // [eval] simplifyBinary.strings.err2.p1: incompatible string bounds <="a" and >"b":
          //     ./binarystring.cue:5:13
          //     ./binarystring.cue:5:20
        }
        p2: (_|_){
          // [eval] simplifyBinary.strings.err2.p2: incompatible string bounds <="a" and >"b":
          //     ./binarystring.cue:6:13
          //     ./binarystring.cue:6:21
        }
      }
      err3: (_|_){
        // [eval]
        p1: (_|_){
          // [eval] simplifyBinary.strings.err3.p1: incompatible string bounds <"b" and >="b":
          //     ./binarystring.cue:8:13
          //     ./binarystring.cue:8:21
        }
        p2: (_|_){
          // [eval] simplifyBinary.strings.err3.p2: incompatible string bounds <"b" and >="b":
          //     ./binarystring.cue:9:13
          //     ./binarystring.cue:9:20
        }
        p3: (_|_){
          // [eval] simplifyBinary.strings.err3.p3: incompatible string bounds <="b" and >"b":
          //     ./binarystring.cue:10:13
          //     ./binarystring.cue:10:20
        }
        p4: (_|_){
          // [eval] simplifyBinary.strings.err3.p4: incompatible string bounds <="b" and >"b":
          //     ./binarystring.cue:11:13
          //     ./binarystring.cue:11:21
        }
      }
      ok1: (struct){
        p1: (string){ &(>"a", <"b") }
        p2: (string){ &(>"a", <"b") }
      }
      ok2: (struct){
        p1: (string){ &(>"a", <="b") }
        p2: (string){ &(>"a", <="b") }
        p3: (string){ &(>="a", <"b") }
        p4: (string){ &(>="a", <"b") }
      }
      ok3: (struct){
        p1: (string){ &(>="b", <="c") }
        p2: (string){ &(>="b", <="c") }
      }
      ok4: (struct){
        p1: (string){ &(>="b", <="b") }
      }
    }
    byte: (_|_){
      // [eval]
      err1: (_|_){
        // [eval]
        p1: (_|_){
          // [eval] simplifyBinary.byte.err1.p1: incompatible bytes bounds <'a' and >'b':
          //     ./binarystring.cue:27:13
          //     ./binarystring.cue:27:20
        }
        p2: (_|_){
          // [eval] simplifyBinary.byte.err1.p2: incompatible bytes bounds <'a' and >'b':
          //     ./binarystring.cue:28:13
          //     ./binarystring.cue:28:20
        }
      }
      err2: (_|_){
        // [eval]
        p1: (_|_){
          // [eval] simplifyBinary.byte.err2.p1: incompatible bytes bounds <='a' and >'b':
          //     ./binarystring.cue:30:13
          //     ./binarystring.cue:30:20
        }
        p2: (_|_){
          // [eval] simplifyBinary.byte.err2.p2: incompatible bytes bounds <='a' and >'b':
          //     ./binarystring.cue:31:13
          //     ./binarystring.cue:31:21
        }
      }
      err3: (_|_){
        // [eval]
        p1: (_|_){
          // [eval] simplifyBinary.byte.err3.p1: incompatible bytes bounds <'b' and >='b':
          //     ./binarystring.cue:33:13
          //     ./binarystring.cue:33:21
        }
        p2: (_|_){
          // [eval] simplifyBinary.byte.err3.p2: incompatible bytes bounds <'b' and >='b':
          //     ./binarystring.cue:34:13
          //     ./binarystring.cue:34:20
        }
        p3: (_|_){
          // [eval] simplifyBinary.byte.err3.p3: incompatible bytes bounds <='b' and >'b':
          //     ./binarystring.cue:35:13
          //     ./binarystring.cue:35:20
        }
        p4: (_|_){
          // [eval] simplifyBinary.byte.err3.p4: incompatible bytes bounds <='b' and >'b':
          //     ./binarystring.cue:36:13
          //     ./binarystring.cue:36:21
        }
      }
      ok1: (struct){
        p1: (bytes){ &(>'a', <'b') }
        p2: (bytes){ &(>'a', <'b') }
      }
      ok2: (struct){
        p1: (bytes){ &(>'a', <='b') }
        p2: (bytes){ &(>'a', <='b') }
        p3: (bytes){ &(>='a', <'b') }
        p4: (bytes){ &(>='a', <'b') }
      }
      ok3: (struct){
        p1: (bytes){ &(>='b', <='c') }
        p2: (bytes){ &(>='b', <='c') }
      }
      ok4: (struct){
        p1: (bytes){ &(>='b', <='b') }
      }
    }
  }
  equalScalar: (_|_){
    // [eval]
    ok1: (int){ 1 }
    ok2: (_|_){
      // [eval] equalScalar.ok2: invalid left-hand value to '==' (type _|_): equalScalar.ok2: invalid value [1,2] (out of bound ==[1,2]):
      //     ./equals.cue:8:7
      0: (int){ 1 }
      1: (int){ 2 }
    }
    err1: (_|_){
      // [eval] equalScalar.err1: invalid value 2 (out of bound ==1):
      //     ./equals.cue:10:8
      //     ./equals.cue:11:8
    }
    err2: (_|_){
      // [eval] equalScalar.err2: invalid value [1,2] (out of bound !=[1,2]):
      //     ./equals.cue:14:8
      //     ./equals.cue:13:8
      0: (int){ 1 }
      1: (int){ 2 }
    }
  }
  equalStruct: (_|_){
    // [eval]
    ok1: (struct){
    }
    ok2: (_|_){
      // [eval] equalStruct.ok2: invalid value {a:1,b:2} (out of bound =={a:1,b:2}):
      //     ./equals.cue:21:7
      //     ./equals.cue:20:7
      a: (int){ 1 }
      b: (int){ 2 }
    }
    err1: (_|_){
      // [eval] equalStruct.err1: invalid value {a:1,b:2} (out of bound =={}):
      //     ./equals.cue:23:8
      //     ./equals.cue:24:8
      a: (int){ 1 }
      b: (int){ 2 }
    }
    err2: (struct){
      a: (int){ 1 }
      b: (int){ 2 }
    }
  }
  nonConcrete: (_|_){
    // [eval]
    iErr0: (string){ =="foo" }
    _int: (int){ int }
    iErr1: (_|_){
      // [incomplete] nonConcrete.iErr1: non-concrete value _int for bound ==:
      //     ./equals.cue:33:11
    }
    iErr2: (_|_){
      // [incomplete] nonConcrete.iErr2: non-concrete value _int for bound !=:
      //     ./equals.cue:35:11
    }
    iErr3: (_|_){
      // [incomplete] nonConcrete.iErr3: non-concrete value _int for bound ==:
      //     ./equals.cue:37:11
      // nonConcrete.iErr3: invalid left-hand value to '==' (type _|_): nonConcrete.iErr3: non-concrete value _int for bound ==:
      //     ./equals.cue:38:9
    }
    iErr4: (int){ &(==1, int) }
    eErr5: (_|_){
      // [eval] nonConcrete.eErr5: conflicting values =="foo" and int (mismatched types string and int):
      //     ./equals.cue:32:8
      //     ./equals.cue:43:9
      //     ./equals.cue:44:9
    }
    eErr6: (_|_){
      // [incomplete] nonConcrete.eErr6: non-concrete value _int for bound ==:
      //     ./equals.cue:46:11
    }
  }
  x0: (int){ 5 }
  x1: (int){ 30 }
  b0: (number){ &(>0, <5) }
  b1: (int){ &(>0, <5, int) }
  b2: (int){ &(<5.5, int) }
  b3: (number){ <=5 }
  b4: (number){ >20 }
  b5: (number){ >=21 }
  b6: (int){ &(>5, <=6, int) }
  simplifyExpr: (_|_){
    // [eval]
    less1: (_|_){
      // [incomplete] simplifyExpr.less1: non-concrete value <3 for bound <:
      //     ./in.cue:13:11
    }
    less2: (_|_){
      // [incomplete] simplifyExpr.less2: non-concrete value <=3 for bound <:
      //     ./in.cue:14:11
    }
    less3: (_|_){
      // [incomplete] simplifyExpr.less3: non-concrete value <3 for bound <=:
      //     ./in.cue:15:12
    }
    less4: (_|_){
      // [incomplete] simplifyExpr.less4: non-concrete value <=3 for bound <=:
      //     ./in.cue:16:12
    }
    less5: (_|_){
      // [incomplete] simplifyExpr.less5: non-concrete value !=3 for bound <:
      //     ./in.cue:17:11
    }
    less6: (_|_){
      // [incomplete] simplifyExpr.less6: non-concrete value !=3 for bound <=:
      //     ./in.cue:18:12
    }
    gtr1: (_|_){
      // [incomplete] simplifyExpr.gtr1: non-concrete value >3 for bound >:
      //     ./in.cue:20:10
    }
    gtr2: (_|_){
      // [incomplete] simplifyExpr.gtr2: non-concrete value >=3 for bound >:
      //     ./in.cue:21:10
    }
    gtr3: (_|_){
      // [incomplete] simplifyExpr.gtr3: non-concrete value >3 for bound >=:
      //     ./in.cue:22:11
    }
    gtr4: (_|_){
      // [incomplete] simplifyExpr.gtr4: non-concrete value >=3 for bound >=:
      //     ./in.cue:23:11
    }
    gtr5: (_|_){
      // [incomplete] simplifyExpr.gtr5: non-concrete value !=3 for bound >:
      //     ./in.cue:24:10
    }
    gtr6: (_|_){
      // [incomplete] simplifyExpr.gtr6: non-concrete value !=3 for bound >=:
      //     ./in.cue:25:11
    }
    lg1: (_|_){
      // [incomplete] simplifyExpr.lg1: non-concrete value >3 for bound <:
      //     ./in.cue:27:9
    }
    lg2: (_|_){
      // [incomplete] simplifyExpr.lg2: non-concrete value >=3 for bound <:
      //     ./in.cue:28:9
    }
    lg3: (_|_){
      // [incomplete] simplifyExpr.lg3: non-concrete value >3 for bound <=:
      //     ./in.cue:29:10
    }
    lg4: (_|_){
      // [incomplete] simplifyExpr.lg4: non-concrete value >=3 for bound <=:
      //     ./in.cue:30:10
    }
    gl1: (_|_){
      // [incomplete] simplifyExpr.gl1: non-concrete value <3 for bound >:
      //     ./in.cue:32:9
    }
    gl2: (_|_){
      // [incomplete] simplifyExpr.gl2: non-concrete value <=3 for bound >:
      //     ./in.cue:33:9
    }
    gl3: (_|_){
      // [incomplete] simplifyExpr.gl3: non-concrete value <3 for bound >=:
      //     ./in.cue:34:10
    }
    gl4: (_|_){
      // [incomplete] simplifyExpr.gl4: non-concrete value <=3 for bound >=:
      //     ./in.cue:35:10
    }
    ne1: (_|_){
      // [incomplete] simplifyExpr.ne1: non-concrete value !=3 for bound !=:
      //     ./in.cue:37:10
    }
    ne2: (_|_){
      // [incomplete] simplifyExpr.ne2: non-concrete value <3 for bound !=:
      //     ./in.cue:38:10
    }
    ne3: (_|_){
      // [incomplete] simplifyExpr.ne3: non-concrete value <=3 for bound !=:
      //     ./in.cue:39:10
    }
    ne4: (_|_){
      // [incomplete] simplifyExpr.ne4: non-concrete value >3 for bound !=:
      //     ./in.cue:40:10
    }
    ne5: (_|_){
      // [incomplete] simplifyExpr.ne5: non-concrete value >=3 for bound !=:
      //     ./in.cue:41:10
    }
    s: (string){ string }
    n: (number){ number }
    i: (int){ int }
    f: (float){ float }
    b: (bytes){ bytes }
    basic1: (_|_){
      // [incomplete] simplifyExpr.basic1: non-concrete value i for bound <:
      //     ./in.cue:48:12
    }
    basic2: (_|_){
      // [incomplete] simplifyExpr.basic2: non-concrete value n for bound >:
      //     ./in.cue:49:12
    }
    basic3: (_|_){
      // [incomplete] simplifyExpr.basic3: non-concrete value s for bound >=:
      //     ./in.cue:50:13
    }
    basic4: (_|_){
      // [incomplete] simplifyExpr.basic4: non-concrete value f for bound <=:
      //     ./in.cue:51:13
    }
    basic5: (_|_){
      // [incomplete] simplifyExpr.basic5: non-concrete value b for bound <=:
      //     ./in.cue:52:13
    }
    bne1: (_|_){
      // [incomplete] simplifyExpr.bne1: non-concrete value s for bound !=:
      //     ./in.cue:55:11
    }
    bne2: (_|_){
      // [incomplete] simplifyExpr.bne2: non-concrete value n for bound !=:
      //     ./in.cue:56:11
    }
    bne3: (_|_){
      // [incomplete] simplifyExpr.bne3: non-concrete value n for bound !=:
      //     ./in.cue:57:11
    }
    bne4: (_|_){
      // [incomplete] simplifyExpr.bne4: non-concrete value i for bound !=:
      //     ./in.cue:58:11
    }
    bne5: (_|_){
      // [incomplete] simplifyExpr.bne5: non-concrete value b for bound !=:
      //     ./in.cue:59:11
    }
    e1: (_|_){
      // [incomplete] simplifyExpr.e1: non-concrete value =~"foo" for bound <:
      //     ./in.cue:61:8
    }
    e2: (_|_){
      // [eval] simplifyExpr.e2: cannot use null for bound >:
      //     ./in.cue:62:8
    }
  }
}
-- out/compile --
--- binary.cue
{
  simplifyBinary: {
    float: {
      err1: {
        p1: (<1 & >2)
      }
      err1: {
        p2: (>2 & <1)
      }
      err2: {
        p1: (>2 & <=1)
      }
      err2: {
        p2: (<=1 & >2)
      }
      err3: {
        p1: (>=2 & <2)
      }
      err3: {
        p2: (<2 & >=2)
      }
      err3: {
        p3: (>2 & <=2)
      }
      err3: {
        p4: (<=2 & >2)
      }
      ok1: {
        p1: (>1 & <2)
      }
      ok1: {
        p2: (<2 & >1)
      }
      ok2: {
        p1: (>=2 & <=2)
      }
      ok2: {
        p2: (<=2 & >=2)
      }
    }
  }
  simplifyBinary: {
    integer: {
      [_]: {
        [_]: int
      }
      err1: {
        p1: (<1 & >2)
      }
      err1: {
        p2: (>2 & <1)
      }
      err2: {
        p1: (>2 & <=1)
      }
      err2: {
        p2: (<=1 & >2)
      }
      err3: {
        p1: (>=2 & <2)
      }
      err3: {
        p2: (<2 & >=2)
      }
      err3: {
        p3: (>2 & <=2)
      }
      err3: {
        p4: (<=2 & >2)
      }
      err4: {
        p1: (>1 & <2)
      }
      err4: {
        p2: (<2 & >1)
      }
      ok1: {
        p1: (>=2 & <=3)
      }
      ok1: {
        p2: (<=3 & >=2)
      }
      ok2: {
        p1: (>=2 & <=2)
      }
      ok2: {
        p2: (<=2 & >=2)
      }
      ok3: {
        p1: (>=2 & <3)
      }
      ok3: {
        p2: (>2 & <=3)
      }
      ok3: {
        p3: (<3 & >=2)
      }
      ok3: {
        p4: (<=3 & >2)
      }
    }
  }
}
--- binarystring.cue
{
  simplifyBinary: {
    strings: {
      err1: {
        p1: (<"a" & >"b")
      }
      err1: {
        p2: (>"b" & <"a")
      }
      err2: {
        p1: (>"b" & <="a")
      }
      err2: {
        p2: (<="a" & >"b")
      }
      err3: {
        p1: (>="b" & <"b")
      }
      err3: {
        p2: (<"b" & >="b")
      }
      err3: {
        p3: (>"b" & <="b")
      }
      err3: {
        p4: (<="b" & >"b")
      }
      ok1: {
        p1: (>"a" & <"b")
      }
      ok1: {
        p2: (<"b" & >"a")
      }
      ok2: {
        p1: (>"a" & <="b")
      }
      ok2: {
        p2: (<="b" & >"a")
      }
      ok2: {
        p3: (>="a" & <"b")
      }
      ok2: {
        p4: (<"b" & >="a")
      }
      ok3: {
        p1: (>="b" & <="c")
      }
      ok3: {
        p2: (<="c" & >="b")
      }
      ok4: {
        p1: (>="b" & <="b")
      }
    }
  }
  simplifyBinary: {
    byte: {
      err1: {
        p1: (<'a' & >'b')
      }
      err1: {
        p2: (>'b' & <'a')
      }
      err2: {
        p1: (>'b' & <='a')
      }
      err2: {
        p2: (<='a' & >'b')
      }
      err3: {
        p1: (>='b' & <'b')
      }
      err3: {
        p2: (<'b' & >='b')
      }
      err3: {
        p3: (>'b' & <='b')
      }
      err3: {
        p4: (<='b' & >'b')
      }
      ok1: {
        p1: (>'a' & <'b')
      }
      ok1: {
        p2: (<'b' & >'a')
      }
      ok2: {
        p1: (>'a' & <='b')
      }
      ok2: {
        p2: (<='b' & >'a')
      }
      ok2: {
        p3: (>='a' & <'b')
      }
      ok2: {
        p4: (<'b' & >='a')
      }
      ok3: {
        p1: (>='b' & <='c')
      }
      ok3: {
        p2: (<='c' & >='b')
      }
      ok4: {
        p1: (>='b' & <='b')
      }
    }
  }
}
--- equals.cue
{
  equalScalar: {
    ok1: ==1
    ok1: 1
    ok2: [
      1,
      2,
    ]
    ok2: ==[
      1,
      2,
    ]
    err1: ==1
    err1: 2
    err2: [
      1,
      2,
    ]
    err2: !=[
      1,
      2,
    ]
  }
  equalStruct: {
    ok1: =={}
    ok1: {}
    ok2: {
      a: 1
      b: 2
    }
    ok2: =={
      a: 1
      b: 2
    }
    err1: =={}
    err1: {
      a: 1
      b: 2
    }
    err2: {
      a: 1
      b: 2
    }
    err2: !={
      a: 1
      b: 2
    }
  }
  nonConcrete: {
    iErr0: =="foo"
    _int: int
    iErr1: ==〈0;_int〉
    iErr2: !=〈0;_int〉
    iErr3: ==〈0;_int〉
    iErr3: ==1
    iErr4: ==1
    iErr4: 〈0;_int〉
    eErr5: =="foo"
    eErr5: 〈0;_int〉
    eErr6: ==〈0;_int〉
    eErr6: "foo"
  }
}
--- in.cue
{
  x0: 5
  x1: (〈0;b5〉 & 30)
  b0: (<〈0;x0〉 & >0)
  b1: (〈0;b0〉 & int)
  b2: (int & <5.5)
  b3: (<10 & <=5)
  b4: (>=20 & >20)
  b5: (>=21 & >20)
  b6: ((int & >5) & <=6)
  simplifyExpr: {
    less1: <<3
    less2: <<=3
    less3: <=<3
    less4: <=<=3
    less5: <!=3
    less6: <=!=3
    gtr1: >>3
    gtr2: >>=3
    gtr3: >=>3
    gtr4: >=>=3
    gtr5: >!=3
    gtr6: >=!=3
    lg1: <>3
    lg2: <>=3
    lg3: <=>3
    lg4: <=>=3
    gl1: ><3
    gl2: ><=3
    gl3: >=<3
    gl4: >=<=3
    ne1: !=!=3
    ne2: !=<3
    ne3: !=<=3
    ne4: !=>3
    ne5: !=>=3
    s: string
    n: number
    i: int
    f: float
    b: bytes
    basic1: <〈0;i〉
    basic2: >〈0;n〉
    basic3: >=〈0;s〉
    basic4: <=〈0;f〉
    basic5: <=〈0;b〉
    bne1: !=〈0;s〉
    bne2: !=〈0;n〉
    bne3: !=〈0;n〉
    bne4: !=〈0;i〉
    bne5: !=〈0;b〉
    e1: <=~"foo"
    e2: >null
  }
}
