-- in.cue --
#A: {
	Common
	...
}

Common: {
	a: int
	b: int
}

x: #A
x: {
	c: int
}

#B: {
	if true {
		a: int
	}
	...
}

y: #B
y: {
	c: int
}
-- noclose.cue --
double: {
	a: b?: c: d: "c"
	a: {{
		b: {{
				c: e: "member"
		}}
	}}
}
doubleAsComprehension: {
	a: b?: c: d: "c"
	a: {
		if true {
			b: {
				if true {
					c: e: "member"
				}
			}
		}
	}
}
fieldNotAllowed: {
	// This was not correctly enforced in evalv2.
	t1: {
		#X: {
			objs: {
				extra: unused: "foo"
				...
			}
			...
		}
		#Y: unused: {}
		addTwo: #X & {
			#Y
			objs: name: "Two"
		}
	}
	t2: {
		#AddObjsExtra: {
			objs: [string]: {
				extra: unused: "foo"
				...
			}
			...
		}
		#EmbedUnused: unused: {}
		#AddTwo: #AddObjsExtra & {
			#EmbedUnused
			objs: two: {
				name: "Two"
				labels: app: objs.one.name
			}
		}
		out: #AddTwo & {
			objs: one: {
				name: "One"
			}
		}
	}
	t3: {
		x: #X
		#X: y: {
			z: {
				a: [string]: string
				b: E: "1"
			}
			...
		}

		x1: y: #Y
		#Y: port?: string

		x: y: {
			z: b: E: string
			port: z.b.E
			z: a: c?: string
		}

		if true {
			w: x & {
				y: x1.y
			}
		}
	}
}
closednessInversion: {
	base: #X
	base: x: #Y
	#X: x: {...}
	#Y: y: string | *"default"
	out: {
		base.x
		a: b: c: "d"
	}
}
-- out/eval/stats --
Leaks:  0
Freed:  116
Reused: 106
Allocs: 10
Retain: 7

Unifications: 110
Conjuncts:    217
Disjuncts:    122

MisalignedConjunct: 15

NumCloseIDs: 4
-- out/evalalpha --
Errors:
fieldNotAllowed.t1.addTwo.objs.extra: field not allowed:
    ./noclose.cue:26:5
fieldNotAllowed.t2.#AddTwo.objs.two.extra: field not allowed:
    ./noclose.cue:40:5
fieldNotAllowed.t2.out.objs.one.extra: field not allowed:
    ./noclose.cue:40:5
fieldNotAllowed.t2.out.objs.one.name: field not allowed:
    ./noclose.cue:55:5
fieldNotAllowed.t2.out.objs.two.extra.unused: field not allowed:
    ./noclose.cue:40:12
fieldNotAllowed.t3.w.y.z.a: field not allowed:
    ./noclose.cue:63:5
    ./noclose.cue:75:7
fieldNotAllowed.t3.w.y.z.b: field not allowed:
    ./noclose.cue:64:5
    ./noclose.cue:73:7

Result:
(_|_){
  // [eval]
  #A: (#struct){
    a: (int){ int }
    b: (int){ int }
  }
  Common: (struct){
    a: (int){ int }
    b: (int){ int }
  }
  x: (#struct){
    c: (int){ int }
    a: (int){ int }
    b: (int){ int }
  }
  #B: (#struct){
    a: (int){ int }
  }
  y: (#struct){
    c: (int){ int }
    a: (int){ int }
  }
  double: (struct){
    a: (struct){
      b: (struct){
        c: (struct){
          d: (string){ "c" }
          e: (string){ "member" }
        }
      }
    }
  }
  doubleAsComprehension: (struct){
    a: (struct){
      b: (struct){
        c: (struct){
          d: (string){ "c" }
          e: (string){ "member" }
        }
      }
    }
  }
  fieldNotAllowed: (_|_){
    // [eval]
    t1: (_|_){
      // [eval]
      #X: (#struct){
        objs: (#struct){
          extra: (#struct){
            unused: (string){ "foo" }
          }
        }
      }
      #Y: (#struct){
        unused: (#struct){
        }
      }
      addTwo: (_|_){
        // [eval]
        objs: (_|_){
          // [eval]
          name: (string){ "Two" }
          extra: (_|_){
            // [eval] fieldNotAllowed.t1.addTwo.objs.extra: field not allowed:
            //     ./noclose.cue:26:5
            unused: (_|_){
              // [eval] fieldNotAllowed.t1.addTwo.objs.extra.unused: field not allowed:
              //     ./noclose.cue:26:12
            }
          }
        }
        unused: (#struct){
        }
      }
    }
    t2: (_|_){
      // [eval]
      #AddObjsExtra: (#struct){
        objs: (#struct){
        }
      }
      #EmbedUnused: (#struct){
        unused: (#struct){
        }
      }
      #AddTwo: (_|_){
        // [eval]
        objs: (_|_){
          // [eval]
          two: (_|_){
            // [eval]
            name: (string){ "Two" }
            labels: (#struct){
              app: (_|_){
                // [incomplete] fieldNotAllowed.t2.#AddTwo.objs.two.labels.app: undefined field: one:
                //     ./noclose.cue:50:23
              }
            }
            extra: (_|_){
              // [eval] fieldNotAllowed.t2.#AddTwo.objs.two.extra: field not allowed:
              //     ./noclose.cue:40:5
              unused: (_|_){
                // [eval] fieldNotAllowed.t2.#AddTwo.objs.two.extra.unused: field not allowed:
                //     ./noclose.cue:40:12
              }
            }
          }
        }
        unused: (#struct){
        }
      }
      out: (_|_){
        // [eval]
        objs: (_|_){
          // [eval]
          one: (_|_){
            // [eval]
            name: (_|_){
              // [eval] fieldNotAllowed.t2.out.objs.one.name: field not allowed:
              //     ./noclose.cue:55:5
            }
            extra: (_|_){
              // [eval] fieldNotAllowed.t2.out.objs.one.extra: field not allowed:
              //     ./noclose.cue:40:5
              unused: (_|_){
                // [eval] fieldNotAllowed.t2.out.objs.one.extra.unused: field not allowed:
                //     ./noclose.cue:40:12
              }
            }
          }
          two: (_|_){
            // [eval]
            name: (string){ "Two" }
            labels: (_|_){
              // [eval]
              app: (_|_){
                // [eval] fieldNotAllowed.t2.out.objs.one.extra: field not allowed:
                //     ./noclose.cue:40:5
                // fieldNotAllowed.t2.out.objs.one.name: field not allowed:
                //     ./noclose.cue:55:5
              }
            }
            extra: (_|_){
              // [eval]
              unused: (_|_){
                // [eval] fieldNotAllowed.t2.out.objs.two.extra.unused: field not allowed:
                //     ./noclose.cue:40:12
              }
            }
          }
        }
        unused: (#struct){
        }
      }
    }
    t3: (_|_){
      // [eval]
      x: (#struct){
        y: (#struct){
          z: (#struct){
            b: (#struct){
              E: (string){ "1" }
            }
            a: (#struct){
              c?: (string){ string }
            }
          }
          port: (string){ "1" }
        }
      }
      #X: (#struct){
        y: (#struct){
          z: (#struct){
            a: (#struct){
            }
            b: (#struct){
              E: (string){ "1" }
            }
          }
        }
      }
      x1: (struct){
        y: ~(fieldNotAllowed.t3.#Y)
      }
      #Y: (#struct){
        port?: (string){ string }
      }
      w: (_|_){
        // [eval]
        y: (_|_){
          // [eval]
          z: (_|_){
            // [eval]
            b: (_|_){
              // [eval] fieldNotAllowed.t3.w.y.z.b: field not allowed:
              //     ./noclose.cue:64:5
              //     ./noclose.cue:73:7
              E: (_|_){
                // [eval] fieldNotAllowed.t3.w.y.z.b.E: field not allowed:
                //     ./noclose.cue:64:8
                //     ./noclose.cue:73:10
              }
            }
            a: (_|_){
              // [eval] fieldNotAllowed.t3.w.y.z.a: field not allowed:
              //     ./noclose.cue:63:5
              //     ./noclose.cue:75:7
              c?: (_|_){
                // [eval] fieldNotAllowed.t3.w.y.z.a.c: field not allowed:
                //     ./noclose.cue:63:8
                //     ./noclose.cue:75:10
              }
            }
          }
          port: (_|_){
            // [eval] fieldNotAllowed.t3.w.y.z.a: field not allowed:
            //     ./noclose.cue:63:5
            //     ./noclose.cue:75:7
            // fieldNotAllowed.t3.w.y.z.b: field not allowed:
            //     ./noclose.cue:64:5
            //     ./noclose.cue:73:7
          }
        }
      }
    }
  }
  closednessInversion: (struct){
    base: (#struct){
      x: (#struct){
        y: (string){ |(*(string){ "default" }, (string){ string }) }
      }
    }
    #X: (#struct){
      x: (#struct){
      }
    }
    #Y: (#struct){
      y: (string){ |(*(string){ "default" }, (string){ string }) }
    }
    out: (#struct){
      a: (struct){
        b: (struct){
          c: (string){ "d" }
        }
      }
      y: (string){ |(*(string){ "default" }, (string){ string }) }
    }
  }
}
-- diff/-out/evalalpha<==>+out/eval --
diff old new
--- old
+++ new
@@ -1,4 +1,24 @@
-(struct){
+Errors:
+fieldNotAllowed.t1.addTwo.objs.extra: field not allowed:
+    ./noclose.cue:26:5
+fieldNotAllowed.t2.#AddTwo.objs.two.extra: field not allowed:
+    ./noclose.cue:40:5
+fieldNotAllowed.t2.out.objs.one.extra: field not allowed:
+    ./noclose.cue:40:5
+fieldNotAllowed.t2.out.objs.one.name: field not allowed:
+    ./noclose.cue:55:5
+fieldNotAllowed.t2.out.objs.two.extra.unused: field not allowed:
+    ./noclose.cue:40:12
+fieldNotAllowed.t3.w.y.z.a: field not allowed:
+    ./noclose.cue:63:5
+    ./noclose.cue:75:7
+fieldNotAllowed.t3.w.y.z.b: field not allowed:
+    ./noclose.cue:64:5
+    ./noclose.cue:73:7
+
+Result:
+(_|_){
+  // [eval]
   #A: (#struct){
     a: (int){ int }
     b: (int){ int }
@@ -8,16 +28,16 @@
     b: (int){ int }
   }
   x: (#struct){
-    a: (int){ int }
-    b: (int){ int }
-    c: (int){ int }
+    c: (int){ int }
+    a: (int){ int }
+    b: (int){ int }
   }
   #B: (#struct){
     a: (int){ int }
   }
   y: (#struct){
-    a: (int){ int }
-    c: (int){ int }
+    c: (int){ int }
+    a: (int){ int }
   }
   double: (struct){
     a: (struct){
@@ -39,31 +59,41 @@
       }
     }
   }
-  fieldNotAllowed: (struct){
-    t1: (struct){
-      #X: (#struct){
-        objs: (#struct){
-          extra: (#struct){
-            unused: (string){ "foo" }
-          }
-        }
-      }
-      #Y: (#struct){
-        unused: (#struct){
-        }
-      }
-      addTwo: (#struct){
-        objs: (#struct){
-          extra: (#struct){
-            unused: (string){ "foo" }
-          }
+  fieldNotAllowed: (_|_){
+    // [eval]
+    t1: (_|_){
+      // [eval]
+      #X: (#struct){
+        objs: (#struct){
+          extra: (#struct){
+            unused: (string){ "foo" }
+          }
+        }
+      }
+      #Y: (#struct){
+        unused: (#struct){
+        }
+      }
+      addTwo: (_|_){
+        // [eval]
+        objs: (_|_){
+          // [eval]
           name: (string){ "Two" }
-        }
-        unused: (#struct){
-        }
-      }
-    }
-    t2: (struct){
+          extra: (_|_){
+            // [eval] fieldNotAllowed.t1.addTwo.objs.extra: field not allowed:
+            //     ./noclose.cue:26:5
+            unused: (_|_){
+              // [eval] fieldNotAllowed.t1.addTwo.objs.extra.unused: field not allowed:
+              //     ./noclose.cue:26:12
+            }
+          }
+        }
+        unused: (#struct){
+        }
+      }
+    }
+    t2: (_|_){
+      // [eval]
       #AddObjsExtra: (#struct){
         objs: (#struct){
         }
@@ -72,9 +102,12 @@
         unused: (#struct){
         }
       }
-      #AddTwo: (#struct){
-        objs: (#struct){
-          two: (#struct){
+      #AddTwo: (_|_){
+        // [eval]
+        objs: (_|_){
+          // [eval]
+          two: (_|_){
+            // [eval]
             name: (string){ "Two" }
             labels: (#struct){
               app: (_|_){
@@ -82,45 +115,73 @@
                 //     ./noclose.cue:50:23
               }
             }
-            extra: (#struct){
-              unused: (string){ "foo" }
-            }
-          }
-        }
-        unused: (#struct){
-        }
-      }
-      out: (#struct){
-        objs: (#struct){
-          two: (#struct){
-            name: (string){ "Two" }
-            labels: (#struct){
-              app: (string){ "One" }
-            }
-            extra: (#struct){
-              unused: (string){ "foo" }
-            }
-          }
-          one: (#struct){
-            name: (string){ "One" }
-            extra: (#struct){
-              unused: (string){ "foo" }
-            }
-          }
-        }
-        unused: (#struct){
-        }
-      }
-    }
-    t3: (struct){
-      x: (#struct){
-        y: (#struct){
-          z: (#struct){
-            a: (#struct){
-              c?: (string){ string }
-            }
-            b: (#struct){
-              E: (string){ "1" }
+            extra: (_|_){
+              // [eval] fieldNotAllowed.t2.#AddTwo.objs.two.extra: field not allowed:
+              //     ./noclose.cue:40:5
+              unused: (_|_){
+                // [eval] fieldNotAllowed.t2.#AddTwo.objs.two.extra.unused: field not allowed:
+                //     ./noclose.cue:40:12
+              }
+            }
+          }
+        }
+        unused: (#struct){
+        }
+      }
+      out: (_|_){
+        // [eval]
+        objs: (_|_){
+          // [eval]
+          one: (_|_){
+            // [eval]
+            name: (_|_){
+              // [eval] fieldNotAllowed.t2.out.objs.one.name: field not allowed:
+              //     ./noclose.cue:55:5
+            }
+            extra: (_|_){
+              // [eval] fieldNotAllowed.t2.out.objs.one.extra: field not allowed:
+              //     ./noclose.cue:40:5
+              unused: (_|_){
+                // [eval] fieldNotAllowed.t2.out.objs.one.extra.unused: field not allowed:
+                //     ./noclose.cue:40:12
+              }
+            }
+          }
+          two: (_|_){
+            // [eval]
+            name: (string){ "Two" }
+            labels: (_|_){
+              // [eval]
+              app: (_|_){
+                // [eval] fieldNotAllowed.t2.out.objs.one.extra: field not allowed:
+                //     ./noclose.cue:40:5
+                // fieldNotAllowed.t2.out.objs.one.name: field not allowed:
+                //     ./noclose.cue:55:5
+              }
+            }
+            extra: (_|_){
+              // [eval]
+              unused: (_|_){
+                // [eval] fieldNotAllowed.t2.out.objs.two.extra.unused: field not allowed:
+                //     ./noclose.cue:40:12
+              }
+            }
+          }
+        }
+        unused: (#struct){
+        }
+      }
+    }
+    t3: (_|_){
+      // [eval]
+      x: (#struct){
+        y: (#struct){
+          z: (#struct){
+            b: (#struct){
+              E: (string){ "1" }
+            }
+            a: (#struct){
+              c?: (string){ string }
             }
           }
           port: (string){ "1" }
@@ -138,24 +199,46 @@
         }
       }
       x1: (struct){
-        y: (#struct){
-          port?: (string){ string }
-        }
+        y: ~(fieldNotAllowed.t3.#Y)
       }
       #Y: (#struct){
         port?: (string){ string }
       }
-      w: (#struct){
-        y: (#struct){
-          z: (#struct){
-            a: (#struct){
-              c?: (string){ string }
-            }
-            b: (#struct){
-              E: (string){ "1" }
-            }
-          }
-          port: (string){ "1" }
+      w: (_|_){
+        // [eval]
+        y: (_|_){
+          // [eval]
+          z: (_|_){
+            // [eval]
+            b: (_|_){
+              // [eval] fieldNotAllowed.t3.w.y.z.b: field not allowed:
+              //     ./noclose.cue:64:5
+              //     ./noclose.cue:73:7
+              E: (_|_){
+                // [eval] fieldNotAllowed.t3.w.y.z.b.E: field not allowed:
+                //     ./noclose.cue:64:8
+                //     ./noclose.cue:73:10
+              }
+            }
+            a: (_|_){
+              // [eval] fieldNotAllowed.t3.w.y.z.a: field not allowed:
+              //     ./noclose.cue:63:5
+              //     ./noclose.cue:75:7
+              c?: (_|_){
+                // [eval] fieldNotAllowed.t3.w.y.z.a.c: field not allowed:
+                //     ./noclose.cue:63:8
+                //     ./noclose.cue:75:10
+              }
+            }
+          }
+          port: (_|_){
+            // [eval] fieldNotAllowed.t3.w.y.z.a: field not allowed:
+            //     ./noclose.cue:63:5
+            //     ./noclose.cue:75:7
+            // fieldNotAllowed.t3.w.y.z.b: field not allowed:
+            //     ./noclose.cue:64:5
+            //     ./noclose.cue:73:7
+          }
         }
       }
     }
@@ -174,12 +257,12 @@
       y: (string){ |(*(string){ "default" }, (string){ string }) }
     }
     out: (#struct){
-      y: (string){ |(*(string){ "default" }, (string){ string }) }
       a: (struct){
         b: (struct){
           c: (string){ "d" }
         }
       }
+      y: (string){ |(*(string){ "default" }, (string){ string }) }
     }
   }
 }
-- diff/explanation --
Reordering
fieldNotAllowed: This was not correctly enforced in evalv2.
-- out/eval --
(struct){
  #A: (#struct){
    a: (int){ int }
    b: (int){ int }
  }
  Common: (struct){
    a: (int){ int }
    b: (int){ int }
  }
  x: (#struct){
    a: (int){ int }
    b: (int){ int }
    c: (int){ int }
  }
  #B: (#struct){
    a: (int){ int }
  }
  y: (#struct){
    a: (int){ int }
    c: (int){ int }
  }
  double: (struct){
    a: (struct){
      b: (struct){
        c: (struct){
          d: (string){ "c" }
          e: (string){ "member" }
        }
      }
    }
  }
  doubleAsComprehension: (struct){
    a: (struct){
      b: (struct){
        c: (struct){
          d: (string){ "c" }
          e: (string){ "member" }
        }
      }
    }
  }
  fieldNotAllowed: (struct){
    t1: (struct){
      #X: (#struct){
        objs: (#struct){
          extra: (#struct){
            unused: (string){ "foo" }
          }
        }
      }
      #Y: (#struct){
        unused: (#struct){
        }
      }
      addTwo: (#struct){
        objs: (#struct){
          extra: (#struct){
            unused: (string){ "foo" }
          }
          name: (string){ "Two" }
        }
        unused: (#struct){
        }
      }
    }
    t2: (struct){
      #AddObjsExtra: (#struct){
        objs: (#struct){
        }
      }
      #EmbedUnused: (#struct){
        unused: (#struct){
        }
      }
      #AddTwo: (#struct){
        objs: (#struct){
          two: (#struct){
            name: (string){ "Two" }
            labels: (#struct){
              app: (_|_){
                // [incomplete] fieldNotAllowed.t2.#AddTwo.objs.two.labels.app: undefined field: one:
                //     ./noclose.cue:50:23
              }
            }
            extra: (#struct){
              unused: (string){ "foo" }
            }
          }
        }
        unused: (#struct){
        }
      }
      out: (#struct){
        objs: (#struct){
          two: (#struct){
            name: (string){ "Two" }
            labels: (#struct){
              app: (string){ "One" }
            }
            extra: (#struct){
              unused: (string){ "foo" }
            }
          }
          one: (#struct){
            name: (string){ "One" }
            extra: (#struct){
              unused: (string){ "foo" }
            }
          }
        }
        unused: (#struct){
        }
      }
    }
    t3: (struct){
      x: (#struct){
        y: (#struct){
          z: (#struct){
            a: (#struct){
              c?: (string){ string }
            }
            b: (#struct){
              E: (string){ "1" }
            }
          }
          port: (string){ "1" }
        }
      }
      #X: (#struct){
        y: (#struct){
          z: (#struct){
            a: (#struct){
            }
            b: (#struct){
              E: (string){ "1" }
            }
          }
        }
      }
      x1: (struct){
        y: (#struct){
          port?: (string){ string }
        }
      }
      #Y: (#struct){
        port?: (string){ string }
      }
      w: (#struct){
        y: (#struct){
          z: (#struct){
            a: (#struct){
              c?: (string){ string }
            }
            b: (#struct){
              E: (string){ "1" }
            }
          }
          port: (string){ "1" }
        }
      }
    }
  }
  closednessInversion: (struct){
    base: (#struct){
      x: (#struct){
        y: (string){ |(*(string){ "default" }, (string){ string }) }
      }
    }
    #X: (#struct){
      x: (#struct){
      }
    }
    #Y: (#struct){
      y: (string){ |(*(string){ "default" }, (string){ string }) }
    }
    out: (#struct){
      y: (string){ |(*(string){ "default" }, (string){ string }) }
      a: (struct){
        b: (struct){
          c: (string){ "d" }
        }
      }
    }
  }
}
-- out/compile --
--- in.cue
{
  #A: {
    〈1;Common〉
    ...
  }
  Common: {
    a: int
    b: int
  }
  x: 〈0;#A〉
  x: {
    c: int
  }
  #B: {
    if true {
      a: int
    }
    ...
  }
  y: 〈0;#B〉
  y: {
    c: int
  }
}
--- noclose.cue
{
  double: {
    a: {
      b?: {
        c: {
          d: "c"
        }
      }
    }
    a: {
      {
        b: {
          {
            c: {
              e: "member"
            }
          }
        }
      }
    }
  }
  doubleAsComprehension: {
    a: {
      b?: {
        c: {
          d: "c"
        }
      }
    }
    a: {
      if true {
        b: {
          if true {
            c: {
              e: "member"
            }
          }
        }
      }
    }
  }
  fieldNotAllowed: {
    t1: {
      #X: {
        objs: {
          extra: {
            unused: "foo"
          }
          ...
        }
        ...
      }
      #Y: {
        unused: {}
      }
      addTwo: (〈0;#X〉 & {
        〈1;#Y〉
        objs: {
          name: "Two"
        }
      })
    }
    t2: {
      #AddObjsExtra: {
        objs: {
          [string]: {
            extra: {
              unused: "foo"
            }
            ...
          }
        }
        ...
      }
      #EmbedUnused: {
        unused: {}
      }
      #AddTwo: (〈0;#AddObjsExtra〉 & {
        〈1;#EmbedUnused〉
        objs: {
          two: {
            name: "Two"
            labels: {
              app: 〈3;objs〉.one.name
            }
          }
        }
      })
      out: (〈0;#AddTwo〉 & {
        objs: {
          one: {
            name: "One"
          }
        }
      })
    }
    t3: {
      x: 〈0;#X〉
      #X: {
        y: {
          z: {
            a: {
              [string]: string
            }
            b: {
              E: "1"
            }
          }
          ...
        }
      }
      x1: {
        y: 〈1;#Y〉
      }
      #Y: {
        port?: string
      }
      x: {
        y: {
          z: {
            b: {
              E: string
            }
          }
          port: 〈0;z〉.b.E
          z: {
            a: {
              c?: string
            }
          }
        }
      }
      if true {
        w: (〈1;x〉 & {
          y: 〈2;x1〉.y
        })
      }
    }
  }
  closednessInversion: {
    base: 〈0;#X〉
    base: {
      x: 〈1;#Y〉
    }
    #X: {
      x: {
        ...
      }
    }
    #Y: {
      y: (string|*"default")
    }
    out: {
      〈1;base〉.x
      a: {
        b: {
          c: "d"
        }
      }
    }
  }
}
