-- in.cue --
#A: {
	Common
	...
}

Common: {
	a: int
	b: int
}

x: #A
x: {
	c: int
}

#B: {
	if true {
		a: int
	}
	...
}

y: #B
y: {
	c: int
}
-- noclose.cue --
double: {
	a: b?: c: d: "c"
	a: {{
		b: {{
				c: e: "member"
		}}
	}}
}
doubleAsComprehension: {
	a: b?: c: d: "c"
	a: {
		if true {
			b: {
				if true {
					c: e: "member"
				}
			}
		}
	}
}
-- out/eval/stats --
Leaks:  1
Freed:  27
Reused: 22
Allocs: 6
Retain: 1

Unifications: 28
Conjuncts:    52
Disjuncts:    29
-- out/evalalpha --
(struct){
  #A: (#struct){
    a: (int){ int }
    b: (int){ int }
  }
  Common: (struct){
    a: (int){ int }
    b: (int){ int }
  }
  x: (#struct){
    c: (int){ int }
    a: (int){ int }
    b: (int){ int }
  }
  #B: (#struct){
    a: (int){ int }
  }
  y: (#struct){
    c: (int){ int }
    a: (int){ int }
  }
  double: (struct){
    a: (struct){
      b: (struct){
        c: (struct){
          d: (string){ "c" }
          e: (string){ "member" }
        }
      }
    }
  }
  doubleAsComprehension: (struct){
    a: (struct){
      b: (struct){
        c: (struct){
          d: (string){ "c" }
          e: (string){ "member" }
        }
      }
    }
  }
}
-- diff/-out/evalalpha<==>+out/eval --
diff old new
--- old
+++ new
@@ -8,16 +8,16 @@
     b: (int){ int }
   }
   x: (#struct){
-    a: (int){ int }
-    b: (int){ int }
-    c: (int){ int }
+    c: (int){ int }
+    a: (int){ int }
+    b: (int){ int }
   }
   #B: (#struct){
     a: (int){ int }
   }
   y: (#struct){
-    a: (int){ int }
-    c: (int){ int }
+    c: (int){ int }
+    a: (int){ int }
   }
   double: (struct){
     a: (struct){
-- diff/explanation --
Reordering
-- out/eval --
(struct){
  #A: (#struct){
    a: (int){ int }
    b: (int){ int }
  }
  Common: (struct){
    a: (int){ int }
    b: (int){ int }
  }
  x: (#struct){
    a: (int){ int }
    b: (int){ int }
    c: (int){ int }
  }
  #B: (#struct){
    a: (int){ int }
  }
  y: (#struct){
    a: (int){ int }
    c: (int){ int }
  }
  double: (struct){
    a: (struct){
      b: (struct){
        c: (struct){
          d: (string){ "c" }
          e: (string){ "member" }
        }
      }
    }
  }
  doubleAsComprehension: (struct){
    a: (struct){
      b: (struct){
        c: (struct){
          d: (string){ "c" }
          e: (string){ "member" }
        }
      }
    }
  }
}
-- out/compile --
--- in.cue
{
  #A: {
    〈1;Common〉
    ...
  }
  Common: {
    a: int
    b: int
  }
  x: 〈0;#A〉
  x: {
    c: int
  }
  #B: {
    if true {
      a: int
    }
    ...
  }
  y: 〈0;#B〉
  y: {
    c: int
  }
}
--- noclose.cue
{
  double: {
    a: {
      b?: {
        c: {
          d: "c"
        }
      }
    }
    a: {
      {
        b: {
          {
            c: {
              e: "member"
            }
          }
        }
      }
    }
  }
  doubleAsComprehension: {
    a: {
      b?: {
        c: {
          d: "c"
        }
      }
    }
    a: {
      if true {
        b: {
          if true {
            c: {
              e: "member"
            }
          }
        }
      }
    }
  }
}
