Incomplete errors should not unify with values.

-- in.cue --
a: or([])
a: "t"

b: _|_
b: "t"
-- out/evalalpha/stats --
Leaks:  4
Freed:  0
Reused: 0
Allocs: 4
Retain: 0

Unifications: 4
Conjuncts:    6
Disjuncts:    0
-- diff/-out/evalalpha/stats<==>+out/eval/stats --
diff old new
--- old
+++ new
@@ -1,9 +1,9 @@
-Leaks:  5
-Freed:  3
-Reused: 1
-Allocs: 7
-Retain: 5
+Leaks:  4
+Freed:  0
+Reused: 0
+Allocs: 4
+Retain: 0
 
-Unifications: 8
-Conjuncts:    14
-Disjuncts:    8
+Unifications: 4
+Conjuncts:    6
+Disjuncts:    0
-- out/eval/stats --
Leaks:  5
Freed:  3
Reused: 1
Allocs: 7
Retain: 5

Unifications: 8
Conjuncts:    14
Disjuncts:    8
-- out/eval --
Errors:
explicit error (_|_ literal) in source:
    ./in.cue:4:4

Result:
(_|_){
  // [user]
  a: (_|_){
    // [incomplete] empty list in call to or:
    //     ./in.cue:1:4
  }
  b: (_|_){
    // [user] explicit error (_|_ literal) in source:
    //     ./in.cue:4:4
  }
}
-- out/compile --
--- in.cue
{
  a: or([])
  a: "t"
  b: _|_(explicit error (_|_ literal) in source)
  b: "t"
}
