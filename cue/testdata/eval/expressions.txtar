-- cue.mod/module.cue --
module: "test.com"
language: version: "v0.15.0"
-- in.cue --
a: 1
b: 1 + 2
c: 3 - 1
d: 5 rem 3

// StructCmp examples - now that the experiment is accepted
structComparison: {
    equalStructs: t: {a: 1, b: 2} == {a: 1, b: 2}
    differentStructs: f: {a: 1} == {a: 2}
    emptyStructs: t: {} == {}
}

mixedComparison: {
    structVsNumber: f: {a: 1} == 1
    listVsStruct: f: [1, 2] == {a: 1}
    stringVsNumber: f: "hello" == 42
}
-- out/eval/stats --
Leaks:  0
Freed:  5
Reused: 3
Allocs: 2
Retain: 0

Unifications: 5
Conjuncts:    5
Disjuncts:    5
-- out/evalalpha --
(struct){
  a: (int){ 1 }
  b: (int){ 3 }
  c: (int){ 2 }
  d: (int){ 2 }
  structComparison: (struct){
    equalStructs: (struct){
      t: (bool){ true }
    }
    differentStructs: (struct){
      f: (bool){ false }
    }
    emptyStructs: (struct){
      t: (bool){ true }
    }
  }
  mixedComparison: (struct){
    structVsNumber: (struct){
      f: (bool){ false }
    }
    listVsStruct: (struct){
      f: (bool){ false }
    }
    stringVsNumber: (struct){
      f: (bool){ false }
    }
  }
}
-- diff/-out/evalalpha<==>+out/eval --
diff old new
--- old
+++ new
@@ -3,4 +3,26 @@
   b: (int){ 3 }
   c: (int){ 2 }
   d: (int){ 2 }
+  structComparison: (struct){
+    equalStructs: (struct){
+      t: (bool){ true }
+    }
+    differentStructs: (struct){
+      f: (bool){ false }
+    }
+    emptyStructs: (struct){
+      t: (bool){ true }
+    }
+  }
+  mixedComparison: (struct){
+    structVsNumber: (struct){
+      f: (bool){ false }
+    }
+    listVsStruct: (struct){
+      f: (bool){ false }
+    }
+    stringVsNumber: (struct){
+      f: (bool){ false }
+    }
+  }
 }
-- out/compile --
--- in.cue
{
  a: 1
  b: (1 + 2)
  c: (3 - 1)
  d: (5 rem 3)
  structComparison: {
    equalStructs: {
      t: ({
        a: 1
        b: 2
      } == {
        a: 1
        b: 2
      })
    }
    differentStructs: {
      f: ({
        a: 1
      } == {
        a: 2
      })
    }
    emptyStructs: {
      t: ({} == {})
    }
  }
  mixedComparison: {
    structVsNumber: {
      f: ({
        a: 1
      } == 1)
    }
    listVsStruct: {
      f: ([
        1,
        2,
      ] == {
        a: 1
      })
    }
    stringVsNumber: {
      f: ("hello" == 42)
    }
  }
}
