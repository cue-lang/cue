-- in.cue --
foo: string
bar: close({})

if bar.missing == "x" {
	let _bar = bar
	foo: _bar
}
-- out/compile --
--- in.cue
{
  foo: string
  bar: close({})
  if (〈0;bar〉.missing == "x") {
    let _bar#1 = 〈1;bar〉
    foo: 〈0;let _bar#1〉
  }
}
-- out/eval/stats --
Leaks:  1
Freed:  4
Reused: 1
Allocs: 4
Retain: 2

Unifications: 5
Conjuncts:    5
Disjuncts:    6
-- out/eval --
Errors:
undefined field: missing:
    ./in.cue:4:8

Result:
(_|_){
  // [eval] undefined field: missing:
  //     ./in.cue:4:8
  foo: (string){ string }
  bar: (#struct){
  }
  let _bar#1 = (_){ _ }
}
-- out/evalalpha --
Errors:
undefined field: missing:
    ./in.cue:4:8

Result:
(_|_){
  // [eval] undefined field: missing:
  //     ./in.cue:4:8
  foo: (_|_){
    // [incomplete] undefined field: missing:
    //     ./in.cue:4:8
  }
  bar: (#struct){
  }
  let _bar#1 = (_){ _ }
}
-- diff/-out/evalalpha<==>+out/eval --
diff old new
--- old
+++ new
@@ -6,7 +6,10 @@
 (_|_){
   // [eval] undefined field: missing:
   //     ./in.cue:4:8
-  foo: (string){ string }
+  foo: (_|_){
+    // [incomplete] undefined field: missing:
+    //     ./in.cue:4:8
+  }
   bar: (#struct){
   }
   let _bar#1 = (_){ _ }
-- diff/todo/p2 --
Let seems to have misplaced error, even though it does not affect outcome.
