-- in.cue --
import "math"

full: {
	out: {
		env: {
			if true {
				PORT: math.Abs(out.port)
			}
		}
		if true {
			port: int | *30080
		}
	}
}
reduced: {
	if true {
		a: math.Abs(port)
	}
	port: int | *30080
}
-- secondary.cue --
related: {
	[string]: {
		if true {
			shared: all_total: foo.fooData.total
		}
	}
	foo: fooData: {
		total: tags: _hidden
		_hidden: extra: {}
	}
	#Tags: [string]: {}
	bar: {
		shared: {
			[string]: tags: #Tags
			bar_total: foo.fooData.total
		}
	}
}
-- out/eval/stats --
Leaks:  2
Freed:  32
Reused: 26
Allocs: 8
Retain: 1

Unifications: 30
Conjuncts:    51
Disjuncts:    35
-- out/evalalpha --
(struct){
  full: (struct){
    out: (struct){
      env: (struct){
        PORT: (int){ 30080 }
      }
      port: (int){ |(*(int){ 30080 }, (int){ int }) }
    }
  }
  reduced: (struct){
    a: (int){ 30080 }
    port: (int){ |(*(int){ 30080 }, (int){ int }) }
  }
  related: (struct){
    foo: (struct){
      fooData: (struct){
        total: (struct){
          tags: ~(related.foo.fooData._hidden)
        }
        _hidden: (struct){
          extra: (struct){
          }
        }
      }
      shared: (struct){
        all_total: ~(related.foo.fooData.total)
      }
    }
    #Tags: (#struct){
    }
    bar: (struct){
      shared: (struct){
        bar_total: (struct){
          tags: (#struct){
            extra: (#struct){
            }
          }
        }
        all_total: (struct){
          tags: (#struct){
            extra: (#struct){
            }
          }
        }
      }
    }
  }
}
-- diff/-out/evalalpha<==>+out/eval --
diff old new
--- old
+++ new
@@ -15,10 +15,7 @@
     foo: (struct){
       fooData: (struct){
         total: (struct){
-          tags: (struct){
-            extra: (struct){
-            }
-          }
+          tags: ~(related.foo.fooData._hidden)
         }
         _hidden: (struct){
           extra: (struct){
@@ -26,12 +23,7 @@
         }
       }
       shared: (struct){
-        all_total: (struct){
-          tags: (struct){
-            extra: (struct){
-            }
-          }
-        }
+        all_total: ~(related.foo.fooData.total)
       }
     }
     #Tags: (#struct){
-- out/eval --
(struct){
  full: (struct){
    out: (struct){
      env: (struct){
        PORT: (int){ 30080 }
      }
      port: (int){ |(*(int){ 30080 }, (int){ int }) }
    }
  }
  reduced: (struct){
    a: (int){ 30080 }
    port: (int){ |(*(int){ 30080 }, (int){ int }) }
  }
  related: (struct){
    foo: (struct){
      fooData: (struct){
        total: (struct){
          tags: (struct){
            extra: (struct){
            }
          }
        }
        _hidden: (struct){
          extra: (struct){
          }
        }
      }
      shared: (struct){
        all_total: (struct){
          tags: (struct){
            extra: (struct){
            }
          }
        }
      }
    }
    #Tags: (#struct){
    }
    bar: (struct){
      shared: (struct){
        bar_total: (struct){
          tags: (#struct){
            extra: (#struct){
            }
          }
        }
        all_total: (struct){
          tags: (#struct){
            extra: (#struct){
            }
          }
        }
      }
    }
  }
}
-- out/compile --
--- in.cue
{
  full: {
    out: {
      env: {
        if true {
          PORT: 〈import;math〉.Abs(〈3;out〉.port)
        }
      }
      if true {
        port: (int|*30080)
      }
    }
  }
  reduced: {
    if true {
      a: 〈import;math〉.Abs(〈1;port〉)
    }
    port: (int|*30080)
  }
}
--- secondary.cue
{
  related: {
    [string]: {
      if true {
        shared: {
          all_total: 〈3;foo〉.fooData.total
        }
      }
    }
    foo: {
      fooData: {
        total: {
          tags: 〈1;_hidden〉
        }
        _hidden: {
          extra: {}
        }
      }
    }
    #Tags: {
      [string]: {}
    }
    bar: {
      shared: {
        [string]: {
          tags: 〈3;#Tags〉
        }
        bar_total: 〈2;foo〉.fooData.total
      }
    }
  }
}
