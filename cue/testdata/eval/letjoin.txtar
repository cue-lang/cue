-- in.cue --
// Test that an error in a let that is merged with itself from two different
// origins does not result in an error as long as the error is not referenced
// outside the let.
t1: {
	x: {
		a: int
		y: {
			let X = {
				b: a
				c: 1
			}
			v: X.c
		}
	}

	x1: x
	x1: a: 1

	x2: x
	x2: a: 2

	xy: x1.y & x2.y
}

t2: {
	x: {
		a: {}
		y: {
			let X = {
				b: a
				c: 1
			}
			v: X.c
		}
	}

	x1: x
	x1: a: q: 1

	x2: x
	x2: a: r: 2

	xy: x1 & x2
}
-- issue3590.cue --
issue3590: reduced: {
	result: [_]: [string]: string

	_input: {
		A: p: "A"
		B: p: "B"
	}

	for _, v in _input {
		let Var1 = v.p

		// Second let variable required here; just using Var1 with Items not
		// sufficient
		let Var2 = Var1

		let Items = {
			item: Var2
		}

		result: "conflicting-\(v.p)": Items
	}
}
issue3590: full: {
	#Result: [_]: {[string]: string}

	result: #Result

	#Input: {
		p: "A" | "B"
	}

	_input: [Parm=_]: #Input & {
		p: Parm
	}

	_input: {
		A: {}
		B: {}
	}

	for _, v in _input {
		let Var1 = v.p
		let Var2 = Var1

		let Items = {
			"item": Var2
		}

		result: "conflicting-\(v.p)": Items
	}
}
// Issue #3591 is related
issue3591: missing: {
	#Result: [_]: {[string]: string}

	result: #Result
	
	#Input: {
		p: "A" | "B"
	}
	
	_input: [Parm=_]: #Input & {
		p: Parm
	}
	
	_input: {
		A: {}
		B: {}
	}
	
	for _, v in _input {
		let Var1 = v.p
		let Var2 = Var1
	
		let Items = {
			"item": {
				key1: Var2
			}
		}
	
		result: "missing-items-\(v.p)": {
			for s, attr in Items {
				if attr.key1 != _|_ {(s): attr.key1}
			}
		}
	}
}
-- out/evalalpha/stats --
Leaks:  182
Freed:  18
Reused: 17
Allocs: 183
Retain: 0

Unifications: 170
Conjuncts:    996
Disjuncts:    30
-- diff/-out/evalalpha/stats<==>+out/eval/stats --
diff old new
--- old
+++ new
@@ -1,9 +1,9 @@
-Leaks:  19
-Freed:  202
-Reused: 187
-Allocs: 34
-Retain: 141
+Leaks:  182
+Freed:  18
+Reused: 17
+Allocs: 183
+Retain: 0
 
-Unifications: 157
-Conjuncts:    447
-Disjuncts:    297
+Unifications: 170
+Conjuncts:    996
+Disjuncts:    30
-- out/eval/stats --
Leaks:  19
Freed:  202
Reused: 187
Allocs: 34
Retain: 141

Unifications: 157
Conjuncts:    447
Disjuncts:    297
-- out/evalalpha --
Errors:
issue3590.full.result."conflicting-A".item: conflicting values "B" and "A":
    ./issue3590.cue:33:6
issue3590.full.result."conflicting-B".item: conflicting values "B" and "A":
    ./issue3590.cue:33:6
issue3590.reduced.result."conflicting-A".item: conflicting values "B" and "A":
    ./issue3590.cue:5:9
    ./issue3590.cue:6:9
issue3590.reduced.result."conflicting-B".item: conflicting values "B" and "A":
    ./issue3590.cue:5:9
    ./issue3590.cue:6:9

Result:
(_|_){
  // [eval]
  t1: (struct){
    x: (struct){
      a: (int){ int }
      y: (struct){
        let X#1 = (struct){
          b: (int){ int }
          c: (int){ 1 }
        }
        v: (int){ 1 }
      }
    }
    x1: (struct){
      a: (int){ 1 }
      y: (struct){
        let X#1 = (struct){
          b: (int){ 1 }
          c: (int){ 1 }
        }
        v: (int){ 1 }
      }
    }
    x2: (struct){
      a: (int){ 2 }
      y: (struct){
        let X#1 = (struct){
          b: (int){ 2 }
          c: (int){ 1 }
        }
        v: (int){ 1 }
      }
    }
    xy: (struct){
      let X#1multi = {
        b: 〈2;a〉
        c: 1
      }
      v: (int){ 1 }
    }
  }
  t2: (struct){
    x: (struct){
      a: (struct){
      }
      y: (struct){
        let X#2 = (struct){
          b: (struct){
          }
          c: (int){ 1 }
        }
        v: (int){ 1 }
      }
    }
    x1: (struct){
      a: (struct){
        q: (int){ 1 }
      }
      y: (struct){
        let X#2 = (struct){
          b: ~(t2.x1.a)
          c: (int){ 1 }
        }
        v: (int){ 1 }
      }
    }
    x2: (struct){
      a: (struct){
        r: (int){ 2 }
      }
      y: (struct){
        let X#2 = (struct){
          b: ~(t2.x2.a)
          c: (int){ 1 }
        }
        v: (int){ 1 }
      }
    }
    xy: (struct){
      a: (struct){
        q: (int){ 1 }
        r: (int){ 2 }
      }
      y: (struct){
        let X#2multi = {
          b: 〈2;a〉
          c: 1
        }
        v: (int){ 1 }
      }
    }
  }
  issue3590: (_|_){
    // [eval]
    reduced: (_|_){
      // [eval]
      result: (_|_){
        // [eval]
        "conflicting-A": (_|_){
          // [eval]
          item: (_|_){
            // [eval] issue3590.reduced.result."conflicting-A".item: conflicting values "B" and "A":
            //     ./issue3590.cue:5:9
            //     ./issue3590.cue:6:9
          }
        }
        "conflicting-B": (_|_){
          // [eval]
          item: (_|_){
            // [eval] issue3590.reduced.result."conflicting-B".item: conflicting values "B" and "A":
            //     ./issue3590.cue:5:9
            //     ./issue3590.cue:6:9
          }
        }
      }
      _input: (struct){
        A: (struct){
          p: (string){ "A" }
        }
        B: (struct){
          p: (string){ "B" }
        }
      }
      let Var1#3multi = 〈1;v〉.p
      let Var2#4multi = 〈0;let Var1#3〉
      let Items#5 = (_|_){
        // [eval]
        item: (_|_){
          // [eval] issue3590.reduced.Items.item: conflicting values "B" and "A":
          //     ./issue3590.cue:5:9
          //     ./issue3590.cue:6:9
        }
      }
    }
    full: (_|_){
      // [eval]
      #Result: (#struct){
      }
      result: (_|_){
        // [eval]
        "conflicting-A": (_|_){
          // [eval]
          item: (_|_){
            // [eval] issue3590.full.result."conflicting-A".item: conflicting values "B" and "A":
            //     ./issue3590.cue:33:6
          }
        }
        "conflicting-B": (_|_){
          // [eval]
          item: (_|_){
            // [eval] issue3590.full.result."conflicting-B".item: conflicting values "B" and "A":
            //     ./issue3590.cue:33:6
          }
        }
      }
      #Input: (#struct){
        p: (string){ |((string){ "A" }, (string){ "B" }) }
      }
      _input: (struct){
        A: (#struct){
          p: (string){ "A" }
        }
        B: (#struct){
          p: (string){ "B" }
        }
      }
      let Var1#6multi = 〈1;v〉.p
      let Var2#7multi = 〈0;let Var1#6〉
      let Items#8 = (_|_){
        // [eval]
        item: (_|_){
          // [eval] issue3590.full.Items.item: conflicting values "B" and "A":
          //     ./issue3590.cue:33:6
        }
      }
    }
  }
  issue3591: (struct){
    missing: (_|_){
      // [incomplete] issue3591.missing.Items.item.key1: cyclic reference to field item:
      //     ./issue3590.cue:71:2
      #Result: (#struct){
      }
      result: (#struct){
        "missing-items-A": (#struct){
        }
        "missing-items-B": (#struct){
        }
      }
      #Input: (#struct){
        p: (string){ |((string){ "A" }, (string){ "B" }) }
      }
      _input: (struct){
        A: (#struct){
          p: (string){ "A" }
        }
        B: (#struct){
          p: (string){ "B" }
        }
      }
      let Var1#9multi = 〈1;v〉.p
      let Var2#Amulti = 〈0;let Var1#9〉
      let Items#B = (struct){
      }
    }
  }
}
-- diff/-out/evalalpha<==>+out/eval --
diff old new
--- old
+++ new
@@ -1,19 +1,14 @@
 Errors:
 issue3590.full.result."conflicting-A".item: conflicting values "B" and "A":
     ./issue3590.cue:33:6
-    ./issue3590.cue:41:2
-    ./issue3590.cue:42:14
-    ./issue3590.cue:43:14
-    ./issue3590.cue:46:12
-    ./issue3590.cue:49:33
+issue3590.full.result."conflicting-B".item: conflicting values "B" and "A":
+    ./issue3590.cue:33:6
 issue3590.reduced.result."conflicting-A".item: conflicting values "B" and "A":
     ./issue3590.cue:5:9
     ./issue3590.cue:6:9
-    ./issue3590.cue:9:2
-    ./issue3590.cue:10:14
-    ./issue3590.cue:14:14
-    ./issue3590.cue:17:10
-    ./issue3590.cue:20:33
+issue3590.reduced.result."conflicting-B".item: conflicting values "B" and "A":
+    ./issue3590.cue:5:9
+    ./issue3590.cue:6:9
 
 Result:
 (_|_){
@@ -76,23 +71,19 @@
       }
       y: (struct){
         let X#2 = (struct){
-          b: (struct){
-            q: (int){ 1 }
-          }
-          c: (int){ 1 }
-        }
-        v: (int){ 1 }
-      }
-    }
-    x2: (struct){
-      a: (struct){
-        r: (int){ 2 }
-      }
-      y: (struct){
-        let X#2 = (struct){
-          b: (struct){
-            r: (int){ 2 }
-          }
+          b: ~(t2.x1.a)
+          c: (int){ 1 }
+        }
+        v: (int){ 1 }
+      }
+    }
+    x2: (struct){
+      a: (struct){
+        r: (int){ 2 }
+      }
+      y: (struct){
+        let X#2 = (struct){
+          b: ~(t2.x2.a)
           c: (int){ 1 }
         }
         v: (int){ 1 }
@@ -124,15 +115,15 @@
             // [eval] issue3590.reduced.result."conflicting-A".item: conflicting values "B" and "A":
             //     ./issue3590.cue:5:9
             //     ./issue3590.cue:6:9
-            //     ./issue3590.cue:9:2
-            //     ./issue3590.cue:10:14
-            //     ./issue3590.cue:14:14
-            //     ./issue3590.cue:17:10
-            //     ./issue3590.cue:20:33
-          }
-        }
-        "conflicting-B": (struct){
-          item: (string){ "B" }
+          }
+        }
+        "conflicting-B": (_|_){
+          // [eval]
+          item: (_|_){
+            // [eval] issue3590.reduced.result."conflicting-B".item: conflicting values "B" and "A":
+            //     ./issue3590.cue:5:9
+            //     ./issue3590.cue:6:9
+          }
         }
       }
       _input: (struct){
@@ -151,10 +142,6 @@
           // [eval] issue3590.reduced.Items.item: conflicting values "B" and "A":
           //     ./issue3590.cue:5:9
           //     ./issue3590.cue:6:9
-          //     ./issue3590.cue:9:2
-          //     ./issue3590.cue:10:14
-          //     ./issue3590.cue:14:14
-          //     ./issue3590.cue:17:10
         }
       }
     }
@@ -169,15 +156,14 @@
           item: (_|_){
             // [eval] issue3590.full.result."conflicting-A".item: conflicting values "B" and "A":
             //     ./issue3590.cue:33:6
-            //     ./issue3590.cue:41:2
-            //     ./issue3590.cue:42:14
-            //     ./issue3590.cue:43:14
-            //     ./issue3590.cue:46:12
-            //     ./issue3590.cue:49:33
-          }
-        }
-        "conflicting-B": (#struct){
-          item: (string){ "B" }
+          }
+        }
+        "conflicting-B": (_|_){
+          // [eval]
+          item: (_|_){
+            // [eval] issue3590.full.result."conflicting-B".item: conflicting values "B" and "A":
+            //     ./issue3590.cue:33:6
+          }
         }
       }
       #Input: (#struct){
@@ -198,16 +184,14 @@
         item: (_|_){
           // [eval] issue3590.full.Items.item: conflicting values "B" and "A":
           //     ./issue3590.cue:33:6
-          //     ./issue3590.cue:41:2
-          //     ./issue3590.cue:42:14
-          //     ./issue3590.cue:43:14
-          //     ./issue3590.cue:46:12
         }
       }
     }
   }
   issue3591: (struct){
-    missing: (struct){
+    missing: (_|_){
+      // [incomplete] issue3591.missing.Items.item.key1: cyclic reference to field item:
+      //     ./issue3590.cue:71:2
       #Result: (#struct){
       }
       result: (#struct){
@@ -229,19 +213,7 @@
       }
       let Var1#9multi = 〈1;v〉.p
       let Var2#Amulti = 〈0;let Var1#9〉
-      let Items#B = (_|_){
-        // [eval]
-        item: (_|_){
-          // [eval]
-          key1: (_|_){
-            // [eval] issue3591.missing.Items.item.key1: conflicting values "B" and "A":
-            //     ./issue3590.cue:63:6
-            //     ./issue3590.cue:71:2
-            //     ./issue3590.cue:72:14
-            //     ./issue3590.cue:73:14
-            //     ./issue3590.cue:77:11
-          }
-        }
+      let Items#B = (struct){
       }
     }
   }
-- diff/todo/p4 --
Reduce conjunct group size. Semantically correct, though.
-- out/eval --
Errors:
issue3590.full.result."conflicting-A".item: conflicting values "B" and "A":
    ./issue3590.cue:33:6
    ./issue3590.cue:41:2
    ./issue3590.cue:42:14
    ./issue3590.cue:43:14
    ./issue3590.cue:46:12
    ./issue3590.cue:49:33
issue3590.reduced.result."conflicting-A".item: conflicting values "B" and "A":
    ./issue3590.cue:5:9
    ./issue3590.cue:6:9
    ./issue3590.cue:9:2
    ./issue3590.cue:10:14
    ./issue3590.cue:14:14
    ./issue3590.cue:17:10
    ./issue3590.cue:20:33

Result:
(_|_){
  // [eval]
  t1: (struct){
    x: (struct){
      a: (int){ int }
      y: (struct){
        let X#1 = (struct){
          b: (int){ int }
          c: (int){ 1 }
        }
        v: (int){ 1 }
      }
    }
    x1: (struct){
      a: (int){ 1 }
      y: (struct){
        let X#1 = (struct){
          b: (int){ 1 }
          c: (int){ 1 }
        }
        v: (int){ 1 }
      }
    }
    x2: (struct){
      a: (int){ 2 }
      y: (struct){
        let X#1 = (struct){
          b: (int){ 2 }
          c: (int){ 1 }
        }
        v: (int){ 1 }
      }
    }
    xy: (struct){
      let X#1multi = {
        b: 〈2;a〉
        c: 1
      }
      v: (int){ 1 }
    }
  }
  t2: (struct){
    x: (struct){
      a: (struct){
      }
      y: (struct){
        let X#2 = (struct){
          b: (struct){
          }
          c: (int){ 1 }
        }
        v: (int){ 1 }
      }
    }
    x1: (struct){
      a: (struct){
        q: (int){ 1 }
      }
      y: (struct){
        let X#2 = (struct){
          b: (struct){
            q: (int){ 1 }
          }
          c: (int){ 1 }
        }
        v: (int){ 1 }
      }
    }
    x2: (struct){
      a: (struct){
        r: (int){ 2 }
      }
      y: (struct){
        let X#2 = (struct){
          b: (struct){
            r: (int){ 2 }
          }
          c: (int){ 1 }
        }
        v: (int){ 1 }
      }
    }
    xy: (struct){
      a: (struct){
        q: (int){ 1 }
        r: (int){ 2 }
      }
      y: (struct){
        let X#2multi = {
          b: 〈2;a〉
          c: 1
        }
        v: (int){ 1 }
      }
    }
  }
  issue3590: (_|_){
    // [eval]
    reduced: (_|_){
      // [eval]
      result: (_|_){
        // [eval]
        "conflicting-A": (_|_){
          // [eval]
          item: (_|_){
            // [eval] issue3590.reduced.result."conflicting-A".item: conflicting values "B" and "A":
            //     ./issue3590.cue:5:9
            //     ./issue3590.cue:6:9
            //     ./issue3590.cue:9:2
            //     ./issue3590.cue:10:14
            //     ./issue3590.cue:14:14
            //     ./issue3590.cue:17:10
            //     ./issue3590.cue:20:33
          }
        }
        "conflicting-B": (struct){
          item: (string){ "B" }
        }
      }
      _input: (struct){
        A: (struct){
          p: (string){ "A" }
        }
        B: (struct){
          p: (string){ "B" }
        }
      }
      let Var1#3multi = 〈1;v〉.p
      let Var2#4multi = 〈0;let Var1#3〉
      let Items#5 = (_|_){
        // [eval]
        item: (_|_){
          // [eval] issue3590.reduced.Items.item: conflicting values "B" and "A":
          //     ./issue3590.cue:5:9
          //     ./issue3590.cue:6:9
          //     ./issue3590.cue:9:2
          //     ./issue3590.cue:10:14
          //     ./issue3590.cue:14:14
          //     ./issue3590.cue:17:10
        }
      }
    }
    full: (_|_){
      // [eval]
      #Result: (#struct){
      }
      result: (_|_){
        // [eval]
        "conflicting-A": (_|_){
          // [eval]
          item: (_|_){
            // [eval] issue3590.full.result."conflicting-A".item: conflicting values "B" and "A":
            //     ./issue3590.cue:33:6
            //     ./issue3590.cue:41:2
            //     ./issue3590.cue:42:14
            //     ./issue3590.cue:43:14
            //     ./issue3590.cue:46:12
            //     ./issue3590.cue:49:33
          }
        }
        "conflicting-B": (#struct){
          item: (string){ "B" }
        }
      }
      #Input: (#struct){
        p: (string){ |((string){ "A" }, (string){ "B" }) }
      }
      _input: (struct){
        A: (#struct){
          p: (string){ "A" }
        }
        B: (#struct){
          p: (string){ "B" }
        }
      }
      let Var1#6multi = 〈1;v〉.p
      let Var2#7multi = 〈0;let Var1#6〉
      let Items#8 = (_|_){
        // [eval]
        item: (_|_){
          // [eval] issue3590.full.Items.item: conflicting values "B" and "A":
          //     ./issue3590.cue:33:6
          //     ./issue3590.cue:41:2
          //     ./issue3590.cue:42:14
          //     ./issue3590.cue:43:14
          //     ./issue3590.cue:46:12
        }
      }
    }
  }
  issue3591: (struct){
    missing: (struct){
      #Result: (#struct){
      }
      result: (#struct){
        "missing-items-A": (#struct){
        }
        "missing-items-B": (#struct){
        }
      }
      #Input: (#struct){
        p: (string){ |((string){ "A" }, (string){ "B" }) }
      }
      _input: (struct){
        A: (#struct){
          p: (string){ "A" }
        }
        B: (#struct){
          p: (string){ "B" }
        }
      }
      let Var1#9multi = 〈1;v〉.p
      let Var2#Amulti = 〈0;let Var1#9〉
      let Items#B = (_|_){
        // [eval]
        item: (_|_){
          // [eval]
          key1: (_|_){
            // [eval] issue3591.missing.Items.item.key1: conflicting values "B" and "A":
            //     ./issue3590.cue:63:6
            //     ./issue3590.cue:71:2
            //     ./issue3590.cue:72:14
            //     ./issue3590.cue:73:14
            //     ./issue3590.cue:77:11
          }
        }
      }
    }
  }
}
-- out/compile --
--- in.cue
{
  t1: {
    x: {
      a: int
      y: {
        let X#1 = {
          b: 〈2;a〉
          c: 1
        }
        v: 〈0;let X#1〉.c
      }
    }
    x1: 〈0;x〉
    x1: {
      a: 1
    }
    x2: 〈0;x〉
    x2: {
      a: 2
    }
    xy: (〈0;x1〉.y & 〈0;x2〉.y)
  }
  t2: {
    x: {
      a: {}
      y: {
        let X#2 = {
          b: 〈2;a〉
          c: 1
        }
        v: 〈0;let X#2〉.c
      }
    }
    x1: 〈0;x〉
    x1: {
      a: {
        q: 1
      }
    }
    x2: 〈0;x〉
    x2: {
      a: {
        r: 2
      }
    }
    xy: (〈0;x1〉 & 〈0;x2〉)
  }
}
--- issue3590.cue
{
  issue3590: {
    reduced: {
      result: {
        [_]: {
          [string]: string
        }
      }
      _input: {
        A: {
          p: "A"
        }
        B: {
          p: "B"
        }
      }
      for _, v in 〈0;_input〉 {
        let Var1#3multi = 〈1;v〉.p
        let Var2#4multi = 〈0;let Var1#3〉
        let Items#5 = {
          item: 〈1;let Var2#4〉
        }
        result: {
          "conflicting-\(〈2;v〉.p)": 〈1;let Items#5〉
        }
      }
    }
  }
  issue3590: {
    full: {
      #Result: {
        [_]: {
          [string]: string
        }
      }
      result: 〈0;#Result〉
      #Input: {
        p: ("A"|"B")
      }
      _input: {
        [_]: (〈1;#Input〉 & {
          p: 〈1;-〉
        })
      }
      _input: {
        A: {}
        B: {}
      }
      for _, v in 〈0;_input〉 {
        let Var1#6multi = 〈1;v〉.p
        let Var2#7multi = 〈0;let Var1#6〉
        let Items#8 = {
          item: 〈1;let Var2#7〉
        }
        result: {
          "conflicting-\(〈2;v〉.p)": 〈1;let Items#8〉
        }
      }
    }
  }
  issue3591: {
    missing: {
      #Result: {
        [_]: {
          [string]: string
        }
      }
      result: 〈0;#Result〉
      #Input: {
        p: ("A"|"B")
      }
      _input: {
        [_]: (〈1;#Input〉 & {
          p: 〈1;-〉
        })
      }
      _input: {
        A: {}
        B: {}
      }
      for _, v in 〈0;_input〉 {
        let Var1#9multi = 〈1;v〉.p
        let Var2#Amulti = 〈0;let Var1#9〉
        let Items#B = {
          item: {
            key1: 〈2;let Var2#A〉
          }
        }
        result: {
          "missing-items-\(〈2;v〉.p)": {
            for s, attr in 〈2;let Items#B〉 {
              if (〈1;attr〉.key1 != _|_(explicit error (_|_ literal) in source)) {
                〈2;s〉: 〈2;attr〉.key1
              }
            }
          }
        }
      }
    }
  }
}
