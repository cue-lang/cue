

-- in.cue --
issue3062: ok1: {
	#S: "a"
	#o: x: #S
	o: #o
	o: X
	X: x: A
	A: "a"
}

issue3601: ok1: {
	Y: (X & __no_sharing).a
	X: a: b: a.b
	out: Y & __no_sharing
}

// Test debug facilities to turn of sharing.
debug: {
	sharingOn: {
		a: b
		b: c: 1
	}
	sharingOff: t1: {
		a: b & __no_sharing
		b: c: 1
	}
	sharingOff: t2: {
		a: b
		a: __no_sharing
		b: c: 1
	}
	sharingOff: t3: {
		a: __no_sharing
		a: b
		b: c: 1
	}
}
-- dupshare.cue --
// This file contains tests where unifying the same field multiple times into
// a field with different "closedness" history should compute closedness
// correctly.

issue3641: simplified: t1: {
	#Context1: ctx: {}
	Context2: ctx: {}

	// Must both refer to #Context1
	#Config1: cfg: #Context1
	#Config3: cfg: #Context1

	Config2: cfg: Context2

	Config: #Config1 & Config2

	// order matters
	out: Config // Indirection necessary.
	out: #Config3
}
issue3641: simplified: t2: {
	#Context1: ctx: {}
	Context2: ctx: {}

	// Must both refer to #Context1
	#Config1: cfg: #Context1
	#Config3: cfg: #Context1

	Config2: cfg: Context2
	
	Config: #Config1 & Config2

	// order matters
	out: Config // Indirection necessary.
	out: #Config3
}
// Variant where sharing is explicitly disabled.
issue3641: simplified: t3: {
	#Context1: ctx: {}
	Context2: ctx: {}

	// Must both refer to #Context1
	#Config1: cfg: #Context1
	#Config3: cfg: #Context1

	Config2: cfg: Context2

	Config: #Config1 & Config2

	// order matters
	out: __no_sharing
	out: Config // Indirection necessary.
	out: #Config3
}
issue3641: full: {
	#Context1: ctx: {}
	#Context2: ctx: {}

	#Config1: cfg: #Context1
	#Config2: cfg: #Context2

	#Schema: sch: #Config1

	#Config: #Config1 & #Config2

	let config = #Config
	out: #Schema & {
		sch: config
	}
}
issue3546: reduced: {
	all: ["a"]
	#all: all

	#Network: list: #List
	#List: [...string]

	val: #Network
	val: list: #all

	out: #Network
	out: val
}
-- sharecycle.cue --
shareCycle: t1: {
	#X: {}
	Y: {
		x: #X & Y
	}
}
shareCycle: t2: {
	#X: int
	Y: {
		x: #X & Y
	}
}
shareCycle: t3: {
	#X: {}
	Y: {
		x: Y & #X
	}
}
-- acrossdisjunction.cue --
import "list"

issue3679: {
	// The result of list.Repeat is structure shared in env. This needs to be
	// "unshared" within the disjunction. Ensure that unsharing a shared Vertex
	// works arcross disjunction boundaries.
	b: null | [string]
	b: list.Repeat([for k, v in [0] { "bar" }], 1)
}
-- out/eval/stats --
Leaks:  3
Freed:  174
Reused: 167
Allocs: 10
Retain: 21

Unifications: 175
Conjuncts:    365
Disjuncts:    193
-- out/evalalpha --
Errors:
shareCycle.t2.Y.x: conflicting values int and {x:(#X & Y)} (mismatched types int and struct):
    ./sharecycle.cue:8:6
    ./sharecycle.cue:9:5
shareCycle.t1.Y.x.x: field not allowed:
    ./sharecycle.cue:4:11
    ./sharecycle.cue:4:3
shareCycle.t2.Y.x.x: field not allowed:
    ./sharecycle.cue:10:11
    ./sharecycle.cue:10:3
shareCycle.t3.Y.x.x: field not allowed:
    ./sharecycle.cue:16:10
    ./sharecycle.cue:16:3

Result:
(_|_){
  // [eval]
  issue3679: (struct){
    b: (#list){
      0: (string){ "bar" }
    }
  }
  issue3641: (struct){
    simplified: (struct){
      t1: (struct){
        #Context1: (#struct){
          ctx: (#struct){
          }
        }
        Context2: (struct){
          ctx: (struct){
          }
        }
        #Config1: (#struct){
          cfg: ~(issue3641.simplified.t1.#Context1)
        }
        #Config3: (#struct){
          cfg: ~(issue3641.simplified.t1.#Context1)
        }
        Config2: (struct){
          cfg: ~(issue3641.simplified.t1.Context2)
        }
        Config: (#struct){
          cfg: (#struct){
            ctx: (#struct){
            }
          }
        }
        out: (#struct){
          cfg: (#struct){
            ctx: (#struct){
            }
          }
        }
      }
      t2: (struct){
        #Context1: (#struct){
          ctx: (#struct){
          }
        }
        Context2: (struct){
          ctx: (struct){
          }
        }
        #Config1: (#struct){
          cfg: ~(issue3641.simplified.t2.#Context1)
        }
        #Config3: (#struct){
          cfg: ~(issue3641.simplified.t2.#Context1)
        }
        Config2: (struct){
          cfg: ~(issue3641.simplified.t2.Context2)
        }
        Config: (#struct){
          cfg: (#struct){
            ctx: (#struct){
            }
          }
        }
        out: (#struct){
          cfg: (#struct){
            ctx: (#struct){
            }
          }
        }
      }
      t3: (struct){
        #Context1: (#struct){
          ctx: (#struct){
          }
        }
        Context2: (struct){
          ctx: (struct){
          }
        }
        #Config1: (#struct){
          cfg: ~(issue3641.simplified.t3.#Context1)
        }
        #Config3: (#struct){
          cfg: ~(issue3641.simplified.t3.#Context1)
        }
        Config2: (struct){
          cfg: ~(issue3641.simplified.t3.Context2)
        }
        Config: (#struct){
          cfg: (#struct){
            ctx: (#struct){
            }
          }
        }
        out: (#struct){
          cfg: (#struct){
            ctx: (#struct){
            }
          }
        }
      }
    }
    full: (struct){
      #Context1: (#struct){
        ctx: (#struct){
        }
      }
      #Context2: (#struct){
        ctx: (#struct){
        }
      }
      #Config1: (#struct){
        cfg: ~(issue3641.full.#Context1)
      }
      #Config2: (#struct){
        cfg: ~(issue3641.full.#Context2)
      }
      #Schema: (#struct){
        sch: ~(issue3641.full.#Config1)
      }
      #Config: (#struct){
        cfg: (#struct){
          ctx: (#struct){
          }
        }
      }
      let config#1 = ~(issue3641.full.#Config)
      out: (#struct){
        sch: (#struct){
          cfg: (#struct){
            ctx: (#struct){
            }
          }
        }
      }
    }
  }
  issue3546: (struct){
    reduced: (struct){
      all: (#list){
        0: (string){ "a" }
      }
      #all: (#list){
        0: (string){ "a" }
      }
      #Network: (#struct){
        list: (list){
        }
      }
      #List: (list){
      }
      val: (#struct){
        list: (#list){
          0: (string){ "a" }
        }
      }
      out: (#struct){
        list: (#list){
          0: (string){ "a" }
        }
      }
    }
  }
  issue3062: (struct){
    ok1: (struct){
      #S: (string){ "a" }
      #o: (#struct){
        x: (string){ "a" }
      }
      o: (#struct){
        x: (string){ "a" }
      }
      X: (struct){
        x: (string){ "a" }
      }
      A: (string){ "a" }
    }
  }
  issue3601: (struct){
    ok1: (struct){
      Y: (struct){
        b: (_){ _ }
      }
      X: (struct){
        a: (struct){
          b: (_){ _ }
        }
      }
      out: (struct){
        b: (_){ _ }
      }
    }
  }
  debug: (struct){
    sharingOn: (struct){
      a: ~(debug.sharingOn.b)
      b: (struct){
        c: (int){ 1 }
      }
    }
    sharingOff: (struct){
      t1: (struct){
        a: (struct){
          c: (int){ 1 }
        }
        b: (struct){
          c: (int){ 1 }
        }
      }
      t2: (struct){
        a: (struct){
          c: (int){ 1 }
        }
        b: (struct){
          c: (int){ 1 }
        }
      }
      t3: (struct){
        a: (struct){
          c: (int){ 1 }
        }
        b: (struct){
          c: (int){ 1 }
        }
      }
    }
  }
  shareCycle: (_|_){
    // [eval]
    t1: (_|_){
      // [eval]
      #X: (#struct){
      }
      Y: (_|_){
        // [eval]
        x: (_|_){
          // [eval]
          x: (_|_){
            // [eval] shareCycle.t1.Y.x.x: field not allowed:
            //     ./sharecycle.cue:4:11
            //     ./sharecycle.cue:4:3
          }
        }
      }
    }
    t2: (_|_){
      // [eval]
      #X: (int){ int }
      Y: (_|_){
        // [eval]
        x: (_|_){
          // [eval] shareCycle.t2.Y.x: conflicting values int and {x:(#X & Y)} (mismatched types int and struct):
          //     ./sharecycle.cue:8:6
          //     ./sharecycle.cue:9:5
          // shareCycle.t2.Y.x.x: field not allowed:
          //     ./sharecycle.cue:10:11
          //     ./sharecycle.cue:10:3
          x: (_|_){
            // [eval] shareCycle.t2.Y.x.x: field not allowed:
            //     ./sharecycle.cue:10:11
            //     ./sharecycle.cue:10:3
          }
        }
      }
    }
    t3: (_|_){
      // [eval]
      #X: (#struct){
      }
      Y: (_|_){
        // [eval]
        x: (_|_){
          // [eval]
          x: (_|_){
            // [eval] shareCycle.t3.Y.x.x: field not allowed:
            //     ./sharecycle.cue:16:10
            //     ./sharecycle.cue:16:3
          }
        }
      }
    }
  }
}
-- diff/-out/evalalpha<==>+out/eval --
diff old new
--- old
+++ new
@@ -1,11 +1,16 @@
 Errors:
-shareCycle.t1.Y.x.x: structural cycle
 shareCycle.t2.Y.x: conflicting values int and {x:(#X & Y)} (mismatched types int and struct):
     ./sharecycle.cue:8:6
     ./sharecycle.cue:9:5
+shareCycle.t1.Y.x.x: field not allowed:
+    ./sharecycle.cue:4:11
+    ./sharecycle.cue:4:3
+shareCycle.t2.Y.x.x: field not allowed:
     ./sharecycle.cue:10:11
-shareCycle.t2.Y.x.x: structural cycle
-shareCycle.t3.Y.x.x: structural cycle
+    ./sharecycle.cue:10:3
+shareCycle.t3.Y.x.x: field not allowed:
+    ./sharecycle.cue:16:10
+    ./sharecycle.cue:16:3
 
 Result:
 (_|_){
@@ -27,102 +32,75 @@
           }
         }
         #Config1: (#struct){
-          cfg: (#struct){
-            ctx: (#struct){
-            }
-          }
-        }
-        #Config3: (#struct){
-          cfg: (#struct){
-            ctx: (#struct){
-            }
-          }
-        }
-        Config2: (struct){
-          cfg: (struct){
-            ctx: (struct){
-            }
-          }
-        }
-        Config: (#struct){
-          cfg: (#struct){
-            ctx: (#struct){
-            }
-          }
-        }
-        out: (#struct){
-          cfg: (#struct){
-            ctx: (#struct){
-            }
-          }
-        }
-      }
-      t2: (struct){
-        #Context1: (#struct){
-          ctx: (#struct){
-          }
-        }
-        Context2: (struct){
-          ctx: (struct){
-          }
-        }
-        #Config1: (#struct){
-          cfg: (#struct){
-            ctx: (#struct){
-            }
-          }
-        }
-        #Config3: (#struct){
-          cfg: (#struct){
-            ctx: (#struct){
-            }
-          }
-        }
-        Config2: (struct){
-          cfg: (struct){
-            ctx: (struct){
-            }
-          }
-        }
-        Config: (#struct){
-          cfg: (#struct){
-            ctx: (#struct){
-            }
-          }
-        }
-        out: (#struct){
-          cfg: (#struct){
-            ctx: (#struct){
-            }
-          }
-        }
-      }
-      t3: (struct){
-        #Context1: (#struct){
-          ctx: (#struct){
-          }
-        }
-        Context2: (struct){
-          ctx: (struct){
-          }
-        }
-        #Config1: (#struct){
-          cfg: (#struct){
-            ctx: (#struct){
-            }
-          }
-        }
-        #Config3: (#struct){
-          cfg: (#struct){
-            ctx: (#struct){
-            }
-          }
-        }
-        Config2: (struct){
-          cfg: (struct){
-            ctx: (struct){
-            }
-          }
+          cfg: ~(issue3641.simplified.t1.#Context1)
+        }
+        #Config3: (#struct){
+          cfg: ~(issue3641.simplified.t1.#Context1)
+        }
+        Config2: (struct){
+          cfg: ~(issue3641.simplified.t1.Context2)
+        }
+        Config: (#struct){
+          cfg: (#struct){
+            ctx: (#struct){
+            }
+          }
+        }
+        out: (#struct){
+          cfg: (#struct){
+            ctx: (#struct){
+            }
+          }
+        }
+      }
+      t2: (struct){
+        #Context1: (#struct){
+          ctx: (#struct){
+          }
+        }
+        Context2: (struct){
+          ctx: (struct){
+          }
+        }
+        #Config1: (#struct){
+          cfg: ~(issue3641.simplified.t2.#Context1)
+        }
+        #Config3: (#struct){
+          cfg: ~(issue3641.simplified.t2.#Context1)
+        }
+        Config2: (struct){
+          cfg: ~(issue3641.simplified.t2.Context2)
+        }
+        Config: (#struct){
+          cfg: (#struct){
+            ctx: (#struct){
+            }
+          }
+        }
+        out: (#struct){
+          cfg: (#struct){
+            ctx: (#struct){
+            }
+          }
+        }
+      }
+      t3: (struct){
+        #Context1: (#struct){
+          ctx: (#struct){
+          }
+        }
+        Context2: (struct){
+          ctx: (struct){
+          }
+        }
+        #Config1: (#struct){
+          cfg: ~(issue3641.simplified.t3.#Context1)
+        }
+        #Config3: (#struct){
+          cfg: ~(issue3641.simplified.t3.#Context1)
+        }
+        Config2: (struct){
+          cfg: ~(issue3641.simplified.t3.Context2)
         }
         Config: (#struct){
           cfg: (#struct){
@@ -148,24 +126,13 @@
         }
       }
       #Config1: (#struct){
-        cfg: (#struct){
-          ctx: (#struct){
-          }
-        }
+        cfg: ~(issue3641.full.#Context1)
       }
       #Config2: (#struct){
-        cfg: (#struct){
-          ctx: (#struct){
-          }
-        }
+        cfg: ~(issue3641.full.#Context2)
       }
       #Schema: (#struct){
-        sch: (#struct){
-          cfg: (#struct){
-            ctx: (#struct){
-            }
-          }
-        }
+        sch: ~(issue3641.full.#Config1)
       }
       #Config: (#struct){
         cfg: (#struct){
@@ -173,12 +140,7 @@
           }
         }
       }
-      let config#1 = (#struct){
-        cfg: (#struct){
-          ctx: (#struct){
-          }
-        }
-      }
+      let config#1 = ~(issue3641.full.#Config)
       out: (#struct){
         sch: (#struct){
           cfg: (#struct){
@@ -247,9 +209,7 @@
   }
   debug: (struct){
     sharingOn: (struct){
-      a: (struct){
-        c: (int){ 1 }
-      }
+      a: ~(debug.sharingOn.b)
       b: (struct){
         c: (int){ 1 }
       }
@@ -284,15 +244,17 @@
   shareCycle: (_|_){
     // [eval]
     t1: (_|_){
-      // [structural cycle]
-      #X: (#struct){
-      }
-      Y: (_|_){
-        // [structural cycle]
-        x: (_|_){
-          // [structural cycle]
-          x: (_|_){
-            // [structural cycle] shareCycle.t1.Y.x.x: structural cycle
+      // [eval]
+      #X: (#struct){
+      }
+      Y: (_|_){
+        // [eval]
+        x: (_|_){
+          // [eval]
+          x: (_|_){
+            // [eval] shareCycle.t1.Y.x.x: field not allowed:
+            //     ./sharecycle.cue:4:11
+            //     ./sharecycle.cue:4:3
           }
         }
       }
@@ -306,23 +268,29 @@
           // [eval] shareCycle.t2.Y.x: conflicting values int and {x:(#X & Y)} (mismatched types int and struct):
           //     ./sharecycle.cue:8:6
           //     ./sharecycle.cue:9:5
+          // shareCycle.t2.Y.x.x: field not allowed:
           //     ./sharecycle.cue:10:11
-          x: (_|_){
-            // [structural cycle] shareCycle.t2.Y.x.x: structural cycle
+          //     ./sharecycle.cue:10:3
+          x: (_|_){
+            // [eval] shareCycle.t2.Y.x.x: field not allowed:
+            //     ./sharecycle.cue:10:11
+            //     ./sharecycle.cue:10:3
           }
         }
       }
     }
     t3: (_|_){
-      // [structural cycle]
-      #X: (#struct){
-      }
-      Y: (_|_){
-        // [structural cycle]
-        x: (_|_){
-          // [structural cycle]
-          x: (_|_){
-            // [structural cycle] shareCycle.t3.Y.x.x: structural cycle
+      // [eval]
+      #X: (#struct){
+      }
+      Y: (_|_){
+        // [eval]
+        x: (_|_){
+          // [eval]
+          x: (_|_){
+            // [eval] shareCycle.t3.Y.x.x: field not allowed:
+            //     ./sharecycle.cue:16:10
+            //     ./sharecycle.cue:16:3
           }
         }
       }
-- out/eval --
Errors:
shareCycle.t1.Y.x.x: structural cycle
shareCycle.t2.Y.x: conflicting values int and {x:(#X & Y)} (mismatched types int and struct):
    ./sharecycle.cue:8:6
    ./sharecycle.cue:9:5
    ./sharecycle.cue:10:11
shareCycle.t2.Y.x.x: structural cycle
shareCycle.t3.Y.x.x: structural cycle

Result:
(_|_){
  // [eval]
  issue3679: (struct){
    b: (#list){
      0: (string){ "bar" }
    }
  }
  issue3641: (struct){
    simplified: (struct){
      t1: (struct){
        #Context1: (#struct){
          ctx: (#struct){
          }
        }
        Context2: (struct){
          ctx: (struct){
          }
        }
        #Config1: (#struct){
          cfg: (#struct){
            ctx: (#struct){
            }
          }
        }
        #Config3: (#struct){
          cfg: (#struct){
            ctx: (#struct){
            }
          }
        }
        Config2: (struct){
          cfg: (struct){
            ctx: (struct){
            }
          }
        }
        Config: (#struct){
          cfg: (#struct){
            ctx: (#struct){
            }
          }
        }
        out: (#struct){
          cfg: (#struct){
            ctx: (#struct){
            }
          }
        }
      }
      t2: (struct){
        #Context1: (#struct){
          ctx: (#struct){
          }
        }
        Context2: (struct){
          ctx: (struct){
          }
        }
        #Config1: (#struct){
          cfg: (#struct){
            ctx: (#struct){
            }
          }
        }
        #Config3: (#struct){
          cfg: (#struct){
            ctx: (#struct){
            }
          }
        }
        Config2: (struct){
          cfg: (struct){
            ctx: (struct){
            }
          }
        }
        Config: (#struct){
          cfg: (#struct){
            ctx: (#struct){
            }
          }
        }
        out: (#struct){
          cfg: (#struct){
            ctx: (#struct){
            }
          }
        }
      }
      t3: (struct){
        #Context1: (#struct){
          ctx: (#struct){
          }
        }
        Context2: (struct){
          ctx: (struct){
          }
        }
        #Config1: (#struct){
          cfg: (#struct){
            ctx: (#struct){
            }
          }
        }
        #Config3: (#struct){
          cfg: (#struct){
            ctx: (#struct){
            }
          }
        }
        Config2: (struct){
          cfg: (struct){
            ctx: (struct){
            }
          }
        }
        Config: (#struct){
          cfg: (#struct){
            ctx: (#struct){
            }
          }
        }
        out: (#struct){
          cfg: (#struct){
            ctx: (#struct){
            }
          }
        }
      }
    }
    full: (struct){
      #Context1: (#struct){
        ctx: (#struct){
        }
      }
      #Context2: (#struct){
        ctx: (#struct){
        }
      }
      #Config1: (#struct){
        cfg: (#struct){
          ctx: (#struct){
          }
        }
      }
      #Config2: (#struct){
        cfg: (#struct){
          ctx: (#struct){
          }
        }
      }
      #Schema: (#struct){
        sch: (#struct){
          cfg: (#struct){
            ctx: (#struct){
            }
          }
        }
      }
      #Config: (#struct){
        cfg: (#struct){
          ctx: (#struct){
          }
        }
      }
      let config#1 = (#struct){
        cfg: (#struct){
          ctx: (#struct){
          }
        }
      }
      out: (#struct){
        sch: (#struct){
          cfg: (#struct){
            ctx: (#struct){
            }
          }
        }
      }
    }
  }
  issue3546: (struct){
    reduced: (struct){
      all: (#list){
        0: (string){ "a" }
      }
      #all: (#list){
        0: (string){ "a" }
      }
      #Network: (#struct){
        list: (list){
        }
      }
      #List: (list){
      }
      val: (#struct){
        list: (#list){
          0: (string){ "a" }
        }
      }
      out: (#struct){
        list: (#list){
          0: (string){ "a" }
        }
      }
    }
  }
  issue3062: (struct){
    ok1: (struct){
      #S: (string){ "a" }
      #o: (#struct){
        x: (string){ "a" }
      }
      o: (#struct){
        x: (string){ "a" }
      }
      X: (struct){
        x: (string){ "a" }
      }
      A: (string){ "a" }
    }
  }
  issue3601: (struct){
    ok1: (struct){
      Y: (struct){
        b: (_){ _ }
      }
      X: (struct){
        a: (struct){
          b: (_){ _ }
        }
      }
      out: (struct){
        b: (_){ _ }
      }
    }
  }
  debug: (struct){
    sharingOn: (struct){
      a: (struct){
        c: (int){ 1 }
      }
      b: (struct){
        c: (int){ 1 }
      }
    }
    sharingOff: (struct){
      t1: (struct){
        a: (struct){
          c: (int){ 1 }
        }
        b: (struct){
          c: (int){ 1 }
        }
      }
      t2: (struct){
        a: (struct){
          c: (int){ 1 }
        }
        b: (struct){
          c: (int){ 1 }
        }
      }
      t3: (struct){
        a: (struct){
          c: (int){ 1 }
        }
        b: (struct){
          c: (int){ 1 }
        }
      }
    }
  }
  shareCycle: (_|_){
    // [eval]
    t1: (_|_){
      // [structural cycle]
      #X: (#struct){
      }
      Y: (_|_){
        // [structural cycle]
        x: (_|_){
          // [structural cycle]
          x: (_|_){
            // [structural cycle] shareCycle.t1.Y.x.x: structural cycle
          }
        }
      }
    }
    t2: (_|_){
      // [eval]
      #X: (int){ int }
      Y: (_|_){
        // [eval]
        x: (_|_){
          // [eval] shareCycle.t2.Y.x: conflicting values int and {x:(#X & Y)} (mismatched types int and struct):
          //     ./sharecycle.cue:8:6
          //     ./sharecycle.cue:9:5
          //     ./sharecycle.cue:10:11
          x: (_|_){
            // [structural cycle] shareCycle.t2.Y.x.x: structural cycle
          }
        }
      }
    }
    t3: (_|_){
      // [structural cycle]
      #X: (#struct){
      }
      Y: (_|_){
        // [structural cycle]
        x: (_|_){
          // [structural cycle]
          x: (_|_){
            // [structural cycle] shareCycle.t3.Y.x.x: structural cycle
          }
        }
      }
    }
  }
}
-- out/compile --
--- acrossdisjunction.cue
{
  issue3679: {
    b: (null|[
      string,
    ])
    b: 〈import;list〉.Repeat([
      for k, v in [
        0,
      ] {
        "bar"
      },
    ], 1)
  }
}
--- dupshare.cue
{
  issue3641: {
    simplified: {
      t1: {
        #Context1: {
          ctx: {}
        }
        Context2: {
          ctx: {}
        }
        #Config1: {
          cfg: 〈1;#Context1〉
        }
        #Config3: {
          cfg: 〈1;#Context1〉
        }
        Config2: {
          cfg: 〈1;Context2〉
        }
        Config: (〈0;#Config1〉 & 〈0;Config2〉)
        out: 〈0;Config〉
        out: 〈0;#Config3〉
      }
    }
  }
  issue3641: {
    simplified: {
      t2: {
        #Context1: {
          ctx: {}
        }
        Context2: {
          ctx: {}
        }
        #Config1: {
          cfg: 〈1;#Context1〉
        }
        #Config3: {
          cfg: 〈1;#Context1〉
        }
        Config2: {
          cfg: 〈1;Context2〉
        }
        Config: (〈0;#Config1〉 & 〈0;Config2〉)
        out: 〈0;Config〉
        out: 〈0;#Config3〉
      }
    }
  }
  issue3641: {
    simplified: {
      t3: {
        #Context1: {
          ctx: {}
        }
        Context2: {
          ctx: {}
        }
        #Config1: {
          cfg: 〈1;#Context1〉
        }
        #Config3: {
          cfg: 〈1;#Context1〉
        }
        Config2: {
          cfg: 〈1;Context2〉
        }
        Config: (〈0;#Config1〉 & 〈0;Config2〉)
        out: _|_(no sharing)
        out: 〈0;Config〉
        out: 〈0;#Config3〉
      }
    }
  }
  issue3641: {
    full: {
      #Context1: {
        ctx: {}
      }
      #Context2: {
        ctx: {}
      }
      #Config1: {
        cfg: 〈1;#Context1〉
      }
      #Config2: {
        cfg: 〈1;#Context2〉
      }
      #Schema: {
        sch: 〈1;#Config1〉
      }
      #Config: (〈0;#Config1〉 & 〈0;#Config2〉)
      let config#1 = 〈0;#Config〉
      out: (〈0;#Schema〉 & {
        sch: 〈1;let config#1〉
      })
    }
  }
  issue3546: {
    reduced: {
      all: [
        "a",
      ]
      #all: 〈0;all〉
      #Network: {
        list: 〈1;#List〉
      }
      #List: [
        ...string,
      ]
      val: 〈0;#Network〉
      val: {
        list: 〈1;#all〉
      }
      out: 〈0;#Network〉
      out: 〈0;val〉
    }
  }
}
--- in.cue
{
  issue3062: {
    ok1: {
      #S: "a"
      #o: {
        x: 〈1;#S〉
      }
      o: 〈0;#o〉
      o: 〈0;X〉
      X: {
        x: 〈1;A〉
      }
      A: "a"
    }
  }
  issue3601: {
    ok1: {
      Y: (〈0;X〉 & _|_(no sharing)).a
      X: {
        a: {
          b: 〈1;a〉.b
        }
      }
      out: (〈0;Y〉 & _|_(no sharing))
    }
  }
  debug: {
    sharingOn: {
      a: 〈0;b〉
      b: {
        c: 1
      }
    }
    sharingOff: {
      t1: {
        a: (〈0;b〉 & _|_(no sharing))
        b: {
          c: 1
        }
      }
    }
    sharingOff: {
      t2: {
        a: 〈0;b〉
        a: _|_(no sharing)
        b: {
          c: 1
        }
      }
    }
    sharingOff: {
      t3: {
        a: _|_(no sharing)
        a: 〈0;b〉
        b: {
          c: 1
        }
      }
    }
  }
}
--- sharecycle.cue
{
  shareCycle: {
    t1: {
      #X: {}
      Y: {
        x: (〈1;#X〉 & 〈1;Y〉)
      }
    }
  }
  shareCycle: {
    t2: {
      #X: int
      Y: {
        x: (〈1;#X〉 & 〈1;Y〉)
      }
    }
  }
  shareCycle: {
    t3: {
      #X: {}
      Y: {
        x: (〈1;Y〉 & 〈1;#X〉)
      }
    }
  }
}
