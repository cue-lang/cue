raw: true
eval: true
noOpt: true
-- in.cue --
{
	#And: {
		#: "Fn::And": [...(3 | #And)]
	}
	#Ands: #And & {
		#: "Fn::And": [_]
	}
}
-- out/def --
#And: {
	#: {
		"Fn::And": [...3 | #And]
	}
}
#Ands: #And & {
	#: {
		"Fn::And": [_]
	}
}
-- out/export --

-- out/yaml --
{}
-- out/json --
{}
-- out/compile --
--- in.cue
{
  {
    #And: {
      #: {
        "Fn::And": [
          ...(3|〈3;#And〉),
        ]
      }
    }
    #Ands: (〈0;#And〉 & {
      #: {
        "Fn::And": [
          _,
        ]
      }
    })
  }
}
-- out/evalalpha/stats --
Leaks:  0
Freed:  12
Reused: 2
Allocs: 10
Retain: 0

Unifications: 10
Conjuncts:    19
Disjuncts:    2

NumCloseIDs: 3
-- diff/-out/evalalpha/stats<==>+out/eval/stats --
diff old new
--- old
+++ new
@@ -1,9 +1,11 @@
 Leaks:  0
 Freed:  12
-Reused: 3
-Allocs: 9
+Reused: 2
+Allocs: 10
 Retain: 0
 
 Unifications: 10
 Conjuncts:    19
-Disjuncts:    12
+Disjuncts:    2
+
+NumCloseIDs: 3
-- out/eval/stats --
Leaks:  0
Freed:  12
Reused: 3
Allocs: 9
Retain: 0

Unifications: 10
Conjuncts:    19
Disjuncts:    12
-- out/eval --
(struct){
  #And: (#struct){
    #: (#struct){
      "Fn::And": (list){
      }
    }
  }
  #Ands: (#struct){
    #: (#struct){
      "Fn::And": (#list){
        0: ((int|struct)){ |((int){ 3 }, (#struct){
            #: (#struct){
              "Fn::And": (list){
              }
            }
          }) }
      }
    }
  }
}
