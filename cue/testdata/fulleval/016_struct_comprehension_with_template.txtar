#name: struct comprehension with template
#evalFull
-- in.cue --
result: [for _, v in service {v}]

service: [Name=string]: {
	name: *Name | string
	type: "service"
	port: *7080 | int
}
service: foo: {}
service: bar: {port: 8000}
service: baz: {name: "foobar"}
-- out/compile --
--- in.cue
{
  result: [
    for _, v in 〈1;service〉 {
      〈1;v〉
    },
  ]
  service: {
    [string]: {
      name: (*〈1;-〉|string)
      type: "service"
      port: (*7080|int)
    }
  }
  service: {
    foo: {}
  }
  service: {
    bar: {
      port: 8000
    }
  }
  service: {
    baz: {
      name: "foobar"
    }
  }
}
-- out/eval --
(struct){
  result: (#list){
    0: (struct){
      name: (string){ |(*(string){ "foo" }, (string){ string }) }
      type: (string){ "service" }
      port: (int){ |(*(int){ 7080 }, (int){ int }) }
    }
    1: (struct){
      port: (int){ 8000 }
      name: (string){ |(*(string){ "bar" }, (string){ string }) }
      type: (string){ "service" }
    }
    2: (struct){
      name: (string){ "foobar" }
      type: (string){ "service" }
      port: (int){ |(*(int){ 7080 }, (int){ int }) }
    }
  }
  service: (struct){
    foo: (struct){
      name: (string){ |(*(string){ "foo" }, (string){ string }) }
      type: (string){ "service" }
      port: (int){ |(*(int){ 7080 }, (int){ int }) }
    }
    bar: (struct){
      port: (int){ 8000 }
      name: (string){ |(*(string){ "bar" }, (string){ string }) }
      type: (string){ "service" }
    }
    baz: (struct){
      name: (string){ "foobar" }
      type: (string){ "service" }
      port: (int){ |(*(int){ 7080 }, (int){ int }) }
    }
  }
}
