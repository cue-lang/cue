#name: Issue #178
#evalFull
-- in.cue --
import "encoding/csv"

import "encoding/hex"

foo:  csv.Decode(data)
data: bytes

len: int
bar: hex.EncodedLen(len)
-- out/def --
import (
	"encoding/csv"
	"encoding/hex"
)

foo:  csv.Decode(data)
data: bytes
len:  int
bar:  hex.EncodedLen(len)
-- out/legacy-debug --
<0>{foo: <1>.Decode (<2>.data), data: bytes, len: int, bar: <3>.EncodedLen (<2>.len)}
-- out/evalalpha/stats --
Leaks:  0
Freed:  7
Reused: 1
Allocs: 6
Retain: 0

Unifications: 7
Conjuncts:    7
Disjuncts:    0
-- diff/-out/evalalpha/stats<==>+out/eval/stats --
diff old new
--- old
+++ new
@@ -1,9 +1,9 @@
 Leaks:  0
-Freed:  15
-Reused: 11
-Allocs: 4
-Retain: 5
+Freed:  7
+Reused: 1
+Allocs: 6
+Retain: 0
 
-Unifications: 15
-Conjuncts:    23
-Disjuncts:    20
+Unifications: 7
+Conjuncts:    7
+Disjuncts:    0
-- out/eval/stats --
Leaks:  0
Freed:  15
Reused: 11
Allocs: 4
Retain: 5

Unifications: 15
Conjuncts:    23
Disjuncts:    20
-- out/eval --
(struct){
  foo: (_|_){
    // [incomplete] foo: error in call to encoding/csv.Decode: non-concrete value bytes:
    //     ./in.cue:5:7
    //     ./in.cue:6:7
  }
  data: (bytes){ bytes }
  len: (int){ int }
  bar: (_|_){
    // [incomplete] bar: error in call to encoding/hex.EncodedLen: non-concrete value int:
    //     ./in.cue:9:6
    //     ./in.cue:8:6
  }
}
-- out/compile --
--- in.cue
{
  foo: 〈import;"encoding/csv"〉.Decode(〈0;data〉)
  data: bytes
  len: int
  bar: 〈import;"encoding/hex"〉.EncodedLen(〈0;len〉)
}
