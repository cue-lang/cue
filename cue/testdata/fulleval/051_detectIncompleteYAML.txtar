#name: detectIncompleteYAML
#evalFull
-- in.cue --
package foobar

import yaml "encoding/yaml"

#Spec: {
	_vars: {something: string}
	data: {
		#foo: {
			use: _vars.something
		}
		baz:    yaml.Marshal(_vars.something)
		foobar: yaml.Marshal(#foo)
	}
}
Val: #Spec & {
	_vars: something: "var-string"
}
-- out/eval/stats --
Leaks:  0
Freed:  17
Reused: 12
Allocs: 5
Retain: 0

Unifications: 17
Conjuncts:    32
Disjuncts:    17
-- out/evalalpha --
(struct){
  #Spec: (#struct){
    _vars(:foobar): (#struct){
      something: (string){ string }
    }
    data: (#struct){
      #foo: (#struct){
        use: (string){ string }
      }
      baz: (_|_){
        // [incomplete] #Spec.data.baz: non-concrete argument 0:
        //     ./in.cue:11:11
      }
      foobar: (_|_){
        // [incomplete] #Spec.data.foobar: error in call to encoding/yaml.Marshal: incomplete value string:
        //     ./in.cue:12:11
        //     ./in.cue:6:21
        //     ./in.cue:9:9
      }
    }
  }
  Val: (#struct){
    _vars(:foobar): (#struct){
      something: (string){ "var-string" }
    }
    data: (#struct){
      #foo: (#struct){
        use: (string){ "var-string" }
      }
      baz: (string){ "var-string\n" }
      foobar: (string){ "use: var-string\n" }
    }
  }
}
-- diff/-out/evalalpha<==>+out/eval --
diff old new
--- old
+++ new
@@ -15,6 +15,7 @@
         // [incomplete] #Spec.data.foobar: error in call to encoding/yaml.Marshal: incomplete value string:
         //     ./in.cue:12:11
         //     ./in.cue:6:21
+        //     ./in.cue:9:9
       }
     }
   }
-- out/eval --
(struct){
  #Spec: (#struct){
    _vars(:foobar): (#struct){
      something: (string){ string }
    }
    data: (#struct){
      #foo: (#struct){
        use: (string){ string }
      }
      baz: (_|_){
        // [incomplete] #Spec.data.baz: non-concrete argument 0:
        //     ./in.cue:11:11
      }
      foobar: (_|_){
        // [incomplete] #Spec.data.foobar: error in call to encoding/yaml.Marshal: incomplete value string:
        //     ./in.cue:12:11
        //     ./in.cue:6:21
      }
    }
  }
  Val: (#struct){
    _vars(:foobar): (#struct){
      something: (string){ "var-string" }
    }
    data: (#struct){
      #foo: (#struct){
        use: (string){ "var-string" }
      }
      baz: (string){ "var-string\n" }
      foobar: (string){ "use: var-string\n" }
    }
  }
}
-- out/compile --
--- in.cue
{
  #Spec: {
    _vars: {
      something: string
    }
    data: {
      #foo: {
        use: 〈2;_vars〉.something
      }
      baz: 〈import;"encoding/yaml"〉.Marshal(〈1;_vars〉.something)
      foobar: 〈import;"encoding/yaml"〉.Marshal(〈0;#foo〉)
    }
  }
  Val: (〈0;#Spec〉 & {
    _vars: {
      something: "var-string"
    }
  })
}
