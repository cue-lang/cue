#name: list types
#evalPartial
-- in.cue --
import "list"

l0: list.Repeat([int], 3)
l0: [1, 2, 3]
l2: [...{a: int}]
l2: [{a: 1}, {a: 2, b: 3}]

// TODO: work out a decent way to specify length ranges of lists.
// l3: <=10*[int]
// l3: [1, 2, 3, ...]

s1: (list.Repeat([int], 6))[2:3]
s2: [0, 2, 3][1:2]

i1: (list.Repeat([int], 6))[2]
i2: [0, 2, 3][2]

t0: [...{a: 8}]
t0: [{}]
t1: [...]
t1: [...int]

e0: list.Repeat([{}], 2)
e0: [{}]
e1: [...int]
e1: [...float]
-- out/compile --
--- in.cue
{
  l0: 〈import;list〉.Repeat([
    int,
  ], 3)
  l0: [
    1,
    2,
    3,
  ]
  l2: [
    ...{
      a: int
    },
  ]
  l2: [
    {
      a: 1
    },
    {
      a: 2
      b: 3
    },
  ]
  s1: 〈import;list〉.Repeat([
    int,
  ], 6)[2:3]
  s2: [
    0,
    2,
    3,
  ][1:2]
  i1: 〈import;list〉.Repeat([
    int,
  ], 6)[2]
  i2: [
    0,
    2,
    3,
  ][2]
  t0: [
    ...{
      a: 8
    },
  ]
  t0: [
    {},
  ]
  t1: [
    ...,
  ]
  t1: [
    ...int,
  ]
  e0: 〈import;list〉.Repeat([
    {},
  ], 2)
  e0: [
    {},
  ]
  e1: [
    ...int,
  ]
  e1: [
    ...float,
  ]
}
-- out/evalalpha --
Errors:
e0: incompatible list lengths (1 and 2):
    _:1:2

Result:
(_|_){
  // [eval]
  l0: (#list){
    0: (int){ 1 }
    1: (int){ 2 }
    2: (int){ 3 }
  }
  l2: (#list){
    0: (struct){
      a: (int){ 1 }
    }
    1: (struct){
      a: (int){ 2 }
      b: (int){ 3 }
    }
  }
  s1: (#list){
    0: (int){ int }
  }
  s2: (#list){
    0: (int){ 2 }
  }
  i1: (int){ int }
  i2: (int){ 3 }
  t0: (#list){
    0: (struct){
      a: (int){ 8 }
    }
  }
  t1: (list){
  }
  e0: (_|_){
    // [eval] e0: incompatible list lengths (1 and 2):
    //     _:1:2
    0: (struct){
    }
    1: (struct){
    }
  }
  e1: (list){
  }
}
-- diff/-out/evalalpha<==>+out/eval --
diff old new
--- old
+++ new
@@ -1,5 +1,6 @@
 Errors:
-e0: incompatible list lengths (1 and 2)
+e0: incompatible list lengths (1 and 2):
+    _:1:2
 
 Result:
 (_|_){
@@ -34,7 +35,8 @@
   t1: (list){
   }
   e0: (_|_){
-    // [eval] e0: incompatible list lengths (1 and 2)
+    // [eval] e0: incompatible list lengths (1 and 2):
+    //     _:1:2
     0: (struct){
     }
     1: (struct){
