#name: list arithmetic
#evalPartial
-- in.cue --
l3: <=2 * []
l4: <=2 * [int]
l5: <=2 * (int * [int])
b:  <=5 * [int]
b: [1, 2, ...]
c: (>=3 & <=5) * [int]
c: [1, 2, ...]
d: >=2 * [int]
d: [1, 2, ...]
-- out/compile --
l3: invalid operand <=2 ('*' requires concrete value):
    ./in.cue:1:5
l4: invalid operand <=2 ('*' requires concrete value):
    ./in.cue:2:5
l5: invalid operand <=2 ('*' requires concrete value):
    ./in.cue:3:5
l5: invalid operand int ('*' requires concrete value):
    ./in.cue:3:12
b: invalid operand <=5 ('*' requires concrete value):
    ./in.cue:4:5
d: invalid operand >=2 ('*' requires concrete value):
    ./in.cue:8:4
--- in.cue
{
  l3: (<=2 * [])
  l4: (<=2 * [
    int,
  ])
  l5: (<=2 * (int * [
    int,
  ]))
  b: (<=5 * [
    int,
  ])
  b: [
    1,
    2,
    ...,
  ]
  c: ((>=3 & <=5) * [
    int,
  ])
  c: [
    1,
    2,
    ...,
  ]
  d: (>=2 * [
    int,
  ])
  d: [
    1,
    2,
    ...,
  ]
}
-- out/eval --
l3: invalid operand <=2 ('*' requires concrete value):
    ./in.cue:1:5
l4: invalid operand <=2 ('*' requires concrete value):
    ./in.cue:2:5
l5: invalid operand <=2 ('*' requires concrete value):
    ./in.cue:3:5
l5: invalid operand int ('*' requires concrete value):
    ./in.cue:3:12
b: invalid operand <=5 ('*' requires concrete value):
    ./in.cue:4:5
d: invalid operand >=2 ('*' requires concrete value):
    ./in.cue:8:4
