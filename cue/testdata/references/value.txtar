-- in.cue --
structShorthand: X={b: 3, c: X.b}

// Note that X and Y are subtly different, as they have different bindings:
// one binds to the field, the other to the value. In this case, that does not
// make a difference.
fieldAndValue: X=foo: Y={3, #sum: X + Y}

valueCycle: b: X=3 + X

// Issue #1003
listValueAlias: X = [1, 2, X[0]]

-- err.cue --
@experiment(structcmp)

cycleErr: X={
	err3: == (X + 1)
	err3: 4
}
-- out/evalalpha --
Errors:
cycleErr.err3: invalid operands {err3:_|_(cycleErr.err3: invalid operands value at path 'cycleErr' and 1 to '+' (type struct and int))} and 1 to '+' (type struct and int):
    ./err.cue:4:12
    ./err.cue:3:13
    ./err.cue:4:16

Result:
(_|_){
  // [eval]
  cycleErr: (_|_){
    // [eval]
    err3: (_|_){
      // [eval] cycleErr.err3: invalid operands {err3:_|_(cycleErr.err3: invalid operands value at path 'cycleErr' and 1 to '+' (type struct and int))} and 1 to '+' (type struct and int):
      //     ./err.cue:4:12
      //     ./err.cue:3:13
      //     ./err.cue:4:16
    }
  }
  structShorthand: (struct){
    b: (int){ 3 }
    c: (int){ 3 }
  }
  fieldAndValue: (struct){
    foo: (int){
      3
      #sum: (int){ 6 }
    }
  }
  valueCycle: (struct){
    b: (_|_){
      // [cycle] valueCycle.b: cycle with field: X:
      //     ./in.cue:8:22
    }
  }
  listValueAlias: (#list){
    0: (int){ 1 }
    1: (int){ 2 }
    2: (int){ 1 }
  }
}
-- diff/-out/evalalpha<==>+out/eval --
diff old new
--- old
+++ new
@@ -1,4 +1,21 @@
-(struct){
+Errors:
+cycleErr.err3: invalid operands {err3:_|_(cycleErr.err3: invalid operands value at path 'cycleErr' and 1 to '+' (type struct and int))} and 1 to '+' (type struct and int):
+    ./err.cue:4:12
+    ./err.cue:3:13
+    ./err.cue:4:16
+
+Result:
+(_|_){
+  // [eval]
+  cycleErr: (_|_){
+    // [eval]
+    err3: (_|_){
+      // [eval] cycleErr.err3: invalid operands {err3:_|_(cycleErr.err3: invalid operands value at path 'cycleErr' and 1 to '+' (type struct and int))} and 1 to '+' (type struct and int):
+      //     ./err.cue:4:12
+      //     ./err.cue:3:13
+      //     ./err.cue:4:16
+    }
+  }
   structShorthand: (struct){
     b: (int){ 3 }
     c: (int){ 3 }
@@ -11,8 +28,8 @@
   }
   valueCycle: (struct){
     b: (_|_){
-      // [cycle] cycle error:
-      //     ./in.cue:8:18
+      // [cycle] valueCycle.b: cycle with field: X:
+      //     ./in.cue:8:22
     }
   }
   listValueAlias: (#list){
-- out/compile --
--- err.cue
{
  cycleErr: {
    err3: ==(〈1〉 + 1)
    err3: 4
  }
}
--- in.cue
{
  structShorthand: {
    b: 3
    c: 〈1〉.b
  }
  fieldAndValue: {
    foo: {
      3
      #sum: (〈1;foo〉 + 〈1〉)
    }
  }
  valueCycle: {
    b: (3 + 〈0〉)
  }
  listValueAlias: [
    1,
    2,
    〈1〉[0],
  ]
}
