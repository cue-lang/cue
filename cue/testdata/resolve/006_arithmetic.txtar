# DO NOT EDIT; generated by go run testdata/gen.go
#
#name: arithmetic
#evalPartial
-- in.cue --
v1: 1.0T / 2.0
v2: 2.0 == 2
n1: 1
v5: 2.0 / n1
v6: 1.0 / 1.0
e2: int & 4.0/2.0
-- out/def --
v1: 5.0000000000e+11
v2: true
n1: 1
v5: 2.0
v6: 1.
e2: _|_ // conflicting values int and (4.0 / 2.0) (mismatched types int and float)
-- out/legacy-debug --
<0>{v1: 5.0000000000e+11, v2: true, n1: 1, v5: 2.0, v6: 1., e2: _|_((int & (4.0 / 2.0)):conflicting values int and (4.0 / 2.0) (mismatched types int and float))}
-- out/compile --
--- in.cue
{
  v1: (1000000000000 / 2.0)
  v2: (2.0 == 2)
  n1: 1
  v5: (2.0 / 〈0;n1〉)
  v6: (1.0 / 1.0)
  e2: (int & (4.0 / 2.0))
}
-- out/eval/stats --
Leaks:  0
Freed:  7
Reused: 5
Allocs: 2
Retain: 0

Unifications: 7
Conjuncts:    8
Disjuncts:    7
-- out/eval --
Errors:
e2: conflicting values int and 2 (mismatched types int and float):
    ./in.cue:6:5
    ./in.cue:6:11

Result:
(_|_){
  // [eval]
  v1: (float){ 5.0000000000E+11 }
  v2: (bool){ true }
  n1: (int){ 1 }
  v5: (float){ 2.0 }
  v6: (float){ 1 }
  e2: (_|_){
    // [eval] e2: conflicting values int and 2 (mismatched types int and float):
    //     ./in.cue:6:5
    //     ./in.cue:6:11
  }
}
