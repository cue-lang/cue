#name: optional field resolves to incomplete
#evalPartial
-- in.cue --
r: {
	a?: 3
	b:  a
	c:  r["a"]
}
-- out/def --
r: {
	a?: 3
	b:  a
	c:  r["a"]
}
-- out/legacy-debug --
<0>{r: <1>{a?: 3, b: <2>.a, c: <3>.r["a"]}}
-- out/compile --
--- in.cue
{
  r: {
    a?: 3
    b: 〈0;a〉
    c: 〈1;r〉["a"]
  }
}
-- out/eval/stats --
Leaks:  0
Freed:  5
Reused: 2
Allocs: 3
Retain: 0

Unifications: 5
Conjuncts:    5
Disjuncts:    5
-- out/evalalpha --
(struct){
  r: (struct){
    a?: (int){ 3 }
    b: (_|_){
      // [incomplete] r.b: cannot reference optional field: a:
      //     ./in.cue:3:6
      //     ./in.cue:1:4
    }
    c: (_|_){
      // [incomplete] r.c: cannot reference optional field: a:
      //     ./in.cue:4:8
      //     ./in.cue:1:4
    }
  }
}
-- diff/-out/evalalpha<==>+out/eval --
diff old new
--- old
+++ new
@@ -4,10 +4,12 @@
     b: (_|_){
       // [incomplete] r.b: cannot reference optional field: a:
       //     ./in.cue:3:6
+      //     ./in.cue:1:4
     }
     c: (_|_){
       // [incomplete] r.c: cannot reference optional field: a:
       //     ./in.cue:4:8
+      //     ./in.cue:1:4
     }
   }
 }
-- out/eval --
(struct){
  r: (struct){
    a?: (int){ 3 }
    b: (_|_){
      // [incomplete] r.b: cannot reference optional field: a:
      //     ./in.cue:3:6
    }
    c: (_|_){
      // [incomplete] r.c: cannot reference optional field: a:
      //     ./in.cue:4:8
    }
  }
}
