#name: new-style definitions
#evalPartial
-- in.cue --
#Foo: {
	a: 1
	b: int
}
"#Foo": #Foo & {b: 1}

bulk: {[string]: string} & {
	#def: 4 // Different namespace, so bulk option does not apply.
	_hid: 3
	a:    "foo"
}
-- out/compile --
--- in.cue
{
  #Foo: {
    a: 1
    b: int
  }
  "#Foo": (〈0;#Foo〉 & {
    b: 1
  })
  bulk: ({
    [string]: string
  } & {
    #def: 4
    _hid: 3
    a: "foo"
  })
}
-- out/evalalpha --
(struct){
  #Foo: (#struct){
    a: (int){ 1 }
    b: (int){ int }
  }
  "#Foo": (#struct){
    b: (int){ 1 }
    a: (int){ 1 }
  }
  bulk: (struct){
    #def: (int){ 4 }
    _hid: (int){ 3 }
    a: (string){ "foo" }
  }
}
-- diff/-out/evalalpha<==>+out/eval --
diff old new
--- old
+++ new
@@ -4,8 +4,8 @@
     b: (int){ int }
   }
   "#Foo": (#struct){
-    a: (int){ 1 }
     b: (int){ 1 }
+    a: (int){ 1 }
   }
   bulk: (struct){
     #def: (int){ 4 }
