{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "d48b9e77_63895009",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 12,
      "author": {
        "id": 1017720
      },
      "writtenOn": "2025-10-22T09:35:45Z",
      "side": 1,
      "message": "did you discuss this with Marcel? It sounds like the jsonschema package having to track closedness is weird, the evaluator should do that for us.",
      "revId": "da67af8411fd13aa55f251e0f6c208fd9da6e69a",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "118c8175_13c53a84",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 12,
      "author": {
        "id": 1007275
      },
      "writtenOn": "2025-10-22T09:45:44Z",
      "side": 1,
      "message": "Yeah, I\u0027ve mentioned it, and it doesn\u0027t seem like the semantics are going to change. I don\u0027t really know what the \"right\" thing to do is tbh.",
      "parentUuid": "d48b9e77_63895009",
      "revId": "da67af8411fd13aa55f251e0f6c208fd9da6e69a",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ab92022e_b81372d2",
        "filename": "encoding/jsonschema/generate.go",
        "patchSetId": 2
      },
      "lineNbr": 492,
      "author": {
        "id": 1017720
      },
      "writtenOn": "2025-10-22T09:35:45Z",
      "side": 1,
      "message": "surely this is just `return expr, ok` without the if/else?\n\nthe untyped nil matters if you were doing a type assertion to a non-interface type, but here ast.Expr is an interface, so it\u0027s OK. I guess you could prefer the current form to be defensive against any chance of a typed nil pointer, but I think it\u0027s fine given that you\u0027re type asserting to the same type you return.",
      "revId": "da67af8411fd13aa55f251e0f6c208fd9da6e69a",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "cc1e4522_19601a94",
        "filename": "encoding/jsonschema/generate.go",
        "patchSetId": 2
      },
      "lineNbr": 492,
      "author": {
        "id": 1007275
      },
      "writtenOn": "2025-10-22T09:45:44Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "ab92022e_b81372d2",
      "revId": "da67af8411fd13aa55f251e0f6c208fd9da6e69a",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f924ae4a_7774307a",
        "filename": "encoding/jsonschema/generate.go",
        "patchSetId": 2
      },
      "lineNbr": 553,
      "author": {
        "id": 1017720
      },
      "writtenOn": "2025-10-22T09:35:45Z",
      "side": 1,
      "message": "ditto with the above, I think this can be just `return expr, ok`",
      "revId": "da67af8411fd13aa55f251e0f6c208fd9da6e69a",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "e68efc69_7c4d87af",
        "filename": "encoding/jsonschema/generate.go",
        "patchSetId": 2
      },
      "lineNbr": 553,
      "author": {
        "id": 1007275
      },
      "writtenOn": "2025-10-22T09:45:44Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "f924ae4a_7774307a",
      "revId": "da67af8411fd13aa55f251e0f6c208fd9da6e69a",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "11d456df_2eee08ad",
        "filename": "encoding/jsonschema/testdata/generate/struct_explicitopen.txtar",
        "patchSetId": 2
      },
      "lineNbr": 76,
      "author": {
        "id": 1017720
      },
      "writtenOn": "2025-10-22T09:35:45Z",
      "side": 1,
      "message": "what does an empty pattern mean? I tried searching the existing jsonschema code, as well as a bit on google, but could not find an easy answer. if it means something special like \"all properties\", I\u0027d like to see a note about it somewhere in the code with an example like `patternProperties: \"\": type: \"integer\"`, as I could not find any.\n\n\nIf my guess above is correct - is this patternProperties not redundant with additionalProperties too? both enforce `type: \"integer\"` the same way. It sounds like we\u0027re being mildly wasteful here.",
      "revId": "da67af8411fd13aa55f251e0f6c208fd9da6e69a",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "c772b40a_540d1fa1",
        "filename": "encoding/jsonschema/testdata/generate/struct_explicitopen.txtar",
        "patchSetId": 2
      },
      "lineNbr": 76,
      "author": {
        "id": 1007275
      },
      "writtenOn": "2025-10-22T10:31:59Z",
      "side": 1,
      "message": "An empty pattern (the empty regexp) means \"anything\". So this is technically correct, but you\u0027re right, this is redundant and I think I know why, but it\u0027s a little tricky to make a very quick fix for, and given that the schemas are still technically correct, I think it\u0027s OK to leave for a subsequent CL.",
      "parentUuid": "11d456df_2eee08ad",
      "revId": "da67af8411fd13aa55f251e0f6c208fd9da6e69a",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    }
  ]
}