{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "b71e9ecc_c37f5516",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1017720
      },
      "writtenOn": "2024-04-29T15:12:18Z",
      "side": 1,
      "message": "The refactor largely SGTM but I\u0027m not sure I agree with the naming and ordering choices.",
      "revId": "e26fca153c7807b085e54365fe7068316ca5b98c",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "559064ed_b8b7dc29",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1017723
      },
      "writtenOn": "2024-04-29T15:23:52Z",
      "side": 1,
      "message": "I think @mvdan@mvdan.cc is also going to follow up with some further comments",
      "revId": "e26fca153c7807b085e54365fe7068316ca5b98c",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b39179ea_821553e7",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1017720
      },
      "writtenOn": "2024-04-29T15:25:26Z",
      "side": 1,
      "message": "Do we even need to show the language version in `cue version`, or even in the user agent string? Aside from our debugging, I struggle to imagine when a user might ever need to look at the hard-coded language version string. If they know that they are running e.g. v0.10.1 or v0.10.0-alpha.3, how is it helpful to know that the language version is v0.10.0, which is fairly obvious as long as we document the policy?\n\nThe only scenario where including the language version seems necessary is if someone forks the software and follows our language version but uses a different versioning scheme for their software. But honestly that is for them to deal with. For us and cmd/cue, the two versions follow the same path in unison.",
      "revId": "e26fca153c7807b085e54365fe7068316ca5b98c",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f60e7aca_aa3c42cd",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1007275
      },
      "writtenOn": "2024-04-29T15:34:10Z",
      "side": 1,
      "message": "I think it\u0027s useful particularly if someone is running a custom build on top of a commit we don\u0027t have access to. It says _something_ about the version of CUE even in the absence of meaningful build info.",
      "parentUuid": "b39179ea_821553e7",
      "revId": "e26fca153c7807b085e54365fe7068316ca5b98c",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "72869748_60fdcc95",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1017720
      },
      "writtenOn": "2024-04-29T15:45:06Z",
      "side": 1,
      "message": "Personally I\u0027d worry about the most common case - and that is people running official cmd/cue binaries. In such cases, I think it\u0027s rather confusing to tell the user about two versions, when in fact only one version - the module version - truly matters to them. Even to us when we receive bug reports, the `cue language` version does not add any useful info either.\n\nIf someone forks the binary and we don\u0027t know the commit that the embedded build version reports (or the info is missing altogether), then all bets are off. I don\u0027t think knowing the language version helps much. I\u0027d also only worry about such cases if/when they actually pop up.",
      "parentUuid": "f60e7aca_aa3c42cd",
      "revId": "e26fca153c7807b085e54365fe7068316ca5b98c",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d4c4bde3_cbb48166",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1007275
      },
      "writtenOn": "2024-04-29T16:17:04Z",
      "side": 1,
      "message": "\u003e all bets are off\n\nIt at least gives _some_ clue, I think. As in \"forked at least after this version\" information. Given that we\u0027re also including lots of random not-usually-relevant information about the Go build, I\u0027d be inclined to keep it in.\n\nOne possibility might be to include it as one of the attribute-value pairs along with `vcs.revision` etc. Say `cue.language.version`. WDYT?",
      "parentUuid": "72869748_60fdcc95",
      "revId": "e26fca153c7807b085e54365fe7068316ca5b98c",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5b99fdac_2c0a44d0",
        "filename": "cmd/cue/cmd/version.go",
        "patchSetId": 2
      },
      "lineNbr": 60,
      "author": {
        "id": 1017720
      },
      "writtenOn": "2024-04-29T15:12:18Z",
      "side": 1,
      "message": "It seems to me like these are backwards. When a user runs `cue version`, they are primarily interested in the version of the software, not the version of the language spec it uses.\n\nI also don\u0027t think \"build version\" is clear enough, as it doesn\u0027t mean that much on its own. how about:\n\n```\ncue version %s\ncue language version %s\ngo version %s\n```\n\nI honestly think \"cue version\" on the first line is enough, as \"cue language version\" is then clearly separate.",
      "revId": "e26fca153c7807b085e54365fe7068316ca5b98c",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c5cf041a_0fa74cce",
        "filename": "cmd/cue/cmd/version.go",
        "patchSetId": 2
      },
      "lineNbr": 60,
      "author": {
        "id": 1017723
      },
      "writtenOn": "2024-04-29T15:23:52Z",
      "side": 1,
      "message": "I\u0027d tend to agree.",
      "parentUuid": "5b99fdac_2c0a44d0",
      "revId": "e26fca153c7807b085e54365fe7068316ca5b98c",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3a84b186_7b3f4390",
        "filename": "internal/cueversion/version.go",
        "patchSetId": 2
      },
      "lineNbr": 24,
      "author": {
        "id": 1017720
      },
      "writtenOn": "2024-04-29T15:12:18Z",
      "side": 1,
      "message": "Just like in the other comment, I\u0027m honestly not fond of \"build version\" and would prefer to just keep \"version\" here.\n\n(also note you forgot about the first godoc word)",
      "revId": "e26fca153c7807b085e54365fe7068316ca5b98c",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "94e7fc46_9d197dd6",
        "filename": "internal/cueversion/version.go",
        "patchSetId": 2
      },
      "lineNbr": 24,
      "author": {
        "id": 1017723
      },
      "writtenOn": "2024-04-29T15:23:52Z",
      "side": 1,
      "message": "Having seen this code in review form, I\u0027d tend to agree.",
      "parentUuid": "3a84b186_7b3f4390",
      "revId": "e26fca153c7807b085e54365fe7068316ca5b98c",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6b089d94_54046340",
        "filename": "internal/cueversion/version.go",
        "patchSetId": 2
      },
      "lineNbr": 24,
      "author": {
        "id": 1007275
      },
      "writtenOn": "2024-04-29T15:34:10Z",
      "side": 1,
      "message": "The reason I went with \"BuildVersion\" is to distinguish it from the other kind of version also provided by this cueversion package and because that\u0027s the way I\u0027ve been describing it elsewhere. I do think it\u0027s worth making the distinction clear, otherwise why would anyone know what the difference was between cueversion.LanguageVersion and cueversion.Version.\n\nHow about \"ModuleVersion\"?\n\nOr even `cueversion.Language` and `cueversion.Module` I guess?",
      "parentUuid": "3a84b186_7b3f4390",
      "revId": "e26fca153c7807b085e54365fe7068316ca5b98c",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d4d0b13e_999d544a",
        "filename": "internal/cueversion/version.go",
        "patchSetId": 2
      },
      "lineNbr": 24,
      "author": {
        "id": 1017720
      },
      "writtenOn": "2024-04-29T15:45:06Z",
      "side": 1,
      "message": "internally, \"module version\" is fine. externally, e.g. in `cue version`, I\u0027d avoid words like \"build\" or \"module\" as they will mean little to someone that e.g. just installs the cue binary via a package manager.",
      "parentUuid": "6b089d94_54046340",
      "revId": "e26fca153c7807b085e54365fe7068316ca5b98c",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a2362cdb_c323266a",
        "filename": "internal/cueversion/version.go",
        "patchSetId": 2
      },
      "lineNbr": 53,
      "author": {
        "id": 1017720
      },
      "writtenOn": "2024-04-29T15:12:18Z",
      "side": 1,
      "message": "I don\u0027t think this is quite right; you should make sure to check `Module.Replace`. I don\u0027t think we need to go as far as writing a test, but at least we should write reasonably sound logic.",
      "revId": "e26fca153c7807b085e54365fe7068316ca5b98c",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8bb1ea2f_010f1616",
        "filename": "internal/cueversion/version.go",
        "patchSetId": 2
      },
      "lineNbr": 72,
      "author": {
        "id": 1017720
      },
      "writtenOn": "2024-04-29T15:12:18Z",
      "side": 1,
      "message": "Just like `cue version`, I\u0027m not sure I agree with showing the language version first. The main point of the user agent string is literally to tell the server what version the client software is running, to e.g. work around old client bugs or to know when the client is new enough to handle new kinds of responses.\n\nMoreover, the user-agent syntax is like \"\u003cproduct\u003e / \u003cproduct-version\u003e\". The latest pre-release we have right now has a \"product version\" of v0.9.0-alpha.3, not v0.9.0. If anything, the language version is the extra string that should go later as a comment.",
      "revId": "e26fca153c7807b085e54365fe7068316ca5b98c",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "59336bc2_e9e12f8b",
        "filename": "internal/cueversion/version.go",
        "patchSetId": 2
      },
      "lineNbr": 72,
      "author": {
        "id": 1007275
      },
      "writtenOn": "2024-04-29T15:34:10Z",
      "side": 1,
      "message": "The reason I went with it this way round is because the version as reported by the build info is somewhat less structured (for example it can contain parentheses). My reasoning was also that the language version in telling the server what protocol the client is using - it\u0027s always going to be present, unlike the build version.\n\nThat said, I don\u0027t feel strongly. I\u0027ll change it as you suggest.",
      "parentUuid": "8bb1ea2f_010f1616",
      "revId": "e26fca153c7807b085e54365fe7068316ca5b98c",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "afa8cec9_c159d443",
        "filename": "internal/cueversion/version.go",
        "patchSetId": 2
      },
      "lineNbr": 72,
      "author": {
        "id": 1017720
      },
      "writtenOn": "2024-04-29T15:45:06Z",
      "side": 1,
      "message": "The language version is not about the \"protocol\" or the feature/bug set of the client though. If we start work on v0.10 tomorrow, we will bump its language version to v0.10.0, but all features relating to modules will not have landed yet. The registry _must_ use the module version to tell if a client is running a version new enough - for example, v0.10.0-alpha.2 - that supports a new feature.",
      "parentUuid": "59336bc2_e9e12f8b",
      "revId": "e26fca153c7807b085e54365fe7068316ca5b98c",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    }
  ]
}