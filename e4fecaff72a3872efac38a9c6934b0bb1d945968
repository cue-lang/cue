{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "76f9e28c_f3d6c441",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1007275
      },
      "writtenOn": "2025-06-17T07:41:09Z",
      "side": 1,
      "message": "LGTM with some suggestions for a few more test cases.",
      "revId": "e4fecaff72a3872efac38a9c6934b0bb1d945968",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "fa7e3189_484cb531",
        "filename": "cue/testdata/basicrewrite/016_comparison.txtar",
        "patchSetId": 2
      },
      "lineNbr": 49,
      "author": {
        "id": 1007275
      },
      "writtenOn": "2025-06-17T07:41:09Z",
      "side": 1,
      "message": "Could we have some test cases that include hidden fields and definitions, please?\n(I _think_ they don\u0027t count towards equality, but we should have the test cases regardless).\n\nAlso embedded scalars.",
      "revId": "e4fecaff72a3872efac38a9c6934b0bb1d945968",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "ea406d40_e6445ca1",
        "filename": "cue/testdata/basicrewrite/016_comparison.txtar",
        "patchSetId": 2
      },
      "lineNbr": 49,
      "author": {
        "id": 1013536
      },
      "writtenOn": "2025-06-18T09:08:20Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "fa7e3189_484cb531",
      "revId": "e4fecaff72a3872efac38a9c6934b0bb1d945968",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "bc91384f_8f480535",
        "filename": "cue/testdata/basicrewrite/016_comparison.txtar",
        "patchSetId": 2
      },
      "lineNbr": 88,
      "author": {
        "id": 1007275
      },
      "writtenOn": "2025-06-17T07:41:09Z",
      "side": 1,
      "message": "I thought this is supposed to be becoming valid now?\n\nAlso, it would be good to have some indication in the field as to the expected test result, even if it might seem obvious, as the tests above do.",
      "revId": "e4fecaff72a3872efac38a9c6934b0bb1d945968",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "9a78fec1_064c8eb4",
        "filename": "cue/testdata/basicrewrite/016_comparison.txtar",
        "patchSetId": 2
      },
      "lineNbr": 88,
      "author": {
        "id": 1013536
      },
      "writtenOn": "2025-06-18T09:08:20Z",
      "side": 1,
      "message": "Not quite yet. I\u0027m first addressing the other issues. Then the different types results in false will be an experiment only. This is only done in later CLs.",
      "parentUuid": "bc91384f_8f480535",
      "revId": "e4fecaff72a3872efac38a9c6934b0bb1d945968",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e05fca93_64aec45c",
        "filename": "cue/testdata/basicrewrite/016_comparison.txtar",
        "patchSetId": 2
      },
      "lineNbr": 111,
      "author": {
        "id": 1007275
      },
      "writtenOn": "2025-06-17T07:41:09Z",
      "side": 1,
      "message": "Let\u0027s have some negated tests with noncrete elements too.\n\nSpecifically, I could see that `[1, 2] !\u003d [int]` might return true when it should be an error, because it would be easy to write logic that just says things are unequal when the list lengths are unequal. Or... maybe it _shouldn\u0027t_ be an error, I\u0027m not actually totally sure!",
      "revId": "e4fecaff72a3872efac38a9c6934b0bb1d945968",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b442395e_a30f013e",
        "filename": "cue/testdata/basicrewrite/016_comparison.txtar",
        "patchSetId": 2
      },
      "lineNbr": 111,
      "author": {
        "id": 1013536
      },
      "writtenOn": "2025-06-18T09:08:20Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "e05fca93_64aec45c",
      "revId": "e4fecaff72a3872efac38a9c6934b0bb1d945968",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "34f3328d_6783f186",
        "filename": "cue/testdata/lists/021_list_equality.txtar",
        "patchSetId": 2
      },
      "lineNbr": 64,
      "author": {
        "id": 1007275
      },
      "writtenOn": "2025-06-17T07:41:09Z",
      "side": 1,
      "message": "Again, it would be really nice to have some indication in the name as to what result is expected.",
      "revId": "e4fecaff72a3872efac38a9c6934b0bb1d945968",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b85441f9_e4429379",
        "filename": "cue/testdata/lists/021_list_equality.txtar",
        "patchSetId": 2
      },
      "lineNbr": 64,
      "author": {
        "id": 1013536
      },
      "writtenOn": "2025-06-18T09:08:20Z",
      "side": 1,
      "message": "It does. I use \"incomplete\" to indicate that something needs to be an incomplete eror.\nBut some are indicated incorrectly, so I have tighten the annotation.",
      "parentUuid": "34f3328d_6783f186",
      "revId": "e4fecaff72a3872efac38a9c6934b0bb1d945968",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "947456df_9f63a565",
        "filename": "cue/testdata/lists/021_list_equality.txtar",
        "patchSetId": 2
      },
      "lineNbr": 66,
      "author": {
        "id": 1007275
      },
      "writtenOn": "2025-06-17T08:04:48Z",
      "side": 1,
      "message": "It would also be good to have a check that a equality check against an open list is not necessarily final:\n\n```\n#foo: {\n    a: [...]\n    b: [1]\n    c: true \u0026 (a \u003d\u003d b)\n}\n```\n\nThe above should not be a final error, but:\n\n```\n#foo: {\n    a: []\n    b: [1]\n    c: true \u0026 (a \u003d\u003d b)\n}\n```\n\nshould be AFAICS.",
      "revId": "e4fecaff72a3872efac38a9c6934b0bb1d945968",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8f6ca819_29030fa8",
        "filename": "cue/testdata/lists/021_list_equality.txtar",
        "patchSetId": 2
      },
      "lineNbr": 66,
      "author": {
        "id": 1013536
      },
      "writtenOn": "2025-06-18T09:08:20Z",
      "side": 1,
      "message": "I\u0027ve added this in a separate CL now. I\u0027m keeping that as a reminder to add a whole bunch more of related issues. This failure is unrelated to the problem that is being addressed in this chain.",
      "parentUuid": "947456df_9f63a565",
      "revId": "e4fecaff72a3872efac38a9c6934b0bb1d945968",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    }
  ]
}