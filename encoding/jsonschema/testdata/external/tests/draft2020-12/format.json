[
	{
		"description": "email format",
		"schema": {
			"$schema": "https://json-schema.org/draft/2020-12/schema",
			"format": "email"
		},
		"tests": [
			{
				"description": "all string formats ignore integers",
				"data": 12,
				"valid": true
			},
			{
				"description": "all string formats ignore floats",
				"data": 13.7,
				"valid": true
			},
			{
				"description": "all string formats ignore objects",
				"data": {},
				"valid": true
			},
			{
				"description": "all string formats ignore arrays",
				"data": [],
				"valid": true
			},
			{
				"description": "all string formats ignore booleans",
				"data": false,
				"valid": true
			},
			{
				"description": "all string formats ignore nulls",
				"data": null,
				"valid": true
			},
			{
				"description": "invalid email string is only an annotation by default",
				"data": "2962",
				"valid": true
			}
		]
	},
	{
		"description": "idn-email format",
		"schema": {
			"$schema": "https://json-schema.org/draft/2020-12/schema",
			"format": "idn-email"
		},
		"tests": [
			{
				"description": "all string formats ignore integers",
				"data": 12,
				"valid": true
			},
			{
				"description": "all string formats ignore floats",
				"data": 13.7,
				"valid": true
			},
			{
				"description": "all string formats ignore objects",
				"data": {},
				"valid": true
			},
			{
				"description": "all string formats ignore arrays",
				"data": [],
				"valid": true
			},
			{
				"description": "all string formats ignore booleans",
				"data": false,
				"valid": true
			},
			{
				"description": "all string formats ignore nulls",
				"data": null,
				"valid": true
			},
			{
				"description": "invalid idn-email string is only an annotation by default",
				"data": "2962",
				"valid": true
			}
		]
	},
	{
		"description": "regex format",
		"schema": {
			"$schema": "https://json-schema.org/draft/2020-12/schema",
			"format": "regex"
		},
		"tests": [
			{
				"description": "all string formats ignore integers",
				"data": 12,
				"valid": true
			},
			{
				"description": "all string formats ignore floats",
				"data": 13.7,
				"valid": true
			},
			{
				"description": "all string formats ignore objects",
				"data": {},
				"valid": true
			},
			{
				"description": "all string formats ignore arrays",
				"data": [],
				"valid": true
			},
			{
				"description": "all string formats ignore booleans",
				"data": false,
				"valid": true
			},
			{
				"description": "all string formats ignore nulls",
				"data": null,
				"valid": true
			},
			{
				"description": "invalid regex string is only an annotation by default",
				"data": "^(abc]",
				"valid": true,
				"skip": {
					"v2": "6 errors in empty disjunction:\nconflicting values \"^(abc]\" and [...] (mismatched types string and list):\n    generated.cue:4:1\n    generated.cue:4:39\n    instance.json:1:1\nconflicting values \"^(abc]\" and bool (mismatched types string and bool):\n    generated.cue:4:1\n    generated.cue:4:8\n    instance.json:1:1\nconflicting values \"^(abc]\" and null (mismatched types string and null):\n    generated.cue:4:1\n    instance.json:1:1\nconflicting values \"^(abc]\" and number (mismatched types string and number):\n    generated.cue:4:1\n    generated.cue:4:15\n    instance.json:1:1\nconflicting values \"^(abc]\" and {...} (mismatched types string and struct):\n    generated.cue:4:1\n    generated.cue:4:47\n    instance.json:1:1\ninvalid value \"^(abc]\" (does not satisfy regexp.Valid): error in call to regexp.Valid: error parsing regexp: missing closing ): `^(abc]`:\n    generated.cue:1:1\n    instance.json:1:1\n",
					"v3": "conflicting values \"^(abc]\" and [...] (mismatched types string and list):\n    generated.cue:4:39\n    instance.json:1:1\nconflicting values \"^(abc]\" and bool (mismatched types string and bool):\n    generated.cue:4:8\n    instance.json:1:1\nconflicting values \"^(abc]\" and null (mismatched types string and null):\n    generated.cue:4:1\n    instance.json:1:1\nconflicting values \"^(abc]\" and number (mismatched types string and number):\n    generated.cue:4:15\n    instance.json:1:1\nconflicting values \"^(abc]\" and {...} (mismatched types string and struct):\n    generated.cue:4:47\n    instance.json:1:1\ninvalid value \"^(abc]\" (does not satisfy regexp.Valid): error in call to regexp.Valid: error parsing regexp: missing closing ): `^(abc]`:\n    generated.cue:1:1\n    instance.json:1:1\n"
				}
			}
		]
	},
	{
		"description": "ipv4 format",
		"schema": {
			"$schema": "https://json-schema.org/draft/2020-12/schema",
			"format": "ipv4"
		},
		"tests": [
			{
				"description": "all string formats ignore integers",
				"data": 12,
				"valid": true
			},
			{
				"description": "all string formats ignore floats",
				"data": 13.7,
				"valid": true
			},
			{
				"description": "all string formats ignore objects",
				"data": {},
				"valid": true
			},
			{
				"description": "all string formats ignore arrays",
				"data": [],
				"valid": true
			},
			{
				"description": "all string formats ignore booleans",
				"data": false,
				"valid": true
			},
			{
				"description": "all string formats ignore nulls",
				"data": null,
				"valid": true
			},
			{
				"description": "invalid ipv4 string is only an annotation by default",
				"data": "127.0.0.0.1",
				"valid": true
			}
		]
	},
	{
		"description": "ipv6 format",
		"schema": {
			"$schema": "https://json-schema.org/draft/2020-12/schema",
			"format": "ipv6"
		},
		"tests": [
			{
				"description": "all string formats ignore integers",
				"data": 12,
				"valid": true
			},
			{
				"description": "all string formats ignore floats",
				"data": 13.7,
				"valid": true
			},
			{
				"description": "all string formats ignore objects",
				"data": {},
				"valid": true
			},
			{
				"description": "all string formats ignore arrays",
				"data": [],
				"valid": true
			},
			{
				"description": "all string formats ignore booleans",
				"data": false,
				"valid": true
			},
			{
				"description": "all string formats ignore nulls",
				"data": null,
				"valid": true
			},
			{
				"description": "invalid ipv6 string is only an annotation by default",
				"data": "12345::",
				"valid": true
			}
		]
	},
	{
		"description": "idn-hostname format",
		"schema": {
			"$schema": "https://json-schema.org/draft/2020-12/schema",
			"format": "idn-hostname"
		},
		"tests": [
			{
				"description": "all string formats ignore integers",
				"data": 12,
				"valid": true
			},
			{
				"description": "all string formats ignore floats",
				"data": 13.7,
				"valid": true
			},
			{
				"description": "all string formats ignore objects",
				"data": {},
				"valid": true
			},
			{
				"description": "all string formats ignore arrays",
				"data": [],
				"valid": true
			},
			{
				"description": "all string formats ignore booleans",
				"data": false,
				"valid": true
			},
			{
				"description": "all string formats ignore nulls",
				"data": null,
				"valid": true
			},
			{
				"description": "invalid idn-hostname string is only an annotation by default",
				"data": "〮실례.테스트",
				"valid": true
			}
		]
	},
	{
		"description": "hostname format",
		"schema": {
			"$schema": "https://json-schema.org/draft/2020-12/schema",
			"format": "hostname"
		},
		"tests": [
			{
				"description": "all string formats ignore integers",
				"data": 12,
				"valid": true
			},
			{
				"description": "all string formats ignore floats",
				"data": 13.7,
				"valid": true
			},
			{
				"description": "all string formats ignore objects",
				"data": {},
				"valid": true
			},
			{
				"description": "all string formats ignore arrays",
				"data": [],
				"valid": true
			},
			{
				"description": "all string formats ignore booleans",
				"data": false,
				"valid": true
			},
			{
				"description": "all string formats ignore nulls",
				"data": null,
				"valid": true
			},
			{
				"description": "invalid hostname string is only an annotation by default",
				"data": "-a-host-name-that-starts-with--",
				"valid": true
			}
		]
	},
	{
		"description": "date format",
		"schema": {
			"$schema": "https://json-schema.org/draft/2020-12/schema",
			"format": "date"
		},
		"tests": [
			{
				"description": "all string formats ignore integers",
				"data": 12,
				"valid": true
			},
			{
				"description": "all string formats ignore floats",
				"data": 13.7,
				"valid": true
			},
			{
				"description": "all string formats ignore objects",
				"data": {},
				"valid": true
			},
			{
				"description": "all string formats ignore arrays",
				"data": [],
				"valid": true
			},
			{
				"description": "all string formats ignore booleans",
				"data": false,
				"valid": true
			},
			{
				"description": "all string formats ignore nulls",
				"data": null,
				"valid": true
			},
			{
				"description": "invalid date string is only an annotation by default",
				"data": "06/19/1963",
				"valid": true,
				"skip": {
					"v2": "6 errors in empty disjunction:\nconflicting values \"06/19/1963\" and [...] (mismatched types string and list):\n    generated.cue:4:1\n    generated.cue:4:52\n    instance.json:1:1\nconflicting values \"06/19/1963\" and bool (mismatched types string and bool):\n    generated.cue:4:1\n    generated.cue:4:8\n    instance.json:1:1\nconflicting values \"06/19/1963\" and null (mismatched types string and null):\n    generated.cue:4:1\n    instance.json:1:1\nconflicting values \"06/19/1963\" and number (mismatched types string and number):\n    generated.cue:4:1\n    generated.cue:4:15\n    instance.json:1:1\nconflicting values \"06/19/1963\" and {...} (mismatched types string and struct):\n    generated.cue:4:1\n    generated.cue:4:60\n    instance.json:1:1\ninvalid value \"06/19/1963\" (does not satisfy time.Format(\"2006-01-02\")): error in call to time.Format: invalid time \"06/19/1963\":\n    generated.cue:4:24\n    generated.cue:1:1\n    generated.cue:4:36\n    instance.json:1:1\n",
					"v3": "conflicting values \"06/19/1963\" and [...] (mismatched types string and list):\n    generated.cue:4:52\n    instance.json:1:1\nconflicting values \"06/19/1963\" and bool (mismatched types string and bool):\n    generated.cue:4:8\n    instance.json:1:1\nconflicting values \"06/19/1963\" and null (mismatched types string and null):\n    generated.cue:4:1\n    instance.json:1:1\nconflicting values \"06/19/1963\" and number (mismatched types string and number):\n    generated.cue:4:15\n    instance.json:1:1\nconflicting values \"06/19/1963\" and {...} (mismatched types string and struct):\n    generated.cue:4:60\n    instance.json:1:1\ninvalid value \"06/19/1963\" (does not satisfy time.Format(\"2006-01-02\")): error in call to time.Format: invalid time \"06/19/1963\":\n    generated.cue:4:24\n    generated.cue:1:1\n    generated.cue:4:36\n    instance.json:1:1\n"
				}
			}
		]
	},
	{
		"description": "date-time format",
		"schema": {
			"$schema": "https://json-schema.org/draft/2020-12/schema",
			"format": "date-time"
		},
		"tests": [
			{
				"description": "all string formats ignore integers",
				"data": 12,
				"valid": true
			},
			{
				"description": "all string formats ignore floats",
				"data": 13.7,
				"valid": true
			},
			{
				"description": "all string formats ignore objects",
				"data": {},
				"valid": true
			},
			{
				"description": "all string formats ignore arrays",
				"data": [],
				"valid": true
			},
			{
				"description": "all string formats ignore booleans",
				"data": false,
				"valid": true
			},
			{
				"description": "all string formats ignore nulls",
				"data": null,
				"valid": true
			},
			{
				"description": "invalid date-time string is only an annotation by default",
				"data": "1990-02-31T15:59:60.123-08:00",
				"valid": true,
				"skip": {
					"v2": "6 errors in empty disjunction:\nconflicting values \"1990-02-31T15:59:60.123-08:00\" and [...] (mismatched types string and list):\n    generated.cue:4:1\n    generated.cue:4:36\n    instance.json:1:1\nconflicting values \"1990-02-31T15:59:60.123-08:00\" and bool (mismatched types string and bool):\n    generated.cue:4:1\n    generated.cue:4:8\n    instance.json:1:1\nconflicting values \"1990-02-31T15:59:60.123-08:00\" and null (mismatched types string and null):\n    generated.cue:4:1\n    instance.json:1:1\nconflicting values \"1990-02-31T15:59:60.123-08:00\" and number (mismatched types string and number):\n    generated.cue:4:1\n    generated.cue:4:15\n    instance.json:1:1\nconflicting values \"1990-02-31T15:59:60.123-08:00\" and {...} (mismatched types string and struct):\n    generated.cue:4:1\n    generated.cue:4:44\n    instance.json:1:1\ninvalid value \"1990-02-31T15:59:60.123-08:00\" (does not satisfy time.Time): error in call to time.Time: invalid time \"1990-02-31T15:59:60.123-08:00\":\n    generated.cue:1:1\n    instance.json:1:1\n",
					"v3": "conflicting values \"1990-02-31T15:59:60.123-08:00\" and [...] (mismatched types string and list):\n    generated.cue:4:36\n    instance.json:1:1\nconflicting values \"1990-02-31T15:59:60.123-08:00\" and bool (mismatched types string and bool):\n    generated.cue:4:8\n    instance.json:1:1\nconflicting values \"1990-02-31T15:59:60.123-08:00\" and null (mismatched types string and null):\n    generated.cue:4:1\n    instance.json:1:1\nconflicting values \"1990-02-31T15:59:60.123-08:00\" and number (mismatched types string and number):\n    generated.cue:4:15\n    instance.json:1:1\nconflicting values \"1990-02-31T15:59:60.123-08:00\" and {...} (mismatched types string and struct):\n    generated.cue:4:44\n    instance.json:1:1\ninvalid value \"1990-02-31T15:59:60.123-08:00\" (does not satisfy time.Time): error in call to time.Time: invalid time \"1990-02-31T15:59:60.123-08:00\":\n    generated.cue:1:1\n    instance.json:1:1\n"
				}
			}
		]
	},
	{
		"description": "time format",
		"schema": {
			"$schema": "https://json-schema.org/draft/2020-12/schema",
			"format": "time"
		},
		"tests": [
			{
				"description": "all string formats ignore integers",
				"data": 12,
				"valid": true
			},
			{
				"description": "all string formats ignore floats",
				"data": 13.7,
				"valid": true
			},
			{
				"description": "all string formats ignore objects",
				"data": {},
				"valid": true
			},
			{
				"description": "all string formats ignore arrays",
				"data": [],
				"valid": true
			},
			{
				"description": "all string formats ignore booleans",
				"data": false,
				"valid": true
			},
			{
				"description": "all string formats ignore nulls",
				"data": null,
				"valid": true
			},
			{
				"description": "invalid time string is only an annotation by default",
				"data": "08:30:06 PST",
				"valid": true
			}
		]
	},
	{
		"description": "json-pointer format",
		"schema": {
			"$schema": "https://json-schema.org/draft/2020-12/schema",
			"format": "json-pointer"
		},
		"tests": [
			{
				"description": "all string formats ignore integers",
				"data": 12,
				"valid": true
			},
			{
				"description": "all string formats ignore floats",
				"data": 13.7,
				"valid": true
			},
			{
				"description": "all string formats ignore objects",
				"data": {},
				"valid": true
			},
			{
				"description": "all string formats ignore arrays",
				"data": [],
				"valid": true
			},
			{
				"description": "all string formats ignore booleans",
				"data": false,
				"valid": true
			},
			{
				"description": "all string formats ignore nulls",
				"data": null,
				"valid": true
			},
			{
				"description": "invalid json-pointer string is only an annotation by default",
				"data": "/foo/bar~",
				"valid": true
			}
		]
	},
	{
		"description": "relative-json-pointer format",
		"schema": {
			"$schema": "https://json-schema.org/draft/2020-12/schema",
			"format": "relative-json-pointer"
		},
		"tests": [
			{
				"description": "all string formats ignore integers",
				"data": 12,
				"valid": true
			},
			{
				"description": "all string formats ignore floats",
				"data": 13.7,
				"valid": true
			},
			{
				"description": "all string formats ignore objects",
				"data": {},
				"valid": true
			},
			{
				"description": "all string formats ignore arrays",
				"data": [],
				"valid": true
			},
			{
				"description": "all string formats ignore booleans",
				"data": false,
				"valid": true
			},
			{
				"description": "all string formats ignore nulls",
				"data": null,
				"valid": true
			},
			{
				"description": "invalid relative-json-pointer string is only an annotation by default",
				"data": "/foo/bar",
				"valid": true
			}
		]
	},
	{
		"description": "iri format",
		"schema": {
			"$schema": "https://json-schema.org/draft/2020-12/schema",
			"format": "iri"
		},
		"tests": [
			{
				"description": "all string formats ignore integers",
				"data": 12,
				"valid": true
			},
			{
				"description": "all string formats ignore floats",
				"data": 13.7,
				"valid": true
			},
			{
				"description": "all string formats ignore objects",
				"data": {},
				"valid": true
			},
			{
				"description": "all string formats ignore arrays",
				"data": [],
				"valid": true
			},
			{
				"description": "all string formats ignore booleans",
				"data": false,
				"valid": true
			},
			{
				"description": "all string formats ignore nulls",
				"data": null,
				"valid": true
			},
			{
				"description": "invalid iri string is only an annotation by default",
				"data": "http://2001:0db8:85a3:0000:0000:8a2e:0370:7334",
				"valid": true
			}
		]
	},
	{
		"description": "iri-reference format",
		"schema": {
			"$schema": "https://json-schema.org/draft/2020-12/schema",
			"format": "iri-reference"
		},
		"tests": [
			{
				"description": "all string formats ignore integers",
				"data": 12,
				"valid": true
			},
			{
				"description": "all string formats ignore floats",
				"data": 13.7,
				"valid": true
			},
			{
				"description": "all string formats ignore objects",
				"data": {},
				"valid": true
			},
			{
				"description": "all string formats ignore arrays",
				"data": [],
				"valid": true
			},
			{
				"description": "all string formats ignore booleans",
				"data": false,
				"valid": true
			},
			{
				"description": "all string formats ignore nulls",
				"data": null,
				"valid": true
			},
			{
				"description": "invalid iri-reference string is only an annotation by default",
				"data": "\\\\WINDOWS\\filëßåré",
				"valid": true
			}
		]
	},
	{
		"description": "uri format",
		"schema": {
			"$schema": "https://json-schema.org/draft/2020-12/schema",
			"format": "uri"
		},
		"tests": [
			{
				"description": "all string formats ignore integers",
				"data": 12,
				"valid": true
			},
			{
				"description": "all string formats ignore floats",
				"data": 13.7,
				"valid": true
			},
			{
				"description": "all string formats ignore objects",
				"data": {},
				"valid": true
			},
			{
				"description": "all string formats ignore arrays",
				"data": [],
				"valid": true
			},
			{
				"description": "all string formats ignore booleans",
				"data": false,
				"valid": true
			},
			{
				"description": "all string formats ignore nulls",
				"data": null,
				"valid": true
			},
			{
				"description": "invalid uri string is only an annotation by default",
				"data": "//foo.bar/?baz=qux#quux",
				"valid": true,
				"skip": {
					"v2": "6 errors in empty disjunction:\nconflicting values \"//foo.bar/?baz=qux#quux\" and [...] (mismatched types string and list):\n    generated.cue:4:1\n    generated.cue:4:37\n    instance.json:1:1\nconflicting values \"//foo.bar/?baz=qux#quux\" and bool (mismatched types string and bool):\n    generated.cue:4:1\n    generated.cue:4:8\n    instance.json:1:1\nconflicting values \"//foo.bar/?baz=qux#quux\" and null (mismatched types string and null):\n    generated.cue:4:1\n    instance.json:1:1\nconflicting values \"//foo.bar/?baz=qux#quux\" and number (mismatched types string and number):\n    generated.cue:4:1\n    generated.cue:4:15\n    instance.json:1:1\nconflicting values \"//foo.bar/?baz=qux#quux\" and {...} (mismatched types string and struct):\n    generated.cue:4:1\n    generated.cue:4:45\n    instance.json:1:1\ninvalid value \"//foo.bar/?baz=qux#quux\" (does not satisfy net.AbsURL): error in call to net.AbsURL: URL is not absolute:\n    generated.cue:1:1\n    instance.json:1:1\n",
					"v3": "conflicting values \"//foo.bar/?baz=qux#quux\" and [...] (mismatched types string and list):\n    generated.cue:4:37\n    instance.json:1:1\nconflicting values \"//foo.bar/?baz=qux#quux\" and bool (mismatched types string and bool):\n    generated.cue:4:8\n    instance.json:1:1\nconflicting values \"//foo.bar/?baz=qux#quux\" and null (mismatched types string and null):\n    generated.cue:4:1\n    instance.json:1:1\nconflicting values \"//foo.bar/?baz=qux#quux\" and number (mismatched types string and number):\n    generated.cue:4:15\n    instance.json:1:1\nconflicting values \"//foo.bar/?baz=qux#quux\" and {...} (mismatched types string and struct):\n    generated.cue:4:45\n    instance.json:1:1\ninvalid value \"//foo.bar/?baz=qux#quux\" (does not satisfy net.AbsURL): error in call to net.AbsURL: URL is not absolute:\n    generated.cue:1:1\n    instance.json:1:1\n"
				}
			}
		]
	},
	{
		"description": "uri-reference format",
		"schema": {
			"$schema": "https://json-schema.org/draft/2020-12/schema",
			"format": "uri-reference"
		},
		"tests": [
			{
				"description": "all string formats ignore integers",
				"data": 12,
				"valid": true
			},
			{
				"description": "all string formats ignore floats",
				"data": 13.7,
				"valid": true
			},
			{
				"description": "all string formats ignore objects",
				"data": {},
				"valid": true
			},
			{
				"description": "all string formats ignore arrays",
				"data": [],
				"valid": true
			},
			{
				"description": "all string formats ignore booleans",
				"data": false,
				"valid": true
			},
			{
				"description": "all string formats ignore nulls",
				"data": null,
				"valid": true
			},
			{
				"description": "invalid uri-reference string is only an annotation by default",
				"data": "\\\\WINDOWS\\fileshare",
				"valid": true
			}
		]
	},
	{
		"description": "uri-template format",
		"schema": {
			"$schema": "https://json-schema.org/draft/2020-12/schema",
			"format": "uri-template"
		},
		"tests": [
			{
				"description": "all string formats ignore integers",
				"data": 12,
				"valid": true
			},
			{
				"description": "all string formats ignore floats",
				"data": 13.7,
				"valid": true
			},
			{
				"description": "all string formats ignore objects",
				"data": {},
				"valid": true
			},
			{
				"description": "all string formats ignore arrays",
				"data": [],
				"valid": true
			},
			{
				"description": "all string formats ignore booleans",
				"data": false,
				"valid": true
			},
			{
				"description": "all string formats ignore nulls",
				"data": null,
				"valid": true
			},
			{
				"description": "invalid uri-template string is only an annotation by default",
				"data": "http://example.com/dictionary/{term:1}/{term",
				"valid": true
			}
		]
	},
	{
		"description": "uuid format",
		"schema": {
			"$schema": "https://json-schema.org/draft/2020-12/schema",
			"format": "uuid"
		},
		"tests": [
			{
				"description": "all string formats ignore integers",
				"data": 12,
				"valid": true
			},
			{
				"description": "all string formats ignore floats",
				"data": 13.7,
				"valid": true
			},
			{
				"description": "all string formats ignore objects",
				"data": {},
				"valid": true
			},
			{
				"description": "all string formats ignore arrays",
				"data": [],
				"valid": true
			},
			{
				"description": "all string formats ignore booleans",
				"data": false,
				"valid": true
			},
			{
				"description": "all string formats ignore nulls",
				"data": null,
				"valid": true
			},
			{
				"description": "invalid uuid string is only an annotation by default",
				"data": "2eb8aa08-aa98-11ea-b4aa-73b441d1638",
				"valid": true
			}
		]
	},
	{
		"description": "duration format",
		"schema": {
			"$schema": "https://json-schema.org/draft/2020-12/schema",
			"format": "duration"
		},
		"tests": [
			{
				"description": "all string formats ignore integers",
				"data": 12,
				"valid": true
			},
			{
				"description": "all string formats ignore floats",
				"data": 13.7,
				"valid": true
			},
			{
				"description": "all string formats ignore objects",
				"data": {},
				"valid": true
			},
			{
				"description": "all string formats ignore arrays",
				"data": [],
				"valid": true
			},
			{
				"description": "all string formats ignore booleans",
				"data": false,
				"valid": true
			},
			{
				"description": "all string formats ignore nulls",
				"data": null,
				"valid": true
			},
			{
				"description": "invalid duration string is only an annotation by default",
				"data": "PT1D",
				"valid": true
			}
		]
	}
]
