[
	{
		"description": "$id inside an unknown keyword is not a real identifier",
		"comment": "the implementation must not be confused by an $id in locations we do not know how to parse",
		"schema": {
			"$schema": "https://json-schema.org/draft/2020-12/schema",
			"$defs": {
				"id_in_unknown0": {
					"not": {
						"array_of_schemas": [
							{
								"$id": "https://localhost:1234/draft2020-12/unknownKeyword/my_identifier.json",
								"type": "null"
							}
						]
					}
				},
				"real_id_in_schema": {
					"$id": "https://localhost:1234/draft2020-12/unknownKeyword/my_identifier.json",
					"type": "string"
				},
				"id_in_unknown1": {
					"not": {
						"object_of_schemas": {
							"foo": {
								"$id": "https://localhost:1234/draft2020-12/unknownKeyword/my_identifier.json",
								"type": "integer"
							}
						}
					}
				}
			},
			"anyOf": [
				{
					"$ref": "#/$defs/id_in_unknown0"
				},
				{
					"$ref": "#/$defs/id_in_unknown1"
				},
				{
					"$ref": "https://localhost:1234/draft2020-12/unknownKeyword/my_identifier.json"
				}
			]
		},
		"tests": [
			{
				"description": "type matches second anyOf, which has a real schema in it",
				"data": "a string",
				"valid": true,
				"skip": {
					"v3-roundtrip": "conflicting values \"a string\" and {...} (mismatched types string and struct):\n    instance.json:1:1\ninvalid value \"a string\" (does not satisfy matchN): 0 matched, expected \u003e=1:\n    instance.json:1:1\ncannot use \"a string\" (type _|_) as _ in argument 1 to matchN:\n    instance.json:1:1\n"
				}
			},
			{
				"description": "type matches non-schema in first anyOf",
				"data": null,
				"valid": false
			},
			{
				"description": "type matches non-schema in third anyOf",
				"data": 1,
				"valid": false
			}
		]
	}
]
