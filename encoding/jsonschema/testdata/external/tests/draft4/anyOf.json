[
	{
		"description": "anyOf",
		"schema": {
			"anyOf": [
				{
					"type": "integer"
				},
				{
					"minimum": 2
				}
			]
		},
		"skip": {
			"v3-roundtrip": "generation only supported in version https://json-schema.org/draft/2020-12/schema"
		},
		"tests": [
			{
				"description": "first anyOf valid",
				"data": 1,
				"valid": true,
				"skip": {
					"v3-roundtrip": "could not extract schema"
				}
			},
			{
				"description": "second anyOf valid",
				"data": 2.5,
				"valid": true,
				"skip": {
					"v3-roundtrip": "could not extract schema"
				}
			},
			{
				"description": "both anyOf valid",
				"data": 3,
				"valid": true,
				"skip": {
					"v3-roundtrip": "could not extract schema"
				}
			},
			{
				"description": "neither anyOf valid",
				"data": 1.5,
				"valid": false,
				"skip": {
					"v3-roundtrip": "could not extract schema"
				}
			}
		]
	},
	{
		"description": "anyOf with base schema",
		"schema": {
			"type": "string",
			"anyOf": [
				{
					"maxLength": 2
				},
				{
					"minLength": 4
				}
			]
		},
		"skip": {
			"v3-roundtrip": "generation only supported in version https://json-schema.org/draft/2020-12/schema"
		},
		"tests": [
			{
				"description": "mismatch base schema",
				"data": 3,
				"valid": false,
				"skip": {
					"v3-roundtrip": "could not extract schema"
				}
			},
			{
				"description": "one anyOf valid",
				"data": "foobar",
				"valid": true,
				"skip": {
					"v3-roundtrip": "could not extract schema"
				}
			},
			{
				"description": "both anyOf invalid",
				"data": "foo",
				"valid": false,
				"skip": {
					"v3-roundtrip": "could not extract schema"
				}
			}
		]
	},
	{
		"description": "anyOf complex types",
		"schema": {
			"anyOf": [
				{
					"properties": {
						"bar": {
							"type": "integer"
						}
					},
					"required": [
						"bar"
					]
				},
				{
					"properties": {
						"foo": {
							"type": "string"
						}
					},
					"required": [
						"foo"
					]
				}
			]
		},
		"skip": {
			"v3-roundtrip": "generation only supported in version https://json-schema.org/draft/2020-12/schema"
		},
		"tests": [
			{
				"description": "first anyOf valid (complex)",
				"data": {
					"bar": 2
				},
				"valid": true,
				"skip": {
					"v3-roundtrip": "could not extract schema"
				}
			},
			{
				"description": "second anyOf valid (complex)",
				"data": {
					"foo": "baz"
				},
				"valid": true,
				"skip": {
					"v3-roundtrip": "could not extract schema"
				}
			},
			{
				"description": "both anyOf valid (complex)",
				"data": {
					"foo": "baz",
					"bar": 2
				},
				"valid": true,
				"skip": {
					"v3-roundtrip": "could not extract schema"
				}
			},
			{
				"description": "neither anyOf valid (complex)",
				"data": {
					"foo": 2,
					"bar": "quux"
				},
				"valid": false,
				"skip": {
					"v3-roundtrip": "could not extract schema"
				}
			}
		]
	},
	{
		"description": "anyOf with one empty schema",
		"schema": {
			"anyOf": [
				{
					"type": "number"
				},
				{}
			]
		},
		"skip": {
			"v3-roundtrip": "generation only supported in version https://json-schema.org/draft/2020-12/schema"
		},
		"tests": [
			{
				"description": "string is valid",
				"data": "foo",
				"valid": true,
				"skip": {
					"v3-roundtrip": "could not extract schema"
				}
			},
			{
				"description": "number is valid",
				"data": 123,
				"valid": true,
				"skip": {
					"v3-roundtrip": "could not extract schema"
				}
			}
		]
	},
	{
		"description": "nested anyOf, to check validation semantics",
		"schema": {
			"anyOf": [
				{
					"anyOf": [
						{
							"type": "null"
						}
					]
				}
			]
		},
		"skip": {
			"v3-roundtrip": "generation only supported in version https://json-schema.org/draft/2020-12/schema"
		},
		"tests": [
			{
				"description": "null is valid",
				"data": null,
				"valid": true,
				"skip": {
					"v3-roundtrip": "could not extract schema"
				}
			},
			{
				"description": "anything non-null is invalid",
				"data": 123,
				"valid": false,
				"skip": {
					"v3-roundtrip": "could not extract schema"
				}
			}
		]
	}
]
