[
	{
		"description": "root pointer ref",
		"schema": {
			"properties": {
				"foo": {
					"$ref": "#"
				}
			},
			"additionalProperties": false
		},
		"tests": [
			{
				"description": "match",
				"data": {
					"foo": false
				},
				"valid": true
			},
			{
				"description": "recursive match",
				"data": {
					"foo": {
						"foo": false
					}
				},
				"valid": true
			},
			{
				"description": "mismatch",
				"data": {
					"bar": false
				},
				"valid": false,
				"skip": {
					"v2": "unexpected success",
					"v3": "unexpected success"
				}
			},
			{
				"description": "recursive mismatch",
				"data": {
					"foo": {
						"bar": false
					}
				},
				"valid": false,
				"skip": {
					"v2": "unexpected success",
					"v3": "unexpected success"
				}
			}
		]
	},
	{
		"description": "relative pointer ref to object",
		"schema": {
			"properties": {
				"foo": {
					"type": "integer"
				},
				"bar": {
					"$ref": "#/properties/foo"
				}
			}
		},
		"skip": {
			"v2": "extract error: cannot compile resulting schema: bar: reference \"foo\" not found:\n    generated.cue:4:10\n",
			"v3": "extract error: cannot compile resulting schema: bar: reference \"foo\" not found:\n    generated.cue:4:10\n"
		},
		"tests": [
			{
				"description": "match",
				"data": {
					"bar": 3
				},
				"valid": true,
				"skip": {
					"v2": "could not compile schema",
					"v3": "could not compile schema"
				}
			},
			{
				"description": "mismatch",
				"data": {
					"bar": true
				},
				"valid": false,
				"skip": {
					"v2": "could not compile schema",
					"v3": "could not compile schema"
				}
			}
		]
	},
	{
		"description": "relative pointer ref to array",
		"schema": {
			"items": [
				{
					"type": "integer"
				},
				{
					"$ref": "#/items/0"
				}
			]
		},
		"skip": {
			"v2": "extract error: referring to field \"items\" not yet supported",
			"v3": "extract error: referring to field \"items\" not yet supported"
		},
		"tests": [
			{
				"description": "match array",
				"data": [
					1,
					2
				],
				"valid": true,
				"skip": {
					"v2": "could not compile schema",
					"v3": "could not compile schema"
				}
			},
			{
				"description": "mismatch array",
				"data": [
					1,
					"foo"
				],
				"valid": false,
				"skip": {
					"v2": "could not compile schema",
					"v3": "could not compile schema"
				}
			}
		]
	},
	{
		"description": "escaped pointer ref",
		"schema": {
			"definitions": {
				"tilde~field": {
					"type": "integer"
				},
				"slash/field": {
					"type": "integer"
				},
				"percent%field": {
					"type": "integer"
				}
			},
			"properties": {
				"tilde": {
					"$ref": "#/definitions/tilde~0field"
				},
				"slash": {
					"$ref": "#/definitions/slash~1field"
				},
				"percent": {
					"$ref": "#/definitions/percent%25field"
				}
			}
		},
		"tests": [
			{
				"description": "slash invalid",
				"data": {
					"slash": "aoeu"
				},
				"valid": false,
				"skip": {
					"v3": "unexpected success"
				}
			},
			{
				"description": "tilde invalid",
				"data": {
					"tilde": "aoeu"
				},
				"valid": false,
				"skip": {
					"v3": "unexpected success"
				}
			},
			{
				"description": "percent invalid",
				"data": {
					"percent": "aoeu"
				},
				"valid": false,
				"skip": {
					"v3": "unexpected success"
				}
			},
			{
				"description": "slash valid",
				"data": {
					"slash": 123
				},
				"valid": true,
				"skip": {
					"v2": "6 errors in empty disjunction:\nconflicting values [...] and {slash:123} (mismatched types list and struct):\n    generated.cue:2:33\n    instance.json:1:1\nconflicting values bool and {slash:123} (mismatched types bool and struct):\n    generated.cue:2:8\n    instance.json:1:1\nconflicting values null and {slash:123} (mismatched types null and struct):\n    generated.cue:2:1\n    instance.json:1:1\nconflicting values number and {slash:123} (mismatched types number and struct):\n    generated.cue:2:15\n    instance.json:1:1\nconflicting values string and {slash:123} (mismatched types string and struct):\n    generated.cue:2:24\n    instance.json:1:1\nslash: undefined field: \"slash~1field\":\n    generated.cue:4:14\n"
				}
			},
			{
				"description": "tilde valid",
				"data": {
					"tilde": 123
				},
				"valid": true,
				"skip": {
					"v2": "6 errors in empty disjunction:\nconflicting values [...] and {tilde:123} (mismatched types list and struct):\n    generated.cue:2:33\n    instance.json:1:1\nconflicting values bool and {tilde:123} (mismatched types bool and struct):\n    generated.cue:2:8\n    instance.json:1:1\nconflicting values null and {tilde:123} (mismatched types null and struct):\n    generated.cue:2:1\n    instance.json:1:1\nconflicting values number and {tilde:123} (mismatched types number and struct):\n    generated.cue:2:15\n    instance.json:1:1\nconflicting values string and {tilde:123} (mismatched types string and struct):\n    generated.cue:2:24\n    instance.json:1:1\ntilde: undefined field: \"tilde~0field\":\n    generated.cue:3:14\n"
				}
			},
			{
				"description": "percent valid",
				"data": {
					"percent": 123
				},
				"valid": true,
				"skip": {
					"v2": "6 errors in empty disjunction:\nconflicting values [...] and {percent:123} (mismatched types list and struct):\n    generated.cue:2:33\n    instance.json:1:1\nconflicting values bool and {percent:123} (mismatched types bool and struct):\n    generated.cue:2:8\n    instance.json:1:1\nconflicting values null and {percent:123} (mismatched types null and struct):\n    generated.cue:2:1\n    instance.json:1:1\nconflicting values number and {percent:123} (mismatched types number and struct):\n    generated.cue:2:15\n    instance.json:1:1\nconflicting values string and {percent:123} (mismatched types string and struct):\n    generated.cue:2:24\n    instance.json:1:1\npercent: undefined field: \"percent%25field\":\n    generated.cue:5:14\n"
				}
			}
		]
	},
	{
		"description": "nested refs",
		"schema": {
			"definitions": {
				"a": {
					"type": "integer"
				},
				"b": {
					"$ref": "#/definitions/a"
				},
				"c": {
					"$ref": "#/definitions/b"
				}
			},
			"allOf": [
				{
					"$ref": "#/definitions/c"
				}
			]
		},
		"tests": [
			{
				"description": "nested ref valid",
				"data": 5,
				"valid": true
			},
			{
				"description": "nested ref invalid",
				"data": "a",
				"valid": false
			}
		]
	},
	{
		"description": "ref overrides any sibling keywords",
		"schema": {
			"definitions": {
				"reffed": {
					"type": "array"
				}
			},
			"properties": {
				"foo": {
					"$ref": "#/definitions/reffed",
					"maxItems": 2
				}
			}
		},
		"tests": [
			{
				"description": "ref valid",
				"data": {
					"foo": []
				},
				"valid": true
			},
			{
				"description": "ref valid, maxItems ignored",
				"data": {
					"foo": [
						1,
						2,
						3
					]
				},
				"valid": true,
				"skip": {
					"v2": "5 errors in empty disjunction:\nconflicting values [...] and {foo:[1,2,3]} (mismatched types list and struct):\n    generated.cue:3:33\n    instance.json:1:1\nconflicting values bool and {foo:[1,2,3]} (mismatched types bool and struct):\n    generated.cue:3:8\n    instance.json:1:1\nconflicting values null and {foo:[1,2,3]} (mismatched types null and struct):\n    generated.cue:3:1\n    instance.json:1:1\nconflicting values number and {foo:[1,2,3]} (mismatched types number and struct):\n    generated.cue:3:15\n    instance.json:1:1\nconflicting values string and {foo:[1,2,3]} (mismatched types string and struct):\n    generated.cue:3:24\n    instance.json:1:1\n",
					"v3": "cannot combine regular field \"foo\" with [[1,2,3],[]]:\n    generated.cue:1:1\n    instance.json:1:1\ncannot combine regular field \"foo\" with null:\n    generated.cue:3:1\ncannot combine regular field \"foo\" with {foo:[1,2,3],#reffed:[]}:\n    generated.cue:1:1\n    instance.json:1:1\nconflicting values [...] and {foo:[1,2,3]} (mismatched types list and struct):\n    generated.cue:3:33\n    instance.json:1:1\nconflicting values bool and {foo:[1,2,3]} (mismatched types bool and struct):\n    generated.cue:3:8\n    instance.json:1:1\nconflicting values null and {foo:[1,2,3]} (mismatched types null and struct):\n    generated.cue:3:1\n    instance.json:1:1\nconflicting values number and {foo:[1,2,3]} (mismatched types number and struct):\n    generated.cue:3:15\n    instance.json:1:1\nconflicting values string and {foo:[1,2,3]} (mismatched types string and struct):\n    generated.cue:3:24\n    instance.json:1:1\nfoo: conflicting values [1,2,3] and bool (mismatched types list and bool):\n    generated.cue:4:26\n    instance.json:1:8\nfoo: conflicting values [1,2,3] and null (mismatched types list and null):\n    generated.cue:4:19\n    instance.json:1:8\nfoo: conflicting values [1,2,3] and number (mismatched types list and number):\n    generated.cue:4:33\n    instance.json:1:8\nfoo: conflicting values [1,2,3] and string (mismatched types list and string):\n    generated.cue:4:42\n    instance.json:1:8\nfoo: conflicting values [1,2,3] and {...} (mismatched types list and struct):\n    generated.cue:4:70\n    instance.json:1:8\nfoo: invalid value [1,2,3] (does not satisfy list.MaxItems(2)): len(list) \u003e MaxItems(2) (3 \u003e 2):\n    generated.cue:4:51\n    generated.cue:4:65\n    instance.json:1:8\n"
				}
			},
			{
				"description": "ref invalid",
				"data": {
					"foo": "string"
				},
				"valid": false
			}
		]
	},
	{
		"description": "$ref prevents a sibling id from changing the base uri",
		"schema": {
			"id": "http://localhost:1234/sibling_id/base/",
			"definitions": {
				"foo": {
					"id": "http://localhost:1234/sibling_id/foo.json",
					"type": "string"
				},
				"base_foo": {
					"$comment": "this canonical uri is http://localhost:1234/sibling_id/base/foo.json",
					"id": "foo.json",
					"type": "number"
				}
			},
			"allOf": [
				{
					"$comment": "$ref resolves to http://localhost:1234/sibling_id/base/foo.json, not http://localhost:1234/sibling_id/foo.json",
					"id": "http://localhost:1234/sibling_id/",
					"$ref": "foo.json"
				}
			]
		},
		"skip": {
			"v2": "extract error: cannot compile resulting schema: invalid import path: \"localhost:1234/sibling_id/foo.json:foo\":\n    generated.cue:1:8\n",
			"v3": "extract error: cannot compile resulting schema: invalid import path: \"localhost:1234/sibling_id/foo.json:foo\":\n    generated.cue:1:8\n"
		},
		"tests": [
			{
				"description": "$ref resolves to /definitions/base_foo, data does not validate",
				"data": "a",
				"valid": false,
				"skip": {
					"v2": "could not compile schema",
					"v3": "could not compile schema"
				}
			},
			{
				"description": "$ref resolves to /definitions/base_foo, data validates",
				"data": 1,
				"valid": true,
				"skip": {
					"v2": "could not compile schema",
					"v3": "could not compile schema"
				}
			}
		]
	},
	{
		"description": "remote ref, containing refs itself",
		"schema": {
			"$ref": "http://json-schema.org/draft-04/schema#"
		},
		"skip": {
			"v2": "extract error: cannot compile resulting schema: package \"json-schema.org/draft-04/schema\" imported but not defined in :\n    generated.cue:1:8\n",
			"v3": "extract error: cannot compile resulting schema: package \"json-schema.org/draft-04/schema\" imported but not defined in :\n    generated.cue:1:8\n"
		},
		"tests": [
			{
				"description": "remote ref valid",
				"data": {
					"minLength": 1
				},
				"valid": true,
				"skip": {
					"v2": "could not compile schema",
					"v3": "could not compile schema"
				}
			},
			{
				"description": "remote ref invalid",
				"data": {
					"minLength": -1
				},
				"valid": false,
				"skip": {
					"v2": "could not compile schema",
					"v3": "could not compile schema"
				}
			}
		]
	},
	{
		"description": "property named $ref that is not a reference",
		"schema": {
			"properties": {
				"$ref": {
					"type": "string"
				}
			}
		},
		"tests": [
			{
				"description": "property named $ref valid",
				"data": {
					"$ref": "a"
				},
				"valid": true
			},
			{
				"description": "property named $ref invalid",
				"data": {
					"$ref": 2
				},
				"valid": false
			}
		]
	},
	{
		"description": "property named $ref, containing an actual $ref",
		"schema": {
			"properties": {
				"$ref": {
					"$ref": "#/definitions/is-string"
				}
			},
			"definitions": {
				"is-string": {
					"type": "string"
				}
			}
		},
		"tests": [
			{
				"description": "property named $ref valid",
				"data": {
					"$ref": "a"
				},
				"valid": true
			},
			{
				"description": "property named $ref invalid",
				"data": {
					"$ref": 2
				},
				"valid": false
			}
		]
	},
	{
		"description": "Recursive references between schemas",
		"schema": {
			"id": "http://localhost:1234/tree",
			"description": "tree of nodes",
			"type": "object",
			"properties": {
				"meta": {
					"type": "string"
				},
				"nodes": {
					"type": "array",
					"items": {
						"$ref": "node"
					}
				}
			},
			"required": [
				"meta",
				"nodes"
			],
			"definitions": {
				"node": {
					"id": "http://localhost:1234/node",
					"description": "node",
					"type": "object",
					"properties": {
						"value": {
							"type": "number"
						},
						"subtree": {
							"$ref": "tree"
						}
					},
					"required": [
						"value"
					]
				}
			}
		},
		"skip": {
			"v2": "extract error: cannot compile resulting schema: builtin package \"localhost:1234/node\" undefined:\n    generated.cue:1:8\n_schema.nodes: reference \"node\" not found:\n    generated.cue:8:14\n",
			"v3": "extract error: cannot compile resulting schema: builtin package \"localhost:1234/node\" undefined:\n    generated.cue:1:8\n_schema.nodes: reference \"node\" not found:\n    generated.cue:8:14\n"
		},
		"tests": [
			{
				"description": "valid tree",
				"data": {
					"meta": "root",
					"nodes": [
						{
							"value": 1,
							"subtree": {
								"meta": "child",
								"nodes": [
									{
										"value": 1.1
									},
									{
										"value": 1.2
									}
								]
							}
						},
						{
							"value": 2,
							"subtree": {
								"meta": "child",
								"nodes": [
									{
										"value": 2.1
									},
									{
										"value": 2.2
									}
								]
							}
						}
					]
				},
				"valid": true,
				"skip": {
					"v2": "could not compile schema",
					"v3": "could not compile schema"
				}
			},
			{
				"description": "invalid tree",
				"data": {
					"meta": "root",
					"nodes": [
						{
							"value": 1,
							"subtree": {
								"meta": "child",
								"nodes": [
									{
										"value": "string is invalid"
									},
									{
										"value": 1.2
									}
								]
							}
						},
						{
							"value": 2,
							"subtree": {
								"meta": "child",
								"nodes": [
									{
										"value": 2.1
									},
									{
										"value": 2.2
									}
								]
							}
						}
					]
				},
				"valid": false,
				"skip": {
					"v2": "could not compile schema",
					"v3": "could not compile schema"
				}
			}
		]
	},
	{
		"description": "refs with quote",
		"schema": {
			"properties": {
				"foo\"bar": {
					"$ref": "#/definitions/foo%22bar"
				}
			},
			"definitions": {
				"foo\"bar": {
					"type": "number"
				}
			}
		},
		"tests": [
			{
				"description": "object with numbers is valid",
				"data": {
					"foo\"bar": 1
				},
				"valid": true,
				"skip": {
					"v2": "6 errors in empty disjunction:\nconflicting values [...] and {\"foo\\\"bar\":1} (mismatched types list and struct):\n    generated.cue:2:33\n    instance.json:1:1\nconflicting values bool and {\"foo\\\"bar\":1} (mismatched types bool and struct):\n    generated.cue:2:8\n    instance.json:1:1\nconflicting values null and {\"foo\\\"bar\":1} (mismatched types null and struct):\n    generated.cue:2:1\n    instance.json:1:1\nconflicting values number and {\"foo\\\"bar\":1} (mismatched types number and struct):\n    generated.cue:2:15\n    instance.json:1:1\nconflicting values string and {\"foo\\\"bar\":1} (mismatched types string and struct):\n    generated.cue:2:24\n    instance.json:1:1\n\"foo\\\"bar\": undefined field: \"foo%22bar\":\n    generated.cue:3:17\n"
				}
			},
			{
				"description": "object with strings is invalid",
				"data": {
					"foo\"bar": "1"
				},
				"valid": false,
				"skip": {
					"v3": "unexpected success"
				}
			}
		]
	},
	{
		"description": "Location-independent identifier",
		"schema": {
			"allOf": [
				{
					"$ref": "#foo"
				}
			],
			"definitions": {
				"A": {
					"id": "#foo",
					"type": "integer"
				}
			}
		},
		"skip": {
			"v2": "extract error: $id URI may not contain a fragment (and 1 more errors)",
			"v3": "extract error: $id URI may not contain a fragment (and 1 more errors)"
		},
		"tests": [
			{
				"description": "match",
				"data": 1,
				"valid": true,
				"skip": {
					"v2": "could not compile schema",
					"v3": "could not compile schema"
				}
			},
			{
				"description": "mismatch",
				"data": "a",
				"valid": false,
				"skip": {
					"v2": "could not compile schema",
					"v3": "could not compile schema"
				}
			}
		]
	},
	{
		"description": "Location-independent identifier with base URI change in subschema",
		"schema": {
			"id": "http://localhost:1234/root",
			"allOf": [
				{
					"$ref": "http://localhost:1234/nested.json#foo"
				}
			],
			"definitions": {
				"A": {
					"id": "nested.json",
					"definitions": {
						"B": {
							"id": "#foo",
							"type": "integer"
						}
					}
				}
			}
		},
		"skip": {
			"v2": "extract error: $id URI may not contain a fragment (and 1 more errors)",
			"v3": "extract error: $id URI may not contain a fragment (and 1 more errors)"
		},
		"tests": [
			{
				"description": "match",
				"data": 1,
				"valid": true,
				"skip": {
					"v2": "could not compile schema",
					"v3": "could not compile schema"
				}
			},
			{
				"description": "mismatch",
				"data": "a",
				"valid": false,
				"skip": {
					"v2": "could not compile schema",
					"v3": "could not compile schema"
				}
			}
		]
	},
	{
		"description": "naive replacement of $ref with its destination is not correct",
		"schema": {
			"definitions": {
				"a_string": {
					"type": "string"
				}
			},
			"enum": [
				{
					"$ref": "#/definitions/a_string"
				}
			]
		},
		"tests": [
			{
				"description": "do not evaluate the $ref inside the enum, matching any string",
				"data": "this is a string",
				"valid": false
			},
			{
				"description": "match the enum exactly",
				"data": {
					"$ref": "#/definitions/a_string"
				},
				"valid": true
			}
		]
	},
	{
		"description": "id must be resolved against nearest parent, not just immediate parent",
		"schema": {
			"id": "http://example.com/a.json",
			"definitions": {
				"x": {
					"id": "http://example.com/b/c.json",
					"not": {
						"definitions": {
							"y": {
								"id": "d.json",
								"type": "number"
							}
						}
					}
				}
			},
			"allOf": [
				{
					"$ref": "http://example.com/b/d.json"
				}
			]
		},
		"skip": {
			"v2": "extract error: cannot compile resulting schema: package \"example.com/b/d.json:d\" imported but not defined in :\n    generated.cue:1:8\n",
			"v3": "extract error: cannot compile resulting schema: package \"example.com/b/d.json:d\" imported but not defined in :\n    generated.cue:1:8\n"
		},
		"tests": [
			{
				"description": "number is valid",
				"data": 1,
				"valid": true,
				"skip": {
					"v2": "could not compile schema",
					"v3": "could not compile schema"
				}
			},
			{
				"description": "non-number is invalid",
				"data": "a",
				"valid": false,
				"skip": {
					"v2": "could not compile schema",
					"v3": "could not compile schema"
				}
			}
		]
	},
	{
		"description": "id with file URI still resolves pointers - *nix",
		"schema": {
			"id": "file:///folder/file.json",
			"definitions": {
				"foo": {
					"type": "number"
				}
			},
			"allOf": [
				{
					"$ref": "#/definitions/foo"
				}
			]
		},
		"tests": [
			{
				"description": "number is valid",
				"data": 1,
				"valid": true
			},
			{
				"description": "non-number is invalid",
				"data": "a",
				"valid": false
			}
		]
	},
	{
		"description": "id with file URI still resolves pointers - windows",
		"schema": {
			"id": "file:///c:/folder/file.json",
			"definitions": {
				"foo": {
					"type": "number"
				}
			},
			"allOf": [
				{
					"$ref": "#/definitions/foo"
				}
			]
		},
		"tests": [
			{
				"description": "number is valid",
				"data": 1,
				"valid": true
			},
			{
				"description": "non-number is invalid",
				"data": "a",
				"valid": false
			}
		]
	},
	{
		"description": "empty tokens in $ref json-pointer",
		"schema": {
			"definitions": {
				"": {
					"definitions": {
						"": {
							"type": "number"
						}
					}
				}
			},
			"allOf": [
				{
					"$ref": "#/definitions//definitions/"
				}
			]
		},
		"skip": {
			"v2": "extract error: cannot refer to definitions section: must refer to one of its elements",
			"v3": "extract error: cannot refer to definitions section: must refer to one of its elements"
		},
		"tests": [
			{
				"description": "number is valid",
				"data": 1,
				"valid": true,
				"skip": {
					"v2": "could not compile schema",
					"v3": "could not compile schema"
				}
			},
			{
				"description": "non-number is invalid",
				"data": "a",
				"valid": false,
				"skip": {
					"v2": "could not compile schema",
					"v3": "could not compile schema"
				}
			}
		]
	}
]
