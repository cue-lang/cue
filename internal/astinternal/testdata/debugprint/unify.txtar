-- unify.txtar --
unification: b & c & d
disjunctoin: b | c | *d
-- out/debugprint/unify.txtar --
*ast.File{
	Filename: "unify.txtar"
	Decls: []ast.Decl{
		*ast.Field{
			Label: *ast.Ident{
				NamePos: token.Pos("unify.txtar:1:1", nospace)
				Name: "unification"
			}
			Optional: token.Pos("-")
			Constraint: token.Token("ILLEGAL")
			TokenPos: token.Pos("unify.txtar:1:12", nospace)
			Token: token.Token(":")
			Value: *ast.BinaryExpr{
				X: *ast.BinaryExpr{
					X: *ast.Ident{
						NamePos: token.Pos("unify.txtar:1:14", blank)
						Name: "b"
					}
					OpPos: token.Pos("unify.txtar:1:16", blank)
					Op: token.Token("&")
					Y: *ast.Ident{
						NamePos: token.Pos("unify.txtar:1:18", blank)
						Name: "c"
					}
				}
				OpPos: token.Pos("unify.txtar:1:20", blank)
				Op: token.Token("&")
				Y: *ast.Ident{
					NamePos: token.Pos("unify.txtar:1:22", blank)
					Name: "d"
				}
			}
			Attrs: []*ast.Attribute{}
		}
		*ast.Field{
			Label: *ast.Ident{
				NamePos: token.Pos("unify.txtar:2:1", newline)
				Name: "disjunctoin"
			}
			Optional: token.Pos("-")
			Constraint: token.Token("ILLEGAL")
			TokenPos: token.Pos("unify.txtar:2:12", nospace)
			Token: token.Token(":")
			Value: *ast.BinaryExpr{
				X: *ast.BinaryExpr{
					X: *ast.Ident{
						NamePos: token.Pos("unify.txtar:2:14", blank)
						Name: "b"
					}
					OpPos: token.Pos("unify.txtar:2:16", blank)
					Op: token.Token("|")
					Y: *ast.Ident{
						NamePos: token.Pos("unify.txtar:2:18", blank)
						Name: "c"
					}
				}
				OpPos: token.Pos("unify.txtar:2:20", blank)
				Op: token.Token("|")
				Y: *ast.UnaryExpr{
					OpPos: token.Pos("unify.txtar:2:22", blank)
					Op: token.Token("*")
					X: *ast.Ident{
						NamePos: token.Pos("unify.txtar:2:23", nospace)
						Name: "d"
					}
				}
			}
			Attrs: []*ast.Attribute{}
		}
	}
	Imports: []*ast.ImportSpec{}
}
-- out/debugprint/unify.txtar/omitempty-strings --
*ast.File{
	Filename: "unify.txtar"
	Decls: []ast.Decl{
		*ast.Field{
			Label: *ast.Ident{
				Name: "unification"
			}
			Value: *ast.BinaryExpr{
				X: *ast.BinaryExpr{
					X: *ast.Ident{
						Name: "b"
					}
					Y: *ast.Ident{
						Name: "c"
					}
				}
				Y: *ast.Ident{
					Name: "d"
				}
			}
		}
		*ast.Field{
			Label: *ast.Ident{
				Name: "disjunctoin"
			}
			Value: *ast.BinaryExpr{
				X: *ast.BinaryExpr{
					X: *ast.Ident{
						Name: "b"
					}
					Y: *ast.Ident{
						Name: "c"
					}
				}
				Y: *ast.UnaryExpr{
					X: *ast.Ident{
						Name: "d"
					}
				}
			}
		}
	}
}
