# Issue #590

-- in.cue --
let X = 1 + 1
#Foo: X
-- x.cue --
x: string

let Y = x
y: Y
-- y.cue --
x: "foo"

// Note: although syntactically the same, this is a different let clause than
// the one from before and thus will be renamed.
// Issue #590
let Y = x
y: Y
-- issue593.cue --
cfgs: [ for crd in ["one", "two"] {
        metadata: {
                name: crd
        }
}]
for cfg in cfgs {
        let filepath = "kind-\(cfg.name)"
        files: {
                "\(filepath)": {
                        patches: cfg
                }
        }
}

-- for.cue --
comprehension: {
	for cfg in [{a: "one"}] {
		let filepath = "kind-\(cfg.name)"
		"\(filepath)": {
				patches: cfg
		}
	}
}

-- scope.cue --
scoped: {
	_args: required: 1
	direct: {
		let Args = _args
		a: Args.required
	}
	embed1: {
		let Args = _args
		a: {Args.required}
	}
	embed2: {
		let Args = _args
		a: {{Args.required}}
	}
	list: {
		let Args = _args
		a: [Args.required]
	}
	listStruct: {
		let Args = _args
		a: [{a: Args.required}]
	}
	listEmbed: {
		let Args = _args
		a: [{Args.required}]
	}
}

-- out/definition --

let X = 1 + 1
let Y = x
let Y_1 = x
{
	cfgs: [ for crd in ["one", "two"] {
		metadata: {
			name: crd
		}
	}]
	for cfg in cfgs {
		let filepath = "kind-\(cfg.name)"
		files: {
			"\(filepath)": {
				patches: cfg
			}
		}
	}
}
#Foo: X
x:    "foo"
comprehension: {
	for cfg in [{
		a: "one"
	}] {
		let filepath_1 = "kind-\(cfg.name)"
		"\(filepath_1)": {
			patches: cfg
		}
	}
}
scoped: {
	_args: {
		required: 1
	}
	direct: {
		let Args = _args
		a: Args.required
	}
	embed1: {
		let Args_1 = _args
		a: Args_1.required
	}
	embed2: {
		let Args_2 = _args
		a: Args_2.required
	}
	list: {
		let Args_3 = _args
		a: [Args_3.required]
	}
	listStruct: {
		let Args_4 = _args
		a: [{
			a: Args_4.required
		}]
	}
	listEmbed: {
		let Args_8 = _args
		a: [Args_8.required]
	}
}
y: Y & Y_1
-- out/doc --
[]
[#Foo]
[x]
[y]
[cfgs]
[cfgs 0]
[cfgs 0 metadata]
[cfgs 0 metadata name]
[cfgs 1]
[cfgs 1 metadata]
[cfgs 1 metadata name]
[comprehension]
[scoped]
[scoped _args]
[scoped _args required]
[scoped direct]
[scoped direct a]
[scoped embed1]
[scoped embed1 a]
[scoped embed2]
[scoped embed2 a]
[scoped list]
[scoped list a]
[scoped list a 0]
[scoped listStruct]
[scoped listStruct a]
[scoped listStruct a 0]
[scoped listStruct a 0 a]
[scoped listEmbed]
[scoped listEmbed a]
[scoped listEmbed a 0]
[files]
-- out/value --
== Simplified
{
	x: "foo"
	cfgs: [{
		metadata: {
			name: "one"
		}
	}, {
		metadata: {
			name: "two"
		}
	}]
	comprehension: {
		for cfg in [{
			a: "one"
		}] {
			let filepath_1 = "kind-\(cfg.name)"
			"\(filepath_1)": {
				patches: cfg
			}
		}
	}
	scoped: {
		direct: {
			a: 1
		}
		embed1: {
			a: 1
		}
		embed2: {
			a: 1
		}
		list: {
			a: [1]
		}
		listStruct: {
			a: [{
				a: 1
			}]
		}
		listEmbed: {
			a: [1]
		}
	}
	files: {
		"\("kind-\(cfg.name)")": {
			patches: cfg
		}
	} & {
		"\("kind-\(cfg.name)")": {
			patches: cfg
		}
	}
	y: "foo"
}
== Raw
{
	#Foo: 2
	x:    "foo"
	cfgs: [{
		metadata: {
			name: "one"
		}
	}, {
		metadata: {
			name: "two"
		}
	}]
	comprehension: {
		for cfg in [{
			a: "one"
		}] {
			let filepath_1 = "kind-\(cfg.name)"
			"\(filepath_1)": {
				patches: cfg
			}
		}
	}
	scoped: {
		_args: {
			required: 1
		}
		direct: {
			a: 1
		}
		embed1: {
			a: 1
		}
		embed2: {
			a: 1
		}
		list: {
			a: [1]
		}
		listStruct: {
			a: [{
				a: 1
			}]
		}
		listEmbed: {
			a: [1]
		}
	}
	files: {
		"\("kind-\(cfg.name)")": {
			patches: cfg
		}
	} & {
		"\("kind-\(cfg.name)")": {
			patches: cfg
		}
	}
	y: "foo"
}
== Final
{
	x: "foo"
	cfgs: [{
		metadata: {
			name: "one"
		}
	}, {
		metadata: {
			name: "two"
		}
	}]
	comprehension: _|_ // invalid interpolation: invalid interpolation: comprehension: undefined field: name
	scoped: {
		direct: {
			a: 1
		}
		embed1: {
			a: 1
		}
		embed2: {
			a: 1
		}
		list: {
			a: [1]
		}
		listStruct: {
			a: [{
				a: 1
			}]
		}
		listEmbed: {
			a: [1]
		}
	}
	files: _|_ // invalid interpolation: invalid interpolation: files: undefined field: name (and 3 more errors)
	y:     "foo"
}
== All
{
	#Foo: 2
	x:    "foo"
	cfgs: [{
		metadata: {
			name: "one"
		}
	}, {
		metadata: {
			name: "two"
		}
	}]
	comprehension: {
		for cfg in [{
			a: "one"
		}] {
			let filepath_1 = "kind-\(cfg.name)"
			"\(filepath_1)": {
				patches: cfg
			}
		}
	}
	scoped: {
		_args: {
			required: 1
		}
		direct: {
			a: 1
		}
		embed1: {
			a: 1
		}
		embed2: {
			a: 1
		}
		list: {
			a: [1]
		}
		listStruct: {
			a: [{
				a: 1
			}]
		}
		listEmbed: {
			a: [1]
		}
	}
	files: {
		"\("kind-\(cfg.name)")": {
			patches: cfg
		}
	} & {
		"\("kind-\(cfg.name)")": {
			patches: cfg
		}
	}
	y: "foo"
}
== Eval
{
	#Foo: 2
	x:    "foo"
	cfgs: [{
		metadata: {
			name: "one"
		}
	}, {
		metadata: {
			name: "two"
		}
	}]
	comprehension: {
		for cfg in [{
			a: "one"
		}] {
			let filepath_1 = "kind-\(cfg.name)"
			"\(filepath_1)": {
				patches: cfg
			}
		}
	}
	scoped: {
		direct: {
			a: 1
		}
		embed1: {
			a: 1
		}
		embed2: {
			a: 1
		}
		list: {
			a: [1]
		}
		listStruct: {
			a: [{
				a: 1
			}]
		}
		listEmbed: {
			a: [1]
		}
	}
	files: {
		"\("kind-\(cfg.name)")": {
			patches: cfg
		}
	} & {
		"\("kind-\(cfg.name)")": {
			patches: cfg
		}
	}
	y: "foo"
}
