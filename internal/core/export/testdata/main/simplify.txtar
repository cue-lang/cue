-- in.cue --
import "strings"

x: [string]: int64
x: {
	y: int
}
s: strings.MinRunes(4) & strings.MaxRunes(7)

additional: {
	...
	env: _
	confs: {
		if env {}
	}
}
-- out/definition --
import "strings"

x: {
	{
		[string]: int64
	}
	y: int
}
s: strings.MinRunes(4) & strings.MaxRunes(7)
additional: {
	env: _
	confs: {
		if env {}
	}
	...
}
-- out/doc --
[]
[x]
[x y]
[s]
[additional]
[additional env]
[additional confs]
-- out/value --
== Simplified
{
	x: {
		y: int64
	}
	s: strings.MinRunes(4) & strings.MaxRunes(7)
	additional: {
		env: _
		confs: {
			if env {}
		}
	}
}
== Raw
{
	x: {
		y: >=-9223372036854775808 & <=9223372036854775807 & int
	}
	s: strings.MinRunes(4) & strings.MaxRunes(7)
	additional: {
		env: _
		confs: {
			if env {}
		}
	}
}
== Final
{
	x: {
		y: int64
	}
	s: strings.MinRunes(4) & strings.MaxRunes(7)
	additional: {
		env:   _
		confs: _|_ // additional.confs: incomplete bool: _ (and 2 more errors)
	}
}
== All
{
	x: {
		y: int64
	}
	s: strings.MinRunes(4) & strings.MaxRunes(7)
	additional: {
		env: _
		confs: {
			if env {}
		}
	}
}
== Eval
{
	x: {
		y: >=-9223372036854775808 & <=9223372036854775807 & int
	}
	s: strings.MinRunes(4) & strings.MaxRunes(7)
	additional: {
		env: _
		confs: {
			if env {}
		}
	}
}
