-- in.cue --
import "encoding/yaml"

t1: yaml.Validate("a: 2", {a!: int} | {b!: int})
t2: yaml.Validate("a: 2", close({a: int}) | close({b: int}))

#A: {a: int}
#B: {b: int}
t3: yaml.Validate("a: 2", #A | #B)

t4: yaml.Validate("'foo'", *int | string)
t5: yaml.Validate("'foo'", string)
-- diff/todo --
{t2,t3}: fix these tests. They resolves to true in the old evaluator,
but incorrectly error in the new evaluator.
-- diff/explanation --
t1: The incomplete value error in the old evaluator was incorrect - the presence of
required fields in each disjunct provides enough information to resolve the disjunction,
and the new evaluator correctly identifies this.
-- out/yaml --
Errors:
t1: error in call to encoding/yaml.Validate: incomplete value {a:2} | {a:2,b!:int}:
    ./in.cue:3:5

Result:
t1: _|_ // t1: error in call to encoding/yaml.Validate: incomplete value {a:2} | {a:2,b!:int}
t2: true
#A: {
	a: int
}
#B: {
	b: int
}
t3: true
t4: true
t5: true
