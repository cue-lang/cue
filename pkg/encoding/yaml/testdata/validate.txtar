-- in.cue --
import "encoding/yaml"

t1: yaml.Validate("a: 2", {a!: int} | {b!: int})

// TODO: fix this test. It resolves to true in the old evaluator,
// but incorrectly errors in the new evaluator.
t2: yaml.Validate("a: 2", close({a: int}) | close({b: int}))

t3: yaml.Validate("'foo'", *int | string)
t4: yaml.Validate("'foo'", string)
-- out/yaml-v3 --
Errors:
t2: error in call to encoding/yaml.Validate: incomplete value {a:2} | {a:2,b:int}:
    ./in.cue:7:5

Result:
t1: true

// TODO: fix this test. It resolves to true in the old evaluator,
// but incorrectly errors in the new evaluator.
t2: _|_ // t2: error in call to encoding/yaml.Validate: incomplete value {a:2} | {a:2,b:int}
t3: true
t4: true
-- diff/-out/yaml-v3<==>+out/yaml --
diff old new
--- old
+++ new
@@ -1,12 +1,12 @@
 Errors:
-t1: error in call to encoding/yaml.Validate: incomplete value {a:2} | {a:2,b:int}:
-    ./in.cue:3:5
+t2: error in call to encoding/yaml.Validate: incomplete value {a:2} | {a:2,b:int}:
+    ./in.cue:7:5
 
 Result:
-t1: _|_ // t1: error in call to encoding/yaml.Validate: incomplete value {a:2} | {a:2,b:int}
+t1: true
 
 // TODO: fix this test. It resolves to true in the old evaluator,
 // but incorrectly errors in the new evaluator.
-t2: true
+t2: _|_ // t2: error in call to encoding/yaml.Validate: incomplete value {a:2} | {a:2,b:int}
 t3: true
 t4: true
-- diff/explanation --
t1: The incomplete value error in the old evaluator was incorrect - the presence of
required fields in each disjunct provides enough information to resolve the disjunction,
and the new evaluator correctly identifies this.
-- out/yaml --
Errors:
t1: error in call to encoding/yaml.Validate: incomplete value {a:2} | {a:2,b:int}:
    ./in.cue:3:5

Result:
t1: _|_ // t1: error in call to encoding/yaml.Validate: incomplete value {a:2} | {a:2,b:int}

// TODO: fix this test. It resolves to true in the old evaluator,
// but incorrectly errors in the new evaluator.
t2: true
t3: true
t4: true
