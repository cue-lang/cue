-- in.cue --
import "list"

t1: {
	l: [1, 2, 3, "str", [1], { foo: 1 }]

	l: list.MatchN(1, string)
	l: list.MatchN(3, number)
	l: list.MatchN(>=1, number)
	l: list.MatchN(1, [int])
	l: list.MatchN(1, {foo: int})
	l: list.MatchN(1, 1)
	l: list.MatchN(1, "str")
	l: list.MatchN(>0, "str")
	l: list.MatchN(1, {foo: 1})

	lt: list.MatchN(l, 1, string)
	lt: list.MatchN(l, 3, number)
	lt: list.MatchN(l, >=1, number)
	lt: list.MatchN(l, 1, [int])
	lt: list.MatchN(l, 1, {foo: int})
	lt: list.MatchN(l, 1, 1)
	lt: list.MatchN(l, 1, "str")
	lt: list.MatchN(l, >0, "str")
	lt: list.MatchN(l, 1, {foo: 1})

	lt: list.MatchN(l, >0, "str")
	lt: list.MatchN(l, >0, 2)
	lt: list.MatchN(l, >0, [1])
	lt: list.MatchN(l, >0, {foo: 1})
	lt: list.MatchN(l, >0, number)
	lt: list.MatchN(l, >0, string)
	lt: list.MatchN(l, >0, [int])
	lt: list.MatchN(l, >0, [...])
	lt: list.MatchN(l, >0, { foo: int })
	lt: list.MatchN(l, 0, #TOO)
	lt: list.MatchN(l, 0, [string])

	lf: list.MatchN(l, >0, #TOO)
	lf: list.MatchN(l, >0, [string])
}
#TOO: {too: int}
-- out/list --
t1: {
	l: [1, 2, 3, "str", [1], {
		foo: 1
	}]
	lt: true
	lf: false
}
#TOO: {
	too: int
}
