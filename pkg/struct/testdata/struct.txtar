-- in.cue --
import "struct"

minFields: {
	[string]: struct.MinFields(1)

	incomplete1: {}
	fail1: close({})
	failOptional1: close({a?: 1})
	failHidden1: close({_a: 1})
	ok4: {_a: 1, a: 1}
	ok1: {a: 1}
	ok2: close({a: 1})
	ok3: {a?: 1, a: 1}
	ok5: {#a: int, a: #a & 1}
}

maxFields: {
	[string]: struct.MaxFields(1)

	ok1: {}
	ok2: {a: 1}
	ok3: close({a: 1})
	ok4: {a?: 1, b?: 2}
	ok5: {a: 1, _b: 2}
	ok6: {a: 1, #b: int}

	fail1: {a: 1, b: 2}
}

-- out/structs-v3 --
Errors:
minFields.fail1: invalid value {} (does not satisfy struct.MinFields(1)): len(fields) < MinFields(1) (0 < 1):
    ./in.cue:4:12
    ./in.cue:4:29
minFields.failHidden1: invalid value {_a:1} (does not satisfy struct.MinFields(1)): len(fields) < MinFields(1) (0 < 1):
    ./in.cue:4:12
    ./in.cue:4:29
maxFields.fail1: invalid value {a:1,b:2} (does not satisfy struct.MaxFields(1)): len(fields) > MaxFields(1) (2 > 1):
    ./in.cue:18:12
    ./in.cue:18:29
maxFields.ok4: invalid value {a?:1,b?:2} (does not satisfy struct.MaxFields(1)): len(fields) > MaxFields(1) (2 > 1):
    ./in.cue:18:12
    ./in.cue:18:29

Result:
import "struct"

minFields: {
	incomplete1: {} & struct.MinFields(1)
	fail1: _|_ // minFields.fail1: invalid value {} (does not satisfy struct.MinFields(1)): len(fields) < MinFields(1) (0 < 1)
	failOptional1: {
		a?: 1
	}
	failHidden1: _|_ // minFields.failHidden1: invalid value {_a:1} (does not satisfy struct.MinFields(1)): len(fields) < MinFields(1) (0 < 1)
	ok4: {
		a: 1
	}
	ok1: {
		a: 1
	}
	ok2: {
		a: 1
	}
	ok3: {
		a: 1
	}
	ok5: {
		#a: int
		a:  1
	}
}
maxFields: {
	ok1: {}
	ok2: {
		a: 1
	}
	ok3: {
		a: 1
	}
	ok4: _|_ // maxFields.ok4: invalid value {a?:1,b?:2} (does not satisfy struct.MaxFields(1)): len(fields) > MaxFields(1) (2 > 1)
	ok5: {
		a: 1
	}
	ok6: {
		a:  1
		#b: int
	}
	fail1: _|_ // maxFields.fail1: invalid value {a:1,b:2} (does not satisfy struct.MaxFields(1)): len(fields) > MaxFields(1) (2 > 1)
}
-- diff/-out/structs-v3<==>+out/structs --
diff old new
--- old
+++ new
@@ -2,19 +2,15 @@
 minFields.fail1: invalid value {} (does not satisfy struct.MinFields(1)): len(fields) < MinFields(1) (0 < 1):
     ./in.cue:4:12
     ./in.cue:4:29
-    ./in.cue:7:9
 minFields.failHidden1: invalid value {_a:1} (does not satisfy struct.MinFields(1)): len(fields) < MinFields(1) (0 < 1):
     ./in.cue:4:12
     ./in.cue:4:29
-    ./in.cue:9:15
 maxFields.fail1: invalid value {a:1,b:2} (does not satisfy struct.MaxFields(1)): len(fields) > MaxFields(1) (2 > 1):
     ./in.cue:18:12
     ./in.cue:18:29
-    ./in.cue:27:9
 maxFields.ok4: invalid value {a?:1,b?:2} (does not satisfy struct.MaxFields(1)): len(fields) > MaxFields(1) (2 > 1):
     ./in.cue:18:12
     ./in.cue:18:29
-    ./in.cue:23:7
 
 Result:
 import "struct"
-- diff/todo/p2 --
Missing error positions.
-- out/structs --
Errors:
minFields.fail1: invalid value {} (does not satisfy struct.MinFields(1)): len(fields) < MinFields(1) (0 < 1):
    ./in.cue:4:12
    ./in.cue:4:29
    ./in.cue:7:9
minFields.failHidden1: invalid value {_a:1} (does not satisfy struct.MinFields(1)): len(fields) < MinFields(1) (0 < 1):
    ./in.cue:4:12
    ./in.cue:4:29
    ./in.cue:9:15
maxFields.fail1: invalid value {a:1,b:2} (does not satisfy struct.MaxFields(1)): len(fields) > MaxFields(1) (2 > 1):
    ./in.cue:18:12
    ./in.cue:18:29
    ./in.cue:27:9
maxFields.ok4: invalid value {a?:1,b?:2} (does not satisfy struct.MaxFields(1)): len(fields) > MaxFields(1) (2 > 1):
    ./in.cue:18:12
    ./in.cue:18:29
    ./in.cue:23:7

Result:
import "struct"

minFields: {
	incomplete1: {} & struct.MinFields(1)
	fail1: _|_ // minFields.fail1: invalid value {} (does not satisfy struct.MinFields(1)): len(fields) < MinFields(1) (0 < 1)
	failOptional1: {
		a?: 1
	}
	failHidden1: _|_ // minFields.failHidden1: invalid value {_a:1} (does not satisfy struct.MinFields(1)): len(fields) < MinFields(1) (0 < 1)
	ok4: {
		a: 1
	}
	ok1: {
		a: 1
	}
	ok2: {
		a: 1
	}
	ok3: {
		a: 1
	}
	ok5: {
		#a: int
		a:  1
	}
}
maxFields: {
	ok1: {}
	ok2: {
		a: 1
	}
	ok3: {
		a: 1
	}
	ok4: _|_ // maxFields.ok4: invalid value {a?:1,b?:2} (does not satisfy struct.MaxFields(1)): len(fields) > MaxFields(1) (2 > 1)
	ok5: {
		a: 1
	}
	ok6: {
		a:  1
		#b: int
	}
	fail1: _|_ // maxFields.fail1: invalid value {a:1,b:2} (does not satisfy struct.MaxFields(1)): len(fields) > MaxFields(1) (2 > 1)
}
