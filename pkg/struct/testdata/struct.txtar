-- in.cue --
import "struct"

minFields: {
	[string]: struct.MinFields(1)

	incomplete1: {}
	fail1: close({})
	failOptional1: close({a?: 1})
	failHidden1: close({_a: 1})
	ok4: {_a: 1, a: 1}
	ok1: {a: 1}
	ok2: close({a: 1})
	ok3: {a?: 1, a: 1}
	ok5: {#a: int, a: #a & 1}
	ok6: {a!: 1}
	ok7: {a!: 1, b!: 2}
}

maxFields: {
	[string]: struct.MaxFields(1)

	ok1: {}
	ok2: {a: 1}
	ok3: close({a: 1})
	ok4: {a?: 1, b?: 2}
	ok5: {a: 1, _b: 2}
	ok6: {a: 1, #b: int}
	ok7: {a!: 1}
	ok8: {a!: 1, b?: 2}

	fail1: {a: 1, b: 2}
	fail2: {a!: 1, b!: 2}
	fail3: {a: 1, b!: 2}
}

-- out/structs-v3 --
Errors:
minFields.fail1: invalid value {} (does not satisfy struct.MinFields(1)): len(fields) < MinFields(1) (0 < 1):
    ./in.cue:4:12
    ./in.cue:4:29
minFields.failHidden1: invalid value {_a:1} (does not satisfy struct.MinFields(1)): len(fields) < MinFields(1) (0 < 1):
    ./in.cue:4:12
    ./in.cue:4:29
minFields.failOptional1: invalid value {a?:1} (does not satisfy struct.MinFields(1)): len(fields) < MinFields(1) (0 < 1):
    ./in.cue:4:12
    ./in.cue:4:29
maxFields.fail1: invalid value {a:1,b:2} (does not satisfy struct.MaxFields(1)): len(fields) > MaxFields(1) (2 > 1):
    ./in.cue:20:12
    ./in.cue:20:29
maxFields.fail2: invalid value {a!:1,b!:2} (does not satisfy struct.MaxFields(1)): len(fields) > MaxFields(1) (2 > 1):
    ./in.cue:20:12
    ./in.cue:20:29
maxFields.fail3: invalid value {a:1,b!:2} (does not satisfy struct.MaxFields(1)): len(fields) > MaxFields(1) (2 > 1):
    ./in.cue:20:12
    ./in.cue:20:29

Result:
import "struct"

minFields: {
	incomplete1: {} & struct.MinFields(1)
	fail1:         _|_ // minFields.fail1: invalid value {} (does not satisfy struct.MinFields(1)): len(fields) < MinFields(1) (0 < 1)
	failOptional1: _|_ // minFields.failOptional1: invalid value {a?:1} (does not satisfy struct.MinFields(1)): len(fields) < MinFields(1) (0 < 1)
	failHidden1:   _|_ // minFields.failHidden1: invalid value {_a:1} (does not satisfy struct.MinFields(1)): len(fields) < MinFields(1) (0 < 1)
	ok4: {
		a: 1
	}
	ok1: {
		a: 1
	}
	ok2: {
		a: 1
	}
	ok3: {
		a: 1
	}
	ok5: {
		#a: int
		a:  1
	}
	ok6: {
		a!: 1
	}
	ok7: {
		a!: 1
		b!: 2
	}
}
maxFields: {
	ok1: {}
	ok2: {
		a: 1
	}
	ok3: {
		a: 1
	}
	ok4: {
		a?: 1
		b?: 2
	}
	ok5: {
		a: 1
	}
	ok6: {
		a:  1
		#b: int
	}
	ok7: {
		a!: 1
	}
	ok8: {
		a!: 1
		b?: 2
	}
	fail1: _|_ // maxFields.fail1: invalid value {a:1,b:2} (does not satisfy struct.MaxFields(1)): len(fields) > MaxFields(1) (2 > 1)
	fail2: _|_ // maxFields.fail2: invalid value {a!:1,b!:2} (does not satisfy struct.MaxFields(1)): len(fields) > MaxFields(1) (2 > 1)
	fail3: _|_ // maxFields.fail3: invalid value {a:1,b!:2} (does not satisfy struct.MaxFields(1)): len(fields) > MaxFields(1) (2 > 1)
}
-- diff/-out/structs-v3<==>+out/structs --
diff old new
--- old
+++ new
@@ -2,23 +2,21 @@
 minFields.fail1: invalid value {} (does not satisfy struct.MinFields(1)): len(fields) < MinFields(1) (0 < 1):
     ./in.cue:4:12
     ./in.cue:4:29
-    ./in.cue:7:9
 minFields.failHidden1: invalid value {_a:1} (does not satisfy struct.MinFields(1)): len(fields) < MinFields(1) (0 < 1):
     ./in.cue:4:12
     ./in.cue:4:29
-    ./in.cue:9:15
+minFields.failOptional1: invalid value {a?:1} (does not satisfy struct.MinFields(1)): len(fields) < MinFields(1) (0 < 1):
+    ./in.cue:4:12
+    ./in.cue:4:29
 maxFields.fail1: invalid value {a:1,b:2} (does not satisfy struct.MaxFields(1)): len(fields) > MaxFields(1) (2 > 1):
     ./in.cue:20:12
     ./in.cue:20:29
-    ./in.cue:31:9
 maxFields.fail2: invalid value {a!:1,b!:2} (does not satisfy struct.MaxFields(1)): len(fields) > MaxFields(1) (2 > 1):
     ./in.cue:20:12
     ./in.cue:20:29
-    ./in.cue:32:9
 maxFields.fail3: invalid value {a:1,b!:2} (does not satisfy struct.MaxFields(1)): len(fields) > MaxFields(1) (2 > 1):
     ./in.cue:20:12
     ./in.cue:20:29
-    ./in.cue:33:9
 
 Result:
 import "struct"
@@ -25,11 +23,9 @@
 
 minFields: {
 	incomplete1: {} & struct.MinFields(1)
-	fail1: _|_ // minFields.fail1: invalid value {} (does not satisfy struct.MinFields(1)): len(fields) < MinFields(1) (0 < 1)
-	failOptional1: close({
-		a?: 1
-	}) & struct.MinFields(1)
-	failHidden1: _|_ // minFields.failHidden1: invalid value {_a:1} (does not satisfy struct.MinFields(1)): len(fields) < MinFields(1) (0 < 1)
+	fail1:         _|_ // minFields.fail1: invalid value {} (does not satisfy struct.MinFields(1)): len(fields) < MinFields(1) (0 < 1)
+	failOptional1: _|_ // minFields.failOptional1: invalid value {a?:1} (does not satisfy struct.MinFields(1)): len(fields) < MinFields(1) (0 < 1)
+	failHidden1:   _|_ // minFields.failHidden1: invalid value {_a:1} (does not satisfy struct.MinFields(1)): len(fields) < MinFields(1) (0 < 1)
 	ok4: {
 		a: 1
 	}
-- diff/explanation --
failOptional1: the new evaluator fails as expected, but the old evaluator doesn't -
perhaps due to a bug in either the old evaluator or test code.
-- diff/todo/p2 --
Missing error positions.
-- out/structs --
Errors:
minFields.fail1: invalid value {} (does not satisfy struct.MinFields(1)): len(fields) < MinFields(1) (0 < 1):
    ./in.cue:4:12
    ./in.cue:4:29
    ./in.cue:7:9
minFields.failHidden1: invalid value {_a:1} (does not satisfy struct.MinFields(1)): len(fields) < MinFields(1) (0 < 1):
    ./in.cue:4:12
    ./in.cue:4:29
    ./in.cue:9:15
maxFields.fail1: invalid value {a:1,b:2} (does not satisfy struct.MaxFields(1)): len(fields) > MaxFields(1) (2 > 1):
    ./in.cue:20:12
    ./in.cue:20:29
    ./in.cue:31:9
maxFields.fail2: invalid value {a!:1,b!:2} (does not satisfy struct.MaxFields(1)): len(fields) > MaxFields(1) (2 > 1):
    ./in.cue:20:12
    ./in.cue:20:29
    ./in.cue:32:9
maxFields.fail3: invalid value {a:1,b!:2} (does not satisfy struct.MaxFields(1)): len(fields) > MaxFields(1) (2 > 1):
    ./in.cue:20:12
    ./in.cue:20:29
    ./in.cue:33:9

Result:
import "struct"

minFields: {
	incomplete1: {} & struct.MinFields(1)
	fail1: _|_ // minFields.fail1: invalid value {} (does not satisfy struct.MinFields(1)): len(fields) < MinFields(1) (0 < 1)
	failOptional1: close({
		a?: 1
	}) & struct.MinFields(1)
	failHidden1: _|_ // minFields.failHidden1: invalid value {_a:1} (does not satisfy struct.MinFields(1)): len(fields) < MinFields(1) (0 < 1)
	ok4: {
		a: 1
	}
	ok1: {
		a: 1
	}
	ok2: {
		a: 1
	}
	ok3: {
		a: 1
	}
	ok5: {
		#a: int
		a:  1
	}
	ok6: {
		a!: 1
	}
	ok7: {
		a!: 1
		b!: 2
	}
}
maxFields: {
	ok1: {}
	ok2: {
		a: 1
	}
	ok3: {
		a: 1
	}
	ok4: {
		a?: 1
		b?: 2
	}
	ok5: {
		a: 1
	}
	ok6: {
		a:  1
		#b: int
	}
	ok7: {
		a!: 1
	}
	ok8: {
		a!: 1
		b?: 2
	}
	fail1: _|_ // maxFields.fail1: invalid value {a:1,b:2} (does not satisfy struct.MaxFields(1)): len(fields) > MaxFields(1) (2 > 1)
	fail2: _|_ // maxFields.fail2: invalid value {a!:1,b!:2} (does not satisfy struct.MaxFields(1)): len(fields) > MaxFields(1) (2 > 1)
	fail3: _|_ // maxFields.fail3: invalid value {a:1,b!:2} (does not satisfy struct.MaxFields(1)): len(fields) > MaxFields(1) (2 > 1)
}
