A variation on 25.

This test justifies tracking dependencies within winning sets.

In 25, line 4 is the only winner for y, and so it is required to
survive. Then, line 4 requires line 1, and line 1 requires line
6. Because line 6 is required, line 2 (with which line 6 is a tie),
can be removed.

But here, we have an additional tie, this time for y, between line 4
and line 7, and as such we have no "early" requirement that line 1
(the comprehension) survives. So we have a tie for x between lines 2
and 6, and a tie for y between lines 4 and 7. The tie for x gets
solved first.

If we did not track dependencies *within* a winning set, then the
following would occur:
1. we would choose line 2 to win (based on file position)
2. line 2 requires line 1
3. line 1 requires line 6.
So we would end up with both line 2 and line 6 surviving.

But because we identify dependencies between winning nodes *within*
the same set, we find than line 2 transitively depends on line 6, and
as such, when choose a winner, we make sure we choose line 6.

Having chosen the winner for x, we then chose the winner for y between
lines 4 and 7. This is much simpler - we have a tie of 1-1 for the
seenCounts, and so we just pick line 4 because 4 < 7.

#skip-v2
-- a.cue --
if x == 5 {
	x: 5
	x: int
	y: "hi"
}
x: 5
y: "hi"
-- out/trim-v3 --
== a.cue
if x == 5 {
	y: "hi"
}
x: 5
-- out/trim-v3-noshare --
== a.cue
if x == 5 {
	y: "hi"
}
x: 5
